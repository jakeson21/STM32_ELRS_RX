
RC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007474  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800767c  0800767c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800767c  0800767c  0001767c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007684  08007684  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007684  08007684  00017684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007688  08007688  00017688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800768c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f8  2000001c  080076a8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a14  080076a8  00020a14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000172a1  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003508  00000000  00000000  00037330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  0003a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc5  00000000  00000000  0003bc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002454b  00000000  00000000  0003cc4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b59  00000000  00000000  00061198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2423  00000000  00000000  0007acf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055dc  00000000  00000000  0015d114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001626f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000001c 	.word	0x2000001c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800763c 	.word	0x0800763c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000020 	.word	0x20000020
 800021c:	0800763c 	.word	0x0800763c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b970 	b.w	8000528 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	460f      	mov	r7, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d965      	bls.n	8000342 <__udivmoddi4+0xe2>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b143      	cbz	r3, 800028e <__udivmoddi4+0x2e>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	409f      	lsls	r7, r3
 8000286:	fa20 f202 	lsr.w	r2, r0, r2
 800028a:	4317      	orrs	r7, r2
 800028c:	409c      	lsls	r4, r3
 800028e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000292:	fa1f f58c 	uxth.w	r5, ip
 8000296:	fbb7 f1fe 	udiv	r1, r7, lr
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	4290      	cmp	r0, r2
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ac:	eb1c 0202 	adds.w	r2, ip, r2
 80002b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b4:	f080 811c 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f240 8119 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002be:	3902      	subs	r1, #2
 80002c0:	4462      	add	r2, ip
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d2:	fb00 f505 	mul.w	r5, r0, r5
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	f080 8107 	bcs.w	80004f4 <__udivmoddi4+0x294>
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	f240 8104 	bls.w	80004f4 <__udivmoddi4+0x294>
 80002ec:	4464      	add	r4, ip
 80002ee:	3802      	subs	r0, #2
 80002f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40dc      	lsrs	r4, r3
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0xbc>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80ed 	beq.w	80004ea <__udivmoddi4+0x28a>
 8000310:	2100      	movs	r1, #0
 8000312:	e9c6 0500 	strd	r0, r5, [r6]
 8000316:	4608      	mov	r0, r1
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	fab3 f183 	clz	r1, r3
 8000320:	2900      	cmp	r1, #0
 8000322:	d149      	bne.n	80003b8 <__udivmoddi4+0x158>
 8000324:	42ab      	cmp	r3, r5
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xce>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80f8 	bhi.w	800051e <__udivmoddi4+0x2be>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb65 0203 	sbc.w	r2, r5, r3
 8000334:	2001      	movs	r0, #1
 8000336:	4617      	mov	r7, r2
 8000338:	2e00      	cmp	r6, #0
 800033a:	d0e2      	beq.n	8000302 <__udivmoddi4+0xa2>
 800033c:	e9c6 4700 	strd	r4, r7, [r6]
 8000340:	e7df      	b.n	8000302 <__udivmoddi4+0xa2>
 8000342:	b902      	cbnz	r2, 8000346 <__udivmoddi4+0xe6>
 8000344:	deff      	udf	#255	; 0xff
 8000346:	fab2 f382 	clz	r3, r2
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8090 	bne.w	8000470 <__udivmoddi4+0x210>
 8000350:	1a8a      	subs	r2, r1, r2
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	2101      	movs	r1, #1
 800035c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000360:	fb07 2015 	mls	r0, r7, r5, r2
 8000364:	0c22      	lsrs	r2, r4, #16
 8000366:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036a:	fb0e f005 	mul.w	r0, lr, r5
 800036e:	4290      	cmp	r0, r2
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x124>
 8000372:	eb1c 0202 	adds.w	r2, ip, r2
 8000376:	f105 38ff 	add.w	r8, r5, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4290      	cmp	r0, r2
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 8000382:	4645      	mov	r5, r8
 8000384:	1a12      	subs	r2, r2, r0
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	45a6      	cmp	lr, r4
 800039a:	d908      	bls.n	80003ae <__udivmoddi4+0x14e>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x14c>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f200 80bb 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 80003ac:	4610      	mov	r0, r2
 80003ae:	eba4 040e 	sub.w	r4, r4, lr
 80003b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b6:	e79f      	b.n	80002f8 <__udivmoddi4+0x98>
 80003b8:	f1c1 0720 	rsb	r7, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	40fd      	lsrs	r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	4323      	orrs	r3, r4
 80003d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	fb09 5518 	mls	r5, r9, r8, r5
 80003e2:	0c1c      	lsrs	r4, r3, #16
 80003e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	fa00 f001 	lsl.w	r0, r0, r1
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2b4>
 8000404:	42a5      	cmp	r5, r4
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2b4>
 800040a:	f1a8 0802 	sub.w	r8, r8, #2
 800040e:	4464      	add	r4, ip
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	b29d      	uxth	r5, r3
 8000414:	fbb4 f3f9 	udiv	r3, r4, r9
 8000418:	fb09 4413 	mls	r4, r9, r3, r4
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	fb03 fe0e 	mul.w	lr, r3, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000430:	d26c      	bcs.n	800050c <__udivmoddi4+0x2ac>
 8000432:	45a6      	cmp	lr, r4
 8000434:	d96a      	bls.n	800050c <__udivmoddi4+0x2ac>
 8000436:	3b02      	subs	r3, #2
 8000438:	4464      	add	r4, ip
 800043a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043e:	fba3 9502 	umull	r9, r5, r3, r2
 8000442:	eba4 040e 	sub.w	r4, r4, lr
 8000446:	42ac      	cmp	r4, r5
 8000448:	46c8      	mov	r8, r9
 800044a:	46ae      	mov	lr, r5
 800044c:	d356      	bcc.n	80004fc <__udivmoddi4+0x29c>
 800044e:	d053      	beq.n	80004f8 <__udivmoddi4+0x298>
 8000450:	b156      	cbz	r6, 8000468 <__udivmoddi4+0x208>
 8000452:	ebb0 0208 	subs.w	r2, r0, r8
 8000456:	eb64 040e 	sbc.w	r4, r4, lr
 800045a:	fa04 f707 	lsl.w	r7, r4, r7
 800045e:	40ca      	lsrs	r2, r1
 8000460:	40cc      	lsrs	r4, r1
 8000462:	4317      	orrs	r7, r2
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	4618      	mov	r0, r3
 800046a:	2100      	movs	r1, #0
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	f1c3 0120 	rsb	r1, r3, #32
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	fa20 f201 	lsr.w	r2, r0, r1
 800047c:	fa25 f101 	lsr.w	r1, r5, r1
 8000480:	409d      	lsls	r5, r3
 8000482:	432a      	orrs	r2, r5
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000490:	fb07 1510 	mls	r5, r7, r0, r1
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049a:	fb00 f50e 	mul.w	r5, r0, lr
 800049e:	428d      	cmp	r5, r1
 80004a0:	fa04 f403 	lsl.w	r4, r4, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x258>
 80004a6:	eb1c 0101 	adds.w	r1, ip, r1
 80004aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ae:	d22f      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004b0:	428d      	cmp	r5, r1
 80004b2:	d92d      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1b49      	subs	r1, r1, r5
 80004ba:	b292      	uxth	r2, r2
 80004bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c0:	fb07 1115 	mls	r1, r7, r5, r1
 80004c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c8:	fb05 f10e 	mul.w	r1, r5, lr
 80004cc:	4291      	cmp	r1, r2
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x282>
 80004d0:	eb1c 0202 	adds.w	r2, ip, r2
 80004d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d8:	d216      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 80004da:	4291      	cmp	r1, r2
 80004dc:	d914      	bls.n	8000508 <__udivmoddi4+0x2a8>
 80004de:	3d02      	subs	r5, #2
 80004e0:	4462      	add	r2, ip
 80004e2:	1a52      	subs	r2, r2, r1
 80004e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e8:	e738      	b.n	800035c <__udivmoddi4+0xfc>
 80004ea:	4631      	mov	r1, r6
 80004ec:	4630      	mov	r0, r6
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xa2>
 80004f0:	4639      	mov	r1, r7
 80004f2:	e6e6      	b.n	80002c2 <__udivmoddi4+0x62>
 80004f4:	4610      	mov	r0, r2
 80004f6:	e6fb      	b.n	80002f0 <__udivmoddi4+0x90>
 80004f8:	4548      	cmp	r0, r9
 80004fa:	d2a9      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000500:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000504:	3b01      	subs	r3, #1
 8000506:	e7a3      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000508:	4645      	mov	r5, r8
 800050a:	e7ea      	b.n	80004e2 <__udivmoddi4+0x282>
 800050c:	462b      	mov	r3, r5
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1da>
 8000510:	4640      	mov	r0, r8
 8000512:	e7d1      	b.n	80004b8 <__udivmoddi4+0x258>
 8000514:	46d0      	mov	r8, sl
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000518:	3d02      	subs	r5, #2
 800051a:	4462      	add	r2, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x124>
 800051e:	4608      	mov	r0, r1
 8000520:	e70a      	b.n	8000338 <__udivmoddi4+0xd8>
 8000522:	4464      	add	r4, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e742      	b.n	80003ae <__udivmoddi4+0x14e>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <__basepriRestoreMem>:
#else
// ARM BASEPRI manipulation

// restore BASEPRI (called as cleanup function), with global memory barrier
static inline void __basepriRestoreMem(uint8_t *val)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
    __set_BASEPRI(*val);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	f383 8811 	msr	BASEPRI, r3
}
 8000540:	bf00      	nop
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <__basepriSetMemRetVal>:

// set BASEPRI_MAX, with global memory barrier, returns true
static inline uint8_t __basepriSetMemRetVal(uint8_t prio)
{
 800054e:	b480      	push	{r7}
 8000550:	b085      	sub	sp, #20
 8000552:	af00      	add	r7, sp, #0
 8000554:	4603      	mov	r3, r0
 8000556:	71fb      	strb	r3, [r7, #7]
    __set_BASEPRI_MAX(prio);
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	60fb      	str	r3, [r7, #12]
           or the new value increases the BASEPRI priority level.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
{
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f383 8812 	msr	BASEPRI_MAX, r3
}
 8000562:	bf00      	nop
    return 1;
 8000564:	2301      	movs	r3, #1
}
 8000566:	4618      	mov	r0, r3
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
	...

08000574 <microsISR>:
uint8_t bRx_buffer_full = 0;
uint8_t bTx_buffer_empty = 1;
uint32_t lastRxTime = 0;

uint32_t microsISR(void)
{
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800057a:	f3ef 8311 	mrs	r3, BASEPRI
 800057e:	60bb      	str	r3, [r7, #8]
  return(result);
 8000580:	68bb      	ldr	r3, [r7, #8]
    register uint32_t ms, pending, cycle_cnt;

    ATOMIC_BLOCK(NVIC_PRIO_MAX) {
 8000582:	b2db      	uxtb	r3, r3
 8000584:	71fb      	strb	r3, [r7, #7]
 8000586:	2010      	movs	r0, #16
 8000588:	f7ff ffe1 	bl	800054e <__basepriSetMemRetVal>
 800058c:	4603      	mov	r3, r0
 800058e:	73fb      	strb	r3, [r7, #15]
 8000590:	e013      	b.n	80005ba <microsISR+0x46>
        cycle_cnt = SysTick->VAL;
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <microsISR+0x80>)
 8000594:	689c      	ldr	r4, [r3, #8]

        if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <microsISR+0x80>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d004      	beq.n	80005ac <microsISR+0x38>
            // Update pending.
            // Record it for multiple calls within the same rollover period
            // (Will be cleared when serviced).
            // Note that multiple rollovers are not considered.

            sysTickPending = 1;
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <microsISR+0x84>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	601a      	str	r2, [r3, #0]

            // Read VAL again to ensure the value is read after the rollover.

            cycle_cnt = SysTick->VAL;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <microsISR+0x80>)
 80005aa:	689c      	ldr	r4, [r3, #8]
        }

        ms = sysTickUptime;
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <microsISR+0x88>)
 80005ae:	681d      	ldr	r5, [r3, #0]
        pending = sysTickPending;
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <microsISR+0x84>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	461e      	mov	r6, r3
    ATOMIC_BLOCK(NVIC_PRIO_MAX) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	73fb      	strb	r3, [r7, #15]
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d1e8      	bne.n	8000592 <microsISR+0x1e>
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ffb2 	bl	800052c <__basepriRestoreMem>
    }

    return ((ms + pending) * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 80005c8:	19ab      	adds	r3, r5, r6
 80005ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ce:	fb03 f202 	mul.w	r2, r3, r2
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <microsISR+0x8c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005da:	fb01 f303 	mul.w	r3, r1, r3
 80005de:	1b19      	subs	r1, r3, r4
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <microsISR+0x8c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80005e8:	4413      	add	r3, r2
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	bf00      	nop
 80005f4:	e000e010 	.word	0xe000e010
 80005f8:	20000834 	.word	0x20000834
 80005fc:	2000082c 	.word	0x2000082c
 8000600:	20000824 	.word	0x20000824

08000604 <micros>:

uint32_t micros(void)
{
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
    register uint32_t ms, cycle_cnt;

    // Call microsISR() in interrupt and elevated (non-zero) BASEPRI context

    if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) || (__get_BASEPRI())) {
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <micros+0x68>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000612:	2b00      	cmp	r3, #0
 8000614:	d105      	bne.n	8000622 <micros+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000616:	f3ef 8311 	mrs	r3, BASEPRI
 800061a:	607b      	str	r3, [r7, #4]
  return(result);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d003      	beq.n	800062a <micros+0x26>
        return microsISR();
 8000622:	f7ff ffa7 	bl	8000574 <microsISR>
 8000626:	4603      	mov	r3, r0
 8000628:	e01b      	b.n	8000662 <micros+0x5e>
    }

    do {
        ms = sysTickUptime;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <micros+0x6c>)
 800062c:	681d      	ldr	r5, [r3, #0]
        cycle_cnt = SysTick->VAL;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <micros+0x70>)
 8000630:	689c      	ldr	r4, [r3, #8]
    } while (ms != sysTickUptime || cycle_cnt > sysTickValStamp);
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <micros+0x6c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	429d      	cmp	r5, r3
 8000638:	d1f7      	bne.n	800062a <micros+0x26>
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <micros+0x74>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	429c      	cmp	r4, r3
 8000640:	d8f3      	bhi.n	800062a <micros+0x26>

    return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8000642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000646:	fb03 f205 	mul.w	r2, r3, r5
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <micros+0x78>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000652:	fb01 f303 	mul.w	r3, r1, r3
 8000656:	1b19      	subs	r1, r3, r4
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <micros+0x78>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000660:	4413      	add	r3, r2
}
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bdb0      	pop	{r4, r5, r7, pc}
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00
 8000670:	2000082c 	.word	0x2000082c
 8000674:	e000e010 	.word	0xe000e010
 8000678:	20000830 	.word	0x20000830
 800067c:	20000824 	.word	0x20000824

08000680 <millis>:

// Return system uptime in milliseconds (rollover in 49 days)
uint32_t millis(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
    return sysTickUptime;
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <millis+0x14>)
 8000686:	681b      	ldr	r3, [r3, #0]
}
 8000688:	4618      	mov	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	2000082c 	.word	0x2000082c

08000698 <HAL_UART_RxHalfCpltCallback>:


void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006ac:	b4b0      	push	{r4, r5, r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
//	if (bRx_buffer_full) HAL_GPIO_TogglePin (GPIOB, LD1_Pin);
	memcpy((void *)Rx_process_buff, (const void *)Rx_data, RX_UART_BUFFER_SIZE);
 80006b4:	4a0d      	ldr	r2, [pc, #52]	; (80006ec <HAL_UART_RxCpltCallback+0x40>)
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_UART_RxCpltCallback+0x44>)
 80006b8:	4614      	mov	r4, r2
 80006ba:	461d      	mov	r5, r3
 80006bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	Rx_count++;
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <HAL_UART_RxCpltCallback+0x48>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <HAL_UART_RxCpltCallback+0x48>)
 80006d8:	6013      	str	r3, [r2, #0]
	bRx_buffer_full = 1;
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <HAL_UART_RxCpltCallback+0x4c>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bcb0      	pop	{r4, r5, r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	2000079c 	.word	0x2000079c
 80006f0:	2000075c 	.word	0x2000075c
 80006f4:	200007dc 	.word	0x200007dc
 80006f8:	2000083c 	.word	0x2000083c

080006fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <HAL_UART_TxCpltCallback+0x24>)
 800070a:	f001 fec4 	bl	8002496 <HAL_GPIO_TogglePin>
	Tx_count++;
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_UART_TxCpltCallback+0x28>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	4a03      	ldr	r2, [pc, #12]	; (8000724 <HAL_UART_TxCpltCallback+0x28>)
 8000716:	6013      	str	r3, [r2, #0]
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40020400 	.word	0x40020400
 8000724:	200007e0 	.word	0x200007e0

08000728 <user_pwm_setvalue>:

void user_pwm_setvalue(TIM_HandleTypeDef* htim, uint16_t channel,  uint16_t uSvalue)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	807b      	strh	r3, [r7, #2]
 8000734:	4613      	mov	r3, r2
 8000736:	803b      	strh	r3, [r7, #0]
    if (uSvalue > PWM_RANGE_MAX)
 8000738:	883b      	ldrh	r3, [r7, #0]
 800073a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800073e:	d903      	bls.n	8000748 <user_pwm_setvalue+0x20>
    {
    	uSvalue = PWM_RANGE_MAX;
 8000740:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000744:	803b      	strh	r3, [r7, #0]
 8000746:	e006      	b.n	8000756 <user_pwm_setvalue+0x2e>
    }
    else if (uSvalue < PWM_RANGE_MIN)
 8000748:	883b      	ldrh	r3, [r7, #0]
 800074a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800074e:	d202      	bcs.n	8000756 <user_pwm_setvalue+0x2e>
    {
    	uSvalue = PWM_RANGE_MIN;
 8000750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000754:	803b      	strh	r3, [r7, #0]
    }

    uint16_t pulse_width = uSvalue; // 1000us = 200, 2000us = 400
 8000756:	883b      	ldrh	r3, [r7, #0]
 8000758:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 800075a:	887b      	ldrh	r3, [r7, #2]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d104      	bne.n	800076a <user_pwm_setvalue+0x42>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	89fa      	ldrh	r2, [r7, #14]
 8000766:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000768:	e023      	b.n	80007b2 <user_pwm_setvalue+0x8a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 800076a:	887b      	ldrh	r3, [r7, #2]
 800076c:	2b04      	cmp	r3, #4
 800076e:	d104      	bne.n	800077a <user_pwm_setvalue+0x52>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	89fb      	ldrh	r3, [r7, #14]
 8000776:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000778:	e01b      	b.n	80007b2 <user_pwm_setvalue+0x8a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 800077a:	887b      	ldrh	r3, [r7, #2]
 800077c:	2b08      	cmp	r3, #8
 800077e:	d104      	bne.n	800078a <user_pwm_setvalue+0x62>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	89fb      	ldrh	r3, [r7, #14]
 8000786:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000788:	e013      	b.n	80007b2 <user_pwm_setvalue+0x8a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 800078a:	887b      	ldrh	r3, [r7, #2]
 800078c:	2b0c      	cmp	r3, #12
 800078e:	d104      	bne.n	800079a <user_pwm_setvalue+0x72>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	89fb      	ldrh	r3, [r7, #14]
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000798:	e00b      	b.n	80007b2 <user_pwm_setvalue+0x8a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 800079a:	887b      	ldrh	r3, [r7, #2]
 800079c:	2b10      	cmp	r3, #16
 800079e:	d104      	bne.n	80007aa <user_pwm_setvalue+0x82>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	89fb      	ldrh	r3, [r7, #14]
 80007a6:	6593      	str	r3, [r2, #88]	; 0x58
}
 80007a8:	e003      	b.n	80007b2 <user_pwm_setvalue+0x8a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	89fb      	ldrh	r3, [r7, #14]
 80007b0:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 ff14 	bl	80015f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f90d 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f000 faff 	bl	8000dd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d2:	f000 fad7 	bl	8000d84 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007d6:	f000 faa7 	bl	8000d28 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 80007da:	f000 fa75 	bl	8000cc8 <MX_USART3_UART_Init>
  MX_UART5_Init();
 80007de:	f000 fa43 	bl	8000c68 <MX_UART5_Init>
  MX_TIM1_Init();
 80007e2:	f000 f96f 	bl	8000ac4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007e6:	2100      	movs	r1, #0
 80007e8:	4870      	ldr	r0, [pc, #448]	; (80009ac <main+0x1ec>)
 80007ea:	f003 f8e3 	bl	80039b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007ee:	2104      	movs	r1, #4
 80007f0:	486e      	ldr	r0, [pc, #440]	; (80009ac <main+0x1ec>)
 80007f2:	f003 f8df 	bl	80039b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80007f6:	2108      	movs	r1, #8
 80007f8:	486c      	ldr	r0, [pc, #432]	; (80009ac <main+0x1ec>)
 80007fa:	f003 f8db 	bl	80039b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80007fe:	210c      	movs	r1, #12
 8000800:	486a      	ldr	r0, [pc, #424]	; (80009ac <main+0x1ec>)
 8000802:	f003 f8d7 	bl	80039b4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  usTicks = cpuClockFrequency / 1000000;
 8000806:	4b6a      	ldr	r3, [pc, #424]	; (80009b0 <main+0x1f0>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a6a      	ldr	r2, [pc, #424]	; (80009b4 <main+0x1f4>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	0c9b      	lsrs	r3, r3, #18
 8000812:	4a69      	ldr	r2, [pc, #420]	; (80009b8 <main+0x1f8>)
 8000814:	6013      	str	r3, [r2, #0]
  usTicksInv = 1e6f / cpuClockFrequency;
 8000816:	4b66      	ldr	r3, [pc, #408]	; (80009b0 <main+0x1f0>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	ee07 3a90 	vmov	s15, r3
 800081e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000822:	eddf 6a66 	vldr	s13, [pc, #408]	; 80009bc <main+0x1fc>
 8000826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800082a:	4b65      	ldr	r3, [pc, #404]	; (80009c0 <main+0x200>)
 800082c:	edc3 7a00 	vstr	s15, [r3]

  HAL_UART_Receive_DMA (&huart5, Rx_data, RX_UART_BUFFER_SIZE);  // Receive 4*2 characters of data
 8000830:	2240      	movs	r2, #64	; 0x40
 8000832:	4964      	ldr	r1, [pc, #400]	; (80009c4 <main+0x204>)
 8000834:	4864      	ldr	r0, [pc, #400]	; (80009c8 <main+0x208>)
 8000836:	f004 f929 	bl	8004a8c <HAL_UART_Receive_DMA>

  crsfRxInit(&huart5);
 800083a:	4863      	ldr	r0, [pc, #396]	; (80009c8 <main+0x208>)
 800083c:	f006 fb58 	bl	8006ef0 <crsfRxInit>
  initCrsfTelemetry();
 8000840:	f006 fe10 	bl	8007464 <initCrsfTelemetry>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_Delay (1);

	  if (bRx_buffer_full)
 8000844:	4b61      	ldr	r3, [pc, #388]	; (80009cc <main+0x20c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	f000 8095 	beq.w	8000978 <main+0x1b8>
	  {
		  HAL_GPIO_TogglePin (GPIOB, LD1_Pin);
 800084e:	2101      	movs	r1, #1
 8000850:	485f      	ldr	r0, [pc, #380]	; (80009d0 <main+0x210>)
 8000852:	f001 fe20 	bl	8002496 <HAL_GPIO_TogglePin>
		  size_t n = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
		  for (n=0; n<RX_UART_BUFFER_SIZE; n++)
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	e009      	b.n	8000874 <main+0xb4>
		  {
			  crsfDataReceive(Rx_process_buff[n]);
 8000860:	4a5c      	ldr	r2, [pc, #368]	; (80009d4 <main+0x214>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f005 fff3 	bl	8006854 <crsfDataReceive>
		  for (n=0; n<RX_UART_BUFFER_SIZE; n++)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3301      	adds	r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b3f      	cmp	r3, #63	; 0x3f
 8000878:	d9f2      	bls.n	8000860 <main+0xa0>
		  }

		  bRx_buffer_full = 0;
 800087a:	4b54      	ldr	r3, [pc, #336]	; (80009cc <main+0x20c>)
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]

		  rxFrameState_e frameState = crsfFrameStatus();
 8000880:	f006 f910 	bl	8006aa4 <crsfFrameStatus>
 8000884:	4603      	mov	r3, r0
 8000886:	70fb      	strb	r3, [r7, #3]
		  if (frameState == RX_FRAME_COMPLETE)
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d153      	bne.n	8000936 <main+0x176>
		  {
			  HAL_GPIO_TogglePin (GPIOB, LD2_Pin);  // toggle
 800088e:	2180      	movs	r1, #128	; 0x80
 8000890:	484f      	ldr	r0, [pc, #316]	; (80009d0 <main+0x210>)
 8000892:	f001 fe00 	bl	8002496 <HAL_GPIO_TogglePin>
			  for (n=0; n<16; n++)
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	e00f      	b.n	80008bc <main+0xfc>
			  {
				  channelData[n] = crsfReadRawRC(n);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f006 fa91 	bl	8006dc8 <crsfReadRawRC>
 80008a6:	eef0 7a40 	vmov.f32	s15, s0
 80008aa:	4a4b      	ldr	r2, [pc, #300]	; (80009d8 <main+0x218>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4413      	add	r3, r2
 80008b2:	edc3 7a00 	vstr	s15, [r3]
			  for (n=0; n<16; n++)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3301      	adds	r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b0f      	cmp	r3, #15
 80008c0:	d9ec      	bls.n	800089c <main+0xdc>
			  }
			  user_pwm_setvalue(&htim1, TIM_CHANNEL_1, channelData[0]);
 80008c2:	4b45      	ldr	r3, [pc, #276]	; (80009d8 <main+0x218>)
 80008c4:	edd3 7a00 	vldr	s15, [r3]
 80008c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008cc:	ee17 3a90 	vmov	r3, s15
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	461a      	mov	r2, r3
 80008d4:	2100      	movs	r1, #0
 80008d6:	4835      	ldr	r0, [pc, #212]	; (80009ac <main+0x1ec>)
 80008d8:	f7ff ff26 	bl	8000728 <user_pwm_setvalue>
			  user_pwm_setvalue(&htim1, TIM_CHANNEL_2, channelData[1]);
 80008dc:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <main+0x218>)
 80008de:	edd3 7a01 	vldr	s15, [r3, #4]
 80008e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008e6:	ee17 3a90 	vmov	r3, s15
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	461a      	mov	r2, r3
 80008ee:	2104      	movs	r1, #4
 80008f0:	482e      	ldr	r0, [pc, #184]	; (80009ac <main+0x1ec>)
 80008f2:	f7ff ff19 	bl	8000728 <user_pwm_setvalue>
			  user_pwm_setvalue(&htim1, TIM_CHANNEL_3, channelData[2]);
 80008f6:	4b38      	ldr	r3, [pc, #224]	; (80009d8 <main+0x218>)
 80008f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80008fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000900:	ee17 3a90 	vmov	r3, s15
 8000904:	b29b      	uxth	r3, r3
 8000906:	461a      	mov	r2, r3
 8000908:	2108      	movs	r1, #8
 800090a:	4828      	ldr	r0, [pc, #160]	; (80009ac <main+0x1ec>)
 800090c:	f7ff ff0c 	bl	8000728 <user_pwm_setvalue>
			  user_pwm_setvalue(&htim1, TIM_CHANNEL_4, channelData[3]);
 8000910:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <main+0x218>)
 8000912:	edd3 7a03 	vldr	s15, [r3, #12]
 8000916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800091a:	ee17 3a90 	vmov	r3, s15
 800091e:	b29b      	uxth	r3, r3
 8000920:	461a      	mov	r2, r3
 8000922:	210c      	movs	r1, #12
 8000924:	4821      	ldr	r0, [pc, #132]	; (80009ac <main+0x1ec>)
 8000926:	f7ff feff 	bl	8000728 <user_pwm_setvalue>

			  lastRxTime = millis();
 800092a:	f7ff fea9 	bl	8000680 <millis>
 800092e:	4603      	mov	r3, r0
 8000930:	4a2a      	ldr	r2, [pc, #168]	; (80009dc <main+0x21c>)
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	e020      	b.n	8000978 <main+0x1b8>
		  }
		  else
		  {
			  if (millis() - lastRxTime > 250)
 8000936:	f7ff fea3 	bl	8000680 <millis>
 800093a:	4602      	mov	r2, r0
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <main+0x21c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	2bfa      	cmp	r3, #250	; 0xfa
 8000944:	d917      	bls.n	8000976 <main+0x1b6>
			  {
				  user_pwm_setvalue(&htim1, TIM_CHANNEL_1, PWM_RANGE_MIDDLE);
 8000946:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800094a:	2100      	movs	r1, #0
 800094c:	4817      	ldr	r0, [pc, #92]	; (80009ac <main+0x1ec>)
 800094e:	f7ff feeb 	bl	8000728 <user_pwm_setvalue>
				  user_pwm_setvalue(&htim1, TIM_CHANNEL_2, PWM_RANGE_MIDDLE);
 8000952:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000956:	2104      	movs	r1, #4
 8000958:	4814      	ldr	r0, [pc, #80]	; (80009ac <main+0x1ec>)
 800095a:	f7ff fee5 	bl	8000728 <user_pwm_setvalue>
				  user_pwm_setvalue(&htim1, TIM_CHANNEL_3, PWM_RANGE_MIDDLE);
 800095e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000962:	2108      	movs	r1, #8
 8000964:	4811      	ldr	r0, [pc, #68]	; (80009ac <main+0x1ec>)
 8000966:	f7ff fedf 	bl	8000728 <user_pwm_setvalue>
				  user_pwm_setvalue(&htim1, TIM_CHANNEL_4, PWM_RANGE_MIDDLE);
 800096a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800096e:	210c      	movs	r1, #12
 8000970:	480e      	ldr	r0, [pc, #56]	; (80009ac <main+0x1ec>)
 8000972:	f7ff fed9 	bl	8000728 <user_pwm_setvalue>
			  }
			  asm("NOP");
 8000976:	bf00      	nop
		  }
	  }

	  static uint32_t now = 0;
	  now = micros();
 8000978:	f7ff fe44 	bl	8000604 <micros>
 800097c:	4603      	mov	r3, r0
 800097e:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <main+0x220>)
 8000980:	6013      	str	r3, [r2, #0]
	  if (now - lastTxTime > CRSF_TELEMETRY_FRAME_INTERVAL_MAX_US)
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <main+0x220>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <main+0x224>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000990:	4293      	cmp	r3, r2
 8000992:	f67f af57 	bls.w	8000844 <main+0x84>
	  {
		  lastTxTime = now;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <main+0x220>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <main+0x224>)
 800099c:	6013      	str	r3, [r2, #0]
		  handleCrsfTelemetry(micros());
 800099e:	f7ff fe31 	bl	8000604 <micros>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f006 fdc9 	bl	800753c <handleCrsfTelemetry>
  {
 80009aa:	e74b      	b.n	8000844 <main+0x84>
 80009ac:	20000038 	.word	0x20000038
 80009b0:	20000000 	.word	0x20000000
 80009b4:	431bde83 	.word	0x431bde83
 80009b8:	20000824 	.word	0x20000824
 80009bc:	49742400 	.word	0x49742400
 80009c0:	20000828 	.word	0x20000828
 80009c4:	2000075c 	.word	0x2000075c
 80009c8:	20000084 	.word	0x20000084
 80009cc:	2000083c 	.word	0x2000083c
 80009d0:	40020400 	.word	0x40020400
 80009d4:	2000079c 	.word	0x2000079c
 80009d8:	200007e4 	.word	0x200007e4
 80009dc:	20000840 	.word	0x20000840
 80009e0:	20000844 	.word	0x20000844
 80009e4:	20000838 	.word	0x20000838

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b094      	sub	sp, #80	; 0x50
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0320 	add.w	r3, r7, #32
 80009f2:	2230      	movs	r2, #48	; 0x30
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f006 fde6 	bl	80075c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a0c:	f001 fea6 	bl	800275c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a10:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <SystemClock_Config+0xd4>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	4a29      	ldr	r2, [pc, #164]	; (8000abc <SystemClock_Config+0xd4>)
 8000a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1c:	4b27      	ldr	r3, [pc, #156]	; (8000abc <SystemClock_Config+0xd4>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <SystemClock_Config+0xd8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a24      	ldr	r2, [pc, #144]	; (8000ac0 <SystemClock_Config+0xd8>)
 8000a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <SystemClock_Config+0xd8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a58:	23d8      	movs	r3, #216	; 0xd8
 8000a5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a60:	2309      	movs	r3, #9
 8000a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 fed7 	bl	800281c <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a74:	f000 fa5a 	bl	8000f2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a78:	f001 fe80 	bl	800277c <HAL_PWREx_EnableOverDrive>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a82:	f000 fa53 	bl	8000f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	230f      	movs	r3, #15
 8000a88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2107      	movs	r1, #7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 f95d 	bl	8002d64 <HAL_RCC_ClockConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000ab0:	f000 fa3c 	bl	8000f2c <Error_Handler>
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3750      	adds	r7, #80	; 0x50
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b09a      	sub	sp, #104	; 0x68
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
 8000af4:	615a      	str	r2, [r3, #20]
 8000af6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	222c      	movs	r2, #44	; 0x2c
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f006 fd62 	bl	80075c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b04:	4b56      	ldr	r3, [pc, #344]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000b06:	4a57      	ldr	r2, [pc, #348]	; (8000c64 <MX_TIM1_Init+0x1a0>)
 8000b08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8000b0a:	4b55      	ldr	r3, [pc, #340]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000b0c:	22d7      	movs	r2, #215	; 0xd7
 8000b0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b10:	4b53      	ldr	r3, [pc, #332]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000b16:	4b52      	ldr	r3, [pc, #328]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000b18:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1e:	4b50      	ldr	r3, [pc, #320]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b24:	4b4e      	ldr	r3, [pc, #312]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b2a:	4b4d      	ldr	r3, [pc, #308]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b30:	484b      	ldr	r0, [pc, #300]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000b32:	f002 fe87 	bl	8003844 <HAL_TIM_Base_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b3c:	f000 f9f6 	bl	8000f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b44:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4844      	ldr	r0, [pc, #272]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000b4e:	f003 f93f 	bl	8003dd0 <HAL_TIM_ConfigClockSource>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b58:	f000 f9e8 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b5c:	4840      	ldr	r0, [pc, #256]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000b5e:	f002 fec8 	bl	80038f2 <HAL_TIM_PWM_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b68:	f000 f9e0 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4838      	ldr	r0, [pc, #224]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000b80:	f003 fdae 	bl	80046e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b8a:	f000 f9cf 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b8e:	2360      	movs	r3, #96	; 0x60
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 8000b92:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	482a      	ldr	r0, [pc, #168]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000bb6:	f002 fff7 	bl	8003ba8 <HAL_TIM_PWM_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000bc0:	f000 f9b4 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bc8:	2204      	movs	r2, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4824      	ldr	r0, [pc, #144]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000bce:	f002 ffeb 	bl	8003ba8 <HAL_TIM_PWM_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000bd8:	f000 f9a8 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000be0:	2208      	movs	r2, #8
 8000be2:	4619      	mov	r1, r3
 8000be4:	481e      	ldr	r0, [pc, #120]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000be6:	f002 ffdf 	bl	8003ba8 <HAL_TIM_PWM_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000bf0:	f000 f99c 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bf8:	220c      	movs	r2, #12
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4818      	ldr	r0, [pc, #96]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000bfe:	f002 ffd3 	bl	8003ba8 <HAL_TIM_PWM_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000c08:	f000 f990 	bl	8000f2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4807      	ldr	r0, [pc, #28]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000c42:	f003 fddb 	bl	80047fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8000c4c:	f000 f96e 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <MX_TIM1_Init+0x19c>)
 8000c52:	f000 f9ff 	bl	8001054 <HAL_TIM_MspPostInit>

}
 8000c56:	bf00      	nop
 8000c58:	3768      	adds	r7, #104	; 0x68
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000038 	.word	0x20000038
 8000c64:	40010000 	.word	0x40010000

08000c68 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_UART5_Init+0x54>)
 8000c6e:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <MX_UART5_Init+0x58>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 420000;
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <MX_UART5_Init+0x54>)
 8000c74:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <MX_UART5_Init+0x5c>)
 8000c76:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <MX_UART5_Init+0x54>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_UART5_Init+0x54>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <MX_UART5_Init+0x54>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_UART5_Init+0x54>)
 8000c8c:	220c      	movs	r2, #12
 8000c8e:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <MX_UART5_Init+0x54>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_UART5_Init+0x54>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <MX_UART5_Init+0x54>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_UART5_Init+0x54>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_UART5_Init+0x54>)
 8000caa:	f003 fe25 	bl	80048f8 <HAL_UART_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_UART5_Init+0x50>
  {
    Error_Handler();
 8000cb4:	f000 f93a 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000084 	.word	0x20000084
 8000cc0:	40005000 	.word	0x40005000
 8000cc4:	000668a0 	.word	0x000668a0

08000cc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_USART3_UART_Init+0x58>)
 8000cce:	4a15      	ldr	r2, [pc, #84]	; (8000d24 <MX_USART3_UART_Init+0x5c>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <MX_USART3_UART_Init+0x58>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_USART3_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <MX_USART3_UART_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_USART3_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_USART3_UART_Init+0x58>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <MX_USART3_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_USART3_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <MX_USART3_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_USART3_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_USART3_UART_Init+0x58>)
 8000d0c:	f003 fdf4 	bl	80048f8 <HAL_UART_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d16:	f000 f909 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000010c 	.word	0x2000010c
 8000d24:	40004800 	.word	0x40004800

08000d28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d36:	2206      	movs	r2, #6
 8000d38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d42:	2202      	movs	r2, #2
 8000d44:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6c:	f001 fbad 	bl	80024ca <HAL_PCD_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d76:	f000 f8d9 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000254 	.word	0x20000254

08000d84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_DMA_Init+0x48>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	; (8000dcc <MX_DMA_Init+0x48>)
 8000d90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <MX_DMA_Init+0x48>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	200b      	movs	r0, #11
 8000da8:	f000 fd7f 	bl	80018aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000dac:	200b      	movs	r0, #11
 8000dae:	f000 fd98 	bl	80018e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	202f      	movs	r0, #47	; 0x2f
 8000db8:	f000 fd77 	bl	80018aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000dbc:	202f      	movs	r0, #47	; 0x2f
 8000dbe:	f000 fd90 	bl	80018e2 <HAL_NVIC_EnableIRQ>

}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800

08000dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	4b4d      	ldr	r3, [pc, #308]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a4c      	ldr	r2, [pc, #304]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b4a      	ldr	r3, [pc, #296]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfe:	4b47      	ldr	r3, [pc, #284]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a46      	ldr	r2, [pc, #280]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b44      	ldr	r3, [pc, #272]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b41      	ldr	r3, [pc, #260]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a40      	ldr	r2, [pc, #256]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2e:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a3a      	ldr	r2, [pc, #232]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e34:	f043 0310 	orr.w	r3, r3, #16
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e46:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a34      	ldr	r2, [pc, #208]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e4c:	f043 0308 	orr.w	r3, r3, #8
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0308 	and.w	r3, r3, #8
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a2e      	ldr	r2, [pc, #184]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a28      	ldr	r2, [pc, #160]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <MX_GPIO_Init+0x14c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e94:	4822      	ldr	r0, [pc, #136]	; (8000f20 <MX_GPIO_Init+0x150>)
 8000e96:	f001 fae5 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2140      	movs	r1, #64	; 0x40
 8000e9e:	4821      	ldr	r0, [pc, #132]	; (8000f24 <MX_GPIO_Init+0x154>)
 8000ea0:	f001 fae0 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eaa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	481b      	ldr	r0, [pc, #108]	; (8000f28 <MX_GPIO_Init+0x158>)
 8000ebc:	f001 f936 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ec0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4811      	ldr	r0, [pc, #68]	; (8000f20 <MX_GPIO_Init+0x150>)
 8000eda:	f001 f927 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ede:	2340      	movs	r3, #64	; 0x40
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480b      	ldr	r0, [pc, #44]	; (8000f24 <MX_GPIO_Init+0x154>)
 8000ef6:	f001 f919 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_GPIO_Init+0x154>)
 8000f0e:	f001 f90d 	bl	800212c <HAL_GPIO_Init>

}
 8000f12:	bf00      	nop
 8000f14:	3730      	adds	r7, #48	; 0x30
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020400 	.word	0x40020400
 8000f24:	40021800 	.word	0x40021800
 8000f28:	40020800 	.word	0x40020800

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <Error_Handler+0x8>
	...

08000f38 <getEstimatedAltitudeCm>:
static int32_t Amperage = 0;
static int32_t MAhDrawn = 0;
static uint8_t BatteryPercentageRemaining = 0;

// Stub out unneeded functions
int32_t getEstimatedAltitudeCm(void) { return AltitudeCm++; }
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <getEstimatedAltitudeCm+0x18>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	4903      	ldr	r1, [pc, #12]	; (8000f50 <getEstimatedAltitudeCm+0x18>)
 8000f44:	600a      	str	r2, [r1, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	20000848 	.word	0x20000848

08000f54 <getLegacyBatteryVoltage>:
uint16_t getBatteryAverageCellVoltage(void) { return BatteryAverageCellVoltage++; }
uint16_t getLegacyBatteryVoltage(void) { return LegacyBatteryVoltage++; }
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <getLegacyBatteryVoltage+0x1c>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	b291      	uxth	r1, r2
 8000f60:	4a03      	ldr	r2, [pc, #12]	; (8000f70 <getLegacyBatteryVoltage+0x1c>)
 8000f62:	8011      	strh	r1, [r2, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	2000084c 	.word	0x2000084c

08000f74 <getAmperage>:
int32_t getAmperage(void) { return Amperage++; } // hhf
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <getAmperage+0x18>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	4903      	ldr	r1, [pc, #12]	; (8000f8c <getAmperage+0x18>)
 8000f80:	600a      	str	r2, [r1, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	20000850 	.word	0x20000850

08000f90 <getMAhDrawn>:
int32_t getMAhDrawn(void) { return MAhDrawn++; }
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <getMAhDrawn+0x18>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	4903      	ldr	r1, [pc, #12]	; (8000fa8 <getMAhDrawn+0x18>)
 8000f9c:	600a      	str	r2, [r1, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	20000854 	.word	0x20000854

08000fac <calculateBatteryPercentageRemaining>:
uint8_t calculateBatteryPercentageRemaining(void) { return BatteryPercentageRemaining++; }
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <calculateBatteryPercentageRemaining+0x1c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	b2d1      	uxtb	r1, r2
 8000fb8:	4a03      	ldr	r2, [pc, #12]	; (8000fc8 <calculateBatteryPercentageRemaining+0x1c>)
 8000fba:	7011      	strb	r1, [r2, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000858 	.word	0x20000858

08000fcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_MspInit+0x44>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_MspInit+0x44>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_MspInit+0x44>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_MspInit+0x44>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_MspInit+0x44>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_MspInit+0x44>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800

08001014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_TIM_Base_MspInit+0x38>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d10b      	bne.n	800103e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_TIM_Base_MspInit+0x3c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a09      	ldr	r2, [pc, #36]	; (8001050 <HAL_TIM_Base_MspInit+0x3c>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <HAL_TIM_Base_MspInit+0x3c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40010000 	.word	0x40010000
 8001050:	40023800 	.word	0x40023800

08001054 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <HAL_TIM_MspPostInit+0x64>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d11c      	bne.n	80010b0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_TIM_MspPostInit+0x68>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <HAL_TIM_MspPostInit+0x68>)
 800107c:	f043 0310 	orr.w	r3, r3, #16
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_TIM_MspPostInit+0x68>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800108e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001092:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <HAL_TIM_MspPostInit+0x6c>)
 80010ac:	f001 f83e 	bl	800212c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40010000 	.word	0x40010000
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40021000 	.word	0x40021000

080010c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0ac      	sub	sp, #176	; 0xb0
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f006 fa6f 	bl	80075c8 <memset>
  if(huart->Instance==UART5)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a90      	ldr	r2, [pc, #576]	; (8001330 <HAL_UART_MspInit+0x26c>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	f040 80d6 	bne.w	80012a2 <HAL_UART_MspInit+0x1de>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80010f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010fa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4618      	mov	r0, r3
 8001106:	f002 f853 	bl	80031b0 <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001110:	f7ff ff0c 	bl	8000f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001114:	4b87      	ldr	r3, [pc, #540]	; (8001334 <HAL_UART_MspInit+0x270>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a86      	ldr	r2, [pc, #536]	; (8001334 <HAL_UART_MspInit+0x270>)
 800111a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b84      	ldr	r3, [pc, #528]	; (8001334 <HAL_UART_MspInit+0x270>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001128:	61bb      	str	r3, [r7, #24]
 800112a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112c:	4b81      	ldr	r3, [pc, #516]	; (8001334 <HAL_UART_MspInit+0x270>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4a80      	ldr	r2, [pc, #512]	; (8001334 <HAL_UART_MspInit+0x270>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	6313      	str	r3, [r2, #48]	; 0x30
 8001138:	4b7e      	ldr	r3, [pc, #504]	; (8001334 <HAL_UART_MspInit+0x270>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001144:	4b7b      	ldr	r3, [pc, #492]	; (8001334 <HAL_UART_MspInit+0x270>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	4a7a      	ldr	r2, [pc, #488]	; (8001334 <HAL_UART_MspInit+0x270>)
 800114a:	f043 0308 	orr.w	r3, r3, #8
 800114e:	6313      	str	r3, [r2, #48]	; 0x30
 8001150:	4b78      	ldr	r3, [pc, #480]	; (8001334 <HAL_UART_MspInit+0x270>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	f003 0308 	and.w	r3, r3, #8
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800115c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001160:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001176:	2308      	movs	r3, #8
 8001178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001180:	4619      	mov	r1, r3
 8001182:	486d      	ldr	r0, [pc, #436]	; (8001338 <HAL_UART_MspInit+0x274>)
 8001184:	f000 ffd2 	bl	800212c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001188:	2304      	movs	r3, #4
 800118a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011a0:	2308      	movs	r3, #8
 80011a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011aa:	4619      	mov	r1, r3
 80011ac:	4863      	ldr	r0, [pc, #396]	; (800133c <HAL_UART_MspInit+0x278>)
 80011ae:	f000 ffbd 	bl	800212c <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <HAL_UART_MspInit+0x27c>)
 80011b4:	4a63      	ldr	r2, [pc, #396]	; (8001344 <HAL_UART_MspInit+0x280>)
 80011b6:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80011b8:	4b61      	ldr	r3, [pc, #388]	; (8001340 <HAL_UART_MspInit+0x27c>)
 80011ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011be:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c0:	4b5f      	ldr	r3, [pc, #380]	; (8001340 <HAL_UART_MspInit+0x27c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c6:	4b5e      	ldr	r3, [pc, #376]	; (8001340 <HAL_UART_MspInit+0x27c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011cc:	4b5c      	ldr	r3, [pc, #368]	; (8001340 <HAL_UART_MspInit+0x27c>)
 80011ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d4:	4b5a      	ldr	r3, [pc, #360]	; (8001340 <HAL_UART_MspInit+0x27c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011da:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_UART_MspInit+0x27c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80011e0:	4b57      	ldr	r3, [pc, #348]	; (8001340 <HAL_UART_MspInit+0x27c>)
 80011e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011e8:	4b55      	ldr	r3, [pc, #340]	; (8001340 <HAL_UART_MspInit+0x27c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011ee:	4b54      	ldr	r3, [pc, #336]	; (8001340 <HAL_UART_MspInit+0x27c>)
 80011f0:	2204      	movs	r2, #4
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80011f4:	4b52      	ldr	r3, [pc, #328]	; (8001340 <HAL_UART_MspInit+0x27c>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80011fa:	4b51      	ldr	r3, [pc, #324]	; (8001340 <HAL_UART_MspInit+0x27c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001200:	4b4f      	ldr	r3, [pc, #316]	; (8001340 <HAL_UART_MspInit+0x27c>)
 8001202:	2200      	movs	r2, #0
 8001204:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001206:	484e      	ldr	r0, [pc, #312]	; (8001340 <HAL_UART_MspInit+0x27c>)
 8001208:	f000 fb86 	bl	8001918 <HAL_DMA_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_UART_MspInit+0x152>
    {
      Error_Handler();
 8001212:	f7ff fe8b 	bl	8000f2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a49      	ldr	r2, [pc, #292]	; (8001340 <HAL_UART_MspInit+0x27c>)
 800121a:	675a      	str	r2, [r3, #116]	; 0x74
 800121c:	4a48      	ldr	r2, [pc, #288]	; (8001340 <HAL_UART_MspInit+0x27c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8001222:	4b49      	ldr	r3, [pc, #292]	; (8001348 <HAL_UART_MspInit+0x284>)
 8001224:	4a49      	ldr	r2, [pc, #292]	; (800134c <HAL_UART_MspInit+0x288>)
 8001226:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8001228:	4b47      	ldr	r3, [pc, #284]	; (8001348 <HAL_UART_MspInit+0x284>)
 800122a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800122e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001230:	4b45      	ldr	r3, [pc, #276]	; (8001348 <HAL_UART_MspInit+0x284>)
 8001232:	2240      	movs	r2, #64	; 0x40
 8001234:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001236:	4b44      	ldr	r3, [pc, #272]	; (8001348 <HAL_UART_MspInit+0x284>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800123c:	4b42      	ldr	r3, [pc, #264]	; (8001348 <HAL_UART_MspInit+0x284>)
 800123e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001242:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001244:	4b40      	ldr	r3, [pc, #256]	; (8001348 <HAL_UART_MspInit+0x284>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800124a:	4b3f      	ldr	r3, [pc, #252]	; (8001348 <HAL_UART_MspInit+0x284>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001250:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <HAL_UART_MspInit+0x284>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001256:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <HAL_UART_MspInit+0x284>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800125c:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <HAL_UART_MspInit+0x284>)
 800125e:	2204      	movs	r2, #4
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart5_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001262:	4b39      	ldr	r3, [pc, #228]	; (8001348 <HAL_UART_MspInit+0x284>)
 8001264:	2201      	movs	r2, #1
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart5_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001268:	4b37      	ldr	r3, [pc, #220]	; (8001348 <HAL_UART_MspInit+0x284>)
 800126a:	2200      	movs	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart5_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800126e:	4b36      	ldr	r3, [pc, #216]	; (8001348 <HAL_UART_MspInit+0x284>)
 8001270:	2200      	movs	r2, #0
 8001272:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001274:	4834      	ldr	r0, [pc, #208]	; (8001348 <HAL_UART_MspInit+0x284>)
 8001276:	f000 fb4f 	bl	8001918 <HAL_DMA_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_UART_MspInit+0x1c0>
    {
      Error_Handler();
 8001280:	f7ff fe54 	bl	8000f2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a30      	ldr	r2, [pc, #192]	; (8001348 <HAL_UART_MspInit+0x284>)
 8001288:	671a      	str	r2, [r3, #112]	; 0x70
 800128a:	4a2f      	ldr	r2, [pc, #188]	; (8001348 <HAL_UART_MspInit+0x284>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2035      	movs	r0, #53	; 0x35
 8001296:	f000 fb08 	bl	80018aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800129a:	2035      	movs	r0, #53	; 0x35
 800129c:	f000 fb21 	bl	80018e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012a0:	e041      	b.n	8001326 <HAL_UART_MspInit+0x262>
  else if(huart->Instance==USART3)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a2a      	ldr	r2, [pc, #168]	; (8001350 <HAL_UART_MspInit+0x28c>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d13c      	bne.n	8001326 <HAL_UART_MspInit+0x262>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 ff78 	bl	80031b0 <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_UART_MspInit+0x206>
      Error_Handler();
 80012c6:	f7ff fe31 	bl	8000f2c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <HAL_UART_MspInit+0x270>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a19      	ldr	r2, [pc, #100]	; (8001334 <HAL_UART_MspInit+0x270>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <HAL_UART_MspInit+0x270>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_UART_MspInit+0x270>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <HAL_UART_MspInit+0x270>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_UART_MspInit+0x270>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001314:	2307      	movs	r3, #7
 8001316:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800131e:	4619      	mov	r1, r3
 8001320:	4806      	ldr	r0, [pc, #24]	; (800133c <HAL_UART_MspInit+0x278>)
 8001322:	f000 ff03 	bl	800212c <HAL_GPIO_Init>
}
 8001326:	bf00      	nop
 8001328:	37b0      	adds	r7, #176	; 0xb0
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40005000 	.word	0x40005000
 8001334:	40023800 	.word	0x40023800
 8001338:	40020800 	.word	0x40020800
 800133c:	40020c00 	.word	0x40020c00
 8001340:	20000194 	.word	0x20000194
 8001344:	40026010 	.word	0x40026010
 8001348:	200001f4 	.word	0x200001f4
 800134c:	400260b8 	.word	0x400260b8
 8001350:	40004800 	.word	0x40004800

08001354 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0aa      	sub	sp, #168	; 0xa8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2280      	movs	r2, #128	; 0x80
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f006 f927 	bl	80075c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001382:	d159      	bne.n	8001438 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001384:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001388:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4618      	mov	r0, r3
 8001396:	f001 ff0b 	bl	80031b0 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80013a0:	f7ff fdc4 	bl	8000f2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b26      	ldr	r3, [pc, #152]	; (8001440 <HAL_PCD_MspInit+0xec>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	4a25      	ldr	r2, [pc, #148]	; (8001440 <HAL_PCD_MspInit+0xec>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <HAL_PCD_MspInit+0xec>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013bc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013d6:	230a      	movs	r3, #10
 80013d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013e0:	4619      	mov	r1, r3
 80013e2:	4818      	ldr	r0, [pc, #96]	; (8001444 <HAL_PCD_MspInit+0xf0>)
 80013e4:	f000 fea2 	bl	800212c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001400:	4619      	mov	r1, r3
 8001402:	4810      	ldr	r0, [pc, #64]	; (8001444 <HAL_PCD_MspInit+0xf0>)
 8001404:	f000 fe92 	bl	800212c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_PCD_MspInit+0xec>)
 800140a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140c:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <HAL_PCD_MspInit+0xec>)
 800140e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001412:	6353      	str	r3, [r2, #52]	; 0x34
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_PCD_MspInit+0xec>)
 8001416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <HAL_PCD_MspInit+0xec>)
 8001422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <HAL_PCD_MspInit+0xec>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142a:	6453      	str	r3, [r2, #68]	; 0x44
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_PCD_MspInit+0xec>)
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	37a8      	adds	r7, #168	; 0xa8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000

08001448 <__basepriRestoreMem>:
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    __set_BASEPRI(*val);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f383 8811 	msr	BASEPRI, r3
}
 800145c:	bf00      	nop
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <__basepriSetMemRetVal>:
{
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
    __set_BASEPRI_MAX(prio);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f383 8812 	msr	BASEPRI_MAX, r3
}
 800147e:	bf00      	nop
    return 1;
 8001480:	2301      	movs	r3, #1
}
 8001482:	4618      	mov	r0, r3
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <NMI_Handler+0x4>

08001494 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <HardFault_Handler+0x4>

0800149a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <MemManage_Handler+0x4>

080014a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <BusFault_Handler+0x4>

080014a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <UsageFault_Handler+0x4>

080014ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80014de:	f3ef 8311 	mrs	r3, BASEPRI
 80014e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80014e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN SysTick_IRQn 0 */
//	BF_SysTick_Handler();
	ATOMIC_BLOCK(NVIC_PRIO_MAX) {
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	2010      	movs	r0, #16
 80014ec:	f7ff ffbd 	bl	800146a <__basepriSetMemRetVal>
 80014f0:	4603      	mov	r3, r0
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e00f      	b.n	8001516 <SysTick_Handler+0x3e>
	        sysTickUptime++;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <SysTick_Handler+0x58>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <SysTick_Handler+0x58>)
 80014fe:	6013      	str	r3, [r2, #0]
	        sysTickValStamp = SysTick->VAL;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <SysTick_Handler+0x5c>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <SysTick_Handler+0x60>)
 8001506:	6013      	str	r3, [r2, #0]
	        sysTickPending = 0;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <SysTick_Handler+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
	        (void)(SysTick->CTRL);
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <SysTick_Handler+0x5c>)
 8001510:	681b      	ldr	r3, [r3, #0]
	ATOMIC_BLOCK(NVIC_PRIO_MAX) {
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1ec      	bne.n	80014f6 <SysTick_Handler+0x1e>
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ff92 	bl	8001448 <__basepriRestoreMem>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001524:	f000 f8a2 	bl	800166c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000082c 	.word	0x2000082c
 8001534:	e000e010 	.word	0xe000e010
 8001538:	20000830 	.word	0x20000830
 800153c:	20000834 	.word	0x20000834

08001540 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <DMA1_Stream0_IRQHandler+0x10>)
 8001546:	f000 fb87 	bl	8001c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000194 	.word	0x20000194

08001554 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <DMA1_Stream7_IRQHandler+0x10>)
 800155a:	f000 fb7d 	bl	8001c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200001f4 	.word	0x200001f4

08001568 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <UART5_IRQHandler+0x10>)
 800156e:	f003 fad1 	bl	8004b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000084 	.word	0x20000084

0800157c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <SystemInit+0x20>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <SystemInit+0x20>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015a6:	490e      	ldr	r1, [pc, #56]	; (80015e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015a8:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015bc:	4c0b      	ldr	r4, [pc, #44]	; (80015ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ca:	f7ff ffd7 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ce:	f006 f803 	bl	80075d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d2:	f7ff f8f5 	bl	80007c0 <main>
  bx  lr    
 80015d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015d8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80015e4:	0800768c 	.word	0x0800768c
  ldr r2, =_sbss
 80015e8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80015ec:	20000a14 	.word	0x20000a14

080015f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC_IRQHandler>

080015f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f6:	2003      	movs	r0, #3
 80015f8:	f000 f94c 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f000 f805 	bl	800160c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001602:	f7ff fce3 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x54>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x58>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001622:	fbb3 f3f1 	udiv	r3, r3, r1
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f967 	bl	80018fe <HAL_SYSTICK_Config>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e00e      	b.n	8001658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d80a      	bhi.n	8001656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f000 f92f 	bl	80018aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800164c:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_InitTick+0x5c>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000004 	.word	0x20000004
 8001664:	2000000c 	.word	0x2000000c
 8001668:	20000008 	.word	0x20000008

0800166c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x20>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_IncTick+0x24>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4413      	add	r3, r2
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <HAL_IncTick+0x24>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	2000000c 	.word	0x2000000c
 8001690:	2000085c 	.word	0x2000085c

08001694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_GetTick+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	2000085c 	.word	0x2000085c

080016ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b4:	f7ff ffee 	bl	8001694 <HAL_GetTick>
 80016b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c4:	d005      	beq.n	80016d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_Delay+0x44>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4413      	add	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016d2:	bf00      	nop
 80016d4:	f7ff ffde 	bl	8001694 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d8f7      	bhi.n	80016d4 <HAL_Delay+0x28>
  {
  }
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000000c 	.word	0x2000000c

080016f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <__NVIC_SetPriorityGrouping+0x40>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 800171e:	4313      	orrs	r3, r2
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x40>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00
 8001738:	05fa0000 	.word	0x05fa0000

0800173c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <__NVIC_GetPriorityGrouping+0x18>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	f003 0307 	and.w	r3, r3, #7
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	db0b      	blt.n	8001782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	f003 021f 	and.w	r2, r3, #31
 8001770:	4907      	ldr	r1, [pc, #28]	; (8001790 <__NVIC_EnableIRQ+0x38>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	2001      	movs	r0, #1
 800177a:	fa00 f202 	lsl.w	r2, r0, r2
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100

08001794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	; (80017e0 <__NVIC_SetPriority+0x4c>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017bc:	e00a      	b.n	80017d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4908      	ldr	r1, [pc, #32]	; (80017e4 <__NVIC_SetPriority+0x50>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	3b04      	subs	r3, #4
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	440b      	add	r3, r1
 80017d2:	761a      	strb	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f1c3 0307 	rsb	r3, r3, #7
 8001802:	2b04      	cmp	r3, #4
 8001804:	bf28      	it	cs
 8001806:	2304      	movcs	r3, #4
 8001808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3304      	adds	r3, #4
 800180e:	2b06      	cmp	r3, #6
 8001810:	d902      	bls.n	8001818 <NVIC_EncodePriority+0x30>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3b03      	subs	r3, #3
 8001816:	e000      	b.n	800181a <NVIC_EncodePriority+0x32>
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43d9      	mvns	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	4313      	orrs	r3, r2
         );
}
 8001842:	4618      	mov	r0, r3
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001860:	d301      	bcc.n	8001866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001862:	2301      	movs	r3, #1
 8001864:	e00f      	b.n	8001886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <SysTick_Config+0x40>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186e:	210f      	movs	r1, #15
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f7ff ff8e 	bl	8001794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <SysTick_Config+0x40>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <SysTick_Config+0x40>)
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	e000e010 	.word	0xe000e010

08001894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ff29 	bl	80016f4 <__NVIC_SetPriorityGrouping>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018bc:	f7ff ff3e 	bl	800173c <__NVIC_GetPriorityGrouping>
 80018c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f7ff ff8e 	bl	80017e8 <NVIC_EncodePriority>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff5d 	bl	8001794 <__NVIC_SetPriority>
}
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff31 	bl	8001758 <__NVIC_EnableIRQ>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffa2 	bl	8001850 <SysTick_Config>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff feb6 	bl	8001694 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e099      	b.n	8001a68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001954:	e00f      	b.n	8001976 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001956:	f7ff fe9d 	bl	8001694 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b05      	cmp	r3, #5
 8001962:	d908      	bls.n	8001976 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2220      	movs	r2, #32
 8001968:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2203      	movs	r2, #3
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e078      	b.n	8001a68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1e8      	bne.n	8001956 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	4b38      	ldr	r3, [pc, #224]	; (8001a70 <HAL_DMA_Init+0x158>)
 8001990:	4013      	ands	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d107      	bne.n	80019e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4313      	orrs	r3, r2
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4313      	orrs	r3, r2
 80019de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f023 0307 	bic.w	r3, r3, #7
 80019f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d117      	bne.n	8001a3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00e      	beq.n	8001a3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 fb09 	bl	8002034 <DMA_CheckFifoParam>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2240      	movs	r2, #64	; 0x40
 8001a2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a36:	2301      	movs	r3, #1
 8001a38:	e016      	b.n	8001a68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 fac0 	bl	8001fc8 <DMA_CalcBaseAndBitshift>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a50:	223f      	movs	r2, #63	; 0x3f
 8001a52:	409a      	lsls	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	e010803f 	.word	0xe010803f

08001a74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_DMA_Start_IT+0x26>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e048      	b.n	8001b2c <HAL_DMA_Start_IT+0xb8>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d137      	bne.n	8001b1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 fa52 	bl	8001f6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001acc:	223f      	movs	r2, #63	; 0x3f
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0216 	orr.w	r2, r2, #22
 8001ae2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001af2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d007      	beq.n	8001b0c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0208 	orr.w	r2, r2, #8
 8001b0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	e005      	b.n	8001b2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b26:	2302      	movs	r3, #2
 8001b28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b42:	f7ff fda7 	bl	8001694 <HAL_GetTick>
 8001b46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d008      	beq.n	8001b66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2280      	movs	r2, #128	; 0x80
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e052      	b.n	8001c0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0216 	bic.w	r2, r2, #22
 8001b74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d103      	bne.n	8001b96 <HAL_DMA_Abort+0x62>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0208 	bic.w	r2, r2, #8
 8001ba4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0201 	bic.w	r2, r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb6:	e013      	b.n	8001be0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bb8:	f7ff fd6c 	bl	8001694 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b05      	cmp	r3, #5
 8001bc4:	d90c      	bls.n	8001be0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2203      	movs	r2, #3
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e015      	b.n	8001c0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1e4      	bne.n	8001bb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf2:	223f      	movs	r2, #63	; 0x3f
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d004      	beq.n	8001c32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00c      	b.n	8001c4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2205      	movs	r2, #5
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001c64:	4b8e      	ldr	r3, [pc, #568]	; (8001ea0 <HAL_DMA_IRQHandler+0x248>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a8e      	ldr	r2, [pc, #568]	; (8001ea4 <HAL_DMA_IRQHandler+0x24c>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0a9b      	lsrs	r3, r3, #10
 8001c70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c82:	2208      	movs	r2, #8
 8001c84:	409a      	lsls	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d01a      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0204 	bic.w	r2, r2, #4
 8001caa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	2201      	movs	r2, #1
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d012      	beq.n	8001cfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	f043 0202 	orr.w	r2, r3, #2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfe:	2204      	movs	r2, #4
 8001d00:	409a      	lsls	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d012      	beq.n	8001d30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00b      	beq.n	8001d30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d28:	f043 0204 	orr.w	r2, r3, #4
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	2210      	movs	r2, #16
 8001d36:	409a      	lsls	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d043      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d03c      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	2210      	movs	r2, #16
 8001d54:	409a      	lsls	r2, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d018      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d108      	bne.n	8001d88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d024      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	4798      	blx	r3
 8001d86:	e01f      	b.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01b      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3
 8001d98:	e016      	b.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d107      	bne.n	8001db8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0208 	bic.w	r2, r2, #8
 8001db6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	2220      	movs	r2, #32
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 808f 	beq.w	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 8087 	beq.w	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dee:	2220      	movs	r2, #32
 8001df0:	409a      	lsls	r2, r3
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b05      	cmp	r3, #5
 8001e00:	d136      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0216 	bic.w	r2, r2, #22
 8001e10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <HAL_DMA_IRQHandler+0x1da>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0208 	bic.w	r2, r2, #8
 8001e40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e46:	223f      	movs	r2, #63	; 0x3f
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d07e      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	4798      	blx	r3
        }
        return;
 8001e6e:	e079      	b.n	8001f64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d01d      	beq.n	8001eba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10d      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d031      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
 8001e9c:	e02c      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
 8001e9e:	bf00      	nop
 8001ea0:	20000004 	.word	0x20000004
 8001ea4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d023      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
 8001eb8:	e01e      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10f      	bne.n	8001ee8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0210 	bic.w	r2, r2, #16
 8001ed6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d032      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d022      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2205      	movs	r2, #5
 8001f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	3301      	adds	r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d307      	bcc.n	8001f40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f2      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x2cc>
 8001f3e:	e000      	b.n	8001f42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	4798      	blx	r3
 8001f62:	e000      	b.n	8001f66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f64:	bf00      	nop
    }
  }
}
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b40      	cmp	r3, #64	; 0x40
 8001f98:	d108      	bne.n	8001fac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001faa:	e007      	b.n	8001fbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	60da      	str	r2, [r3, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	3b10      	subs	r3, #16
 8001fd8:	4a13      	ldr	r2, [pc, #76]	; (8002028 <DMA_CalcBaseAndBitshift+0x60>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <DMA_CalcBaseAndBitshift+0x64>)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d908      	bls.n	8002008 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <DMA_CalcBaseAndBitshift+0x68>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	1d1a      	adds	r2, r3, #4
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	659a      	str	r2, [r3, #88]	; 0x58
 8002006:	e006      	b.n	8002016 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <DMA_CalcBaseAndBitshift+0x68>)
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	aaaaaaab 	.word	0xaaaaaaab
 800202c:	08007674 	.word	0x08007674
 8002030:	fffffc00 	.word	0xfffffc00

08002034 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d11f      	bne.n	800208e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d856      	bhi.n	8002102 <DMA_CheckFifoParam+0xce>
 8002054:	a201      	add	r2, pc, #4	; (adr r2, 800205c <DMA_CheckFifoParam+0x28>)
 8002056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205a:	bf00      	nop
 800205c:	0800206d 	.word	0x0800206d
 8002060:	0800207f 	.word	0x0800207f
 8002064:	0800206d 	.word	0x0800206d
 8002068:	08002103 	.word	0x08002103
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d046      	beq.n	8002106 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800207c:	e043      	b.n	8002106 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002086:	d140      	bne.n	800210a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800208c:	e03d      	b.n	800210a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002096:	d121      	bne.n	80020dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b03      	cmp	r3, #3
 800209c:	d837      	bhi.n	800210e <DMA_CheckFifoParam+0xda>
 800209e:	a201      	add	r2, pc, #4	; (adr r2, 80020a4 <DMA_CheckFifoParam+0x70>)
 80020a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a4:	080020b5 	.word	0x080020b5
 80020a8:	080020bb 	.word	0x080020bb
 80020ac:	080020b5 	.word	0x080020b5
 80020b0:	080020cd 	.word	0x080020cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
      break;
 80020b8:	e030      	b.n	800211c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d025      	beq.n	8002112 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ca:	e022      	b.n	8002112 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020d4:	d11f      	bne.n	8002116 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020da:	e01c      	b.n	8002116 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d903      	bls.n	80020ea <DMA_CheckFifoParam+0xb6>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d003      	beq.n	80020f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020e8:	e018      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
      break;
 80020ee:	e015      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00e      	beq.n	800211a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002100:	e00b      	b.n	800211a <DMA_CheckFifoParam+0xe6>
      break;
 8002102:	bf00      	nop
 8002104:	e00a      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;
 8002106:	bf00      	nop
 8002108:	e008      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;
 800210a:	bf00      	nop
 800210c:	e006      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;
 800210e:	bf00      	nop
 8002110:	e004      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;
 8002112:	bf00      	nop
 8002114:	e002      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;   
 8002116:	bf00      	nop
 8002118:	e000      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;
 800211a:	bf00      	nop
    }
  } 
  
  return status; 
 800211c:	7bfb      	ldrb	r3, [r7, #15]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	e169      	b.n	8002420 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800214c:	2201      	movs	r2, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	429a      	cmp	r2, r3
 8002166:	f040 8158 	bne.w	800241a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d005      	beq.n	8002182 <HAL_GPIO_Init+0x56>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d130      	bne.n	80021e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	2203      	movs	r2, #3
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 0201 	and.w	r2, r3, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d017      	beq.n	8002220 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d123      	bne.n	8002274 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	08da      	lsrs	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3208      	adds	r2, #8
 8002234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	220f      	movs	r2, #15
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	08da      	lsrs	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3208      	adds	r2, #8
 800226e:	69b9      	ldr	r1, [r7, #24]
 8002270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0203 	and.w	r2, r3, #3
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80b2 	beq.w	800241a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b6:	4b60      	ldr	r3, [pc, #384]	; (8002438 <HAL_GPIO_Init+0x30c>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a5f      	ldr	r2, [pc, #380]	; (8002438 <HAL_GPIO_Init+0x30c>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <HAL_GPIO_Init+0x30c>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022ce:	4a5b      	ldr	r2, [pc, #364]	; (800243c <HAL_GPIO_Init+0x310>)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3302      	adds	r3, #2
 80022d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a52      	ldr	r2, [pc, #328]	; (8002440 <HAL_GPIO_Init+0x314>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d02b      	beq.n	8002352 <HAL_GPIO_Init+0x226>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a51      	ldr	r2, [pc, #324]	; (8002444 <HAL_GPIO_Init+0x318>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d025      	beq.n	800234e <HAL_GPIO_Init+0x222>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a50      	ldr	r2, [pc, #320]	; (8002448 <HAL_GPIO_Init+0x31c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01f      	beq.n	800234a <HAL_GPIO_Init+0x21e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4f      	ldr	r2, [pc, #316]	; (800244c <HAL_GPIO_Init+0x320>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d019      	beq.n	8002346 <HAL_GPIO_Init+0x21a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4e      	ldr	r2, [pc, #312]	; (8002450 <HAL_GPIO_Init+0x324>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_GPIO_Init+0x216>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4d      	ldr	r2, [pc, #308]	; (8002454 <HAL_GPIO_Init+0x328>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00d      	beq.n	800233e <HAL_GPIO_Init+0x212>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4c      	ldr	r2, [pc, #304]	; (8002458 <HAL_GPIO_Init+0x32c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d007      	beq.n	800233a <HAL_GPIO_Init+0x20e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4b      	ldr	r2, [pc, #300]	; (800245c <HAL_GPIO_Init+0x330>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_GPIO_Init+0x20a>
 8002332:	2307      	movs	r3, #7
 8002334:	e00e      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002336:	2308      	movs	r3, #8
 8002338:	e00c      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800233a:	2306      	movs	r3, #6
 800233c:	e00a      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800233e:	2305      	movs	r3, #5
 8002340:	e008      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002342:	2304      	movs	r3, #4
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002346:	2303      	movs	r3, #3
 8002348:	e004      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800234a:	2302      	movs	r3, #2
 800234c:	e002      	b.n	8002354 <HAL_GPIO_Init+0x228>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_GPIO_Init+0x228>
 8002352:	2300      	movs	r3, #0
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	f002 0203 	and.w	r2, r2, #3
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	4093      	lsls	r3, r2
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002364:	4935      	ldr	r1, [pc, #212]	; (800243c <HAL_GPIO_Init+0x310>)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3302      	adds	r3, #2
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002372:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_GPIO_Init+0x334>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002396:	4a32      	ldr	r2, [pc, #200]	; (8002460 <HAL_GPIO_Init+0x334>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800239c:	4b30      	ldr	r3, [pc, #192]	; (8002460 <HAL_GPIO_Init+0x334>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023c0:	4a27      	ldr	r2, [pc, #156]	; (8002460 <HAL_GPIO_Init+0x334>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <HAL_GPIO_Init+0x334>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ea:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <HAL_GPIO_Init+0x334>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_GPIO_Init+0x334>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002414:	4a12      	ldr	r2, [pc, #72]	; (8002460 <HAL_GPIO_Init+0x334>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3301      	adds	r3, #1
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b0f      	cmp	r3, #15
 8002424:	f67f ae92 	bls.w	800214c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3724      	adds	r7, #36	; 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800
 800243c:	40013800 	.word	0x40013800
 8002440:	40020000 	.word	0x40020000
 8002444:	40020400 	.word	0x40020400
 8002448:	40020800 	.word	0x40020800
 800244c:	40020c00 	.word	0x40020c00
 8002450:	40021000 	.word	0x40021000
 8002454:	40021400 	.word	0x40021400
 8002458:	40021800 	.word	0x40021800
 800245c:	40021c00 	.word	0x40021c00
 8002460:	40013c00 	.word	0x40013c00

08002464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
 8002470:	4613      	mov	r3, r2
 8002472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002474:	787b      	ldrb	r3, [r7, #1]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002480:	e003      	b.n	800248a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002482:	887b      	ldrh	r3, [r7, #2]
 8002484:	041a      	lsls	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	619a      	str	r2, [r3, #24]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002496:	b480      	push	{r7}
 8002498:	b085      	sub	sp, #20
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024a8:	887a      	ldrh	r2, [r7, #2]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4013      	ands	r3, r2
 80024ae:	041a      	lsls	r2, r3, #16
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43d9      	mvns	r1, r3
 80024b4:	887b      	ldrh	r3, [r7, #2]
 80024b6:	400b      	ands	r3, r1
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	619a      	str	r2, [r3, #24]
}
 80024be:	bf00      	nop
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024cc:	b08f      	sub	sp, #60	; 0x3c
 80024ce:	af0a      	add	r7, sp, #40	; 0x28
 80024d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e116      	b.n	800270a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe ff2c 	bl	8001354 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2203      	movs	r2, #3
 8002500:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d102      	bne.n	8002516 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f003 fd2e 	bl	8005f7c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	687e      	ldr	r6, [r7, #4]
 8002528:	466d      	mov	r5, sp
 800252a:	f106 0410 	add.w	r4, r6, #16
 800252e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002536:	e894 0003 	ldmia.w	r4, {r0, r1}
 800253a:	e885 0003 	stmia.w	r5, {r0, r1}
 800253e:	1d33      	adds	r3, r6, #4
 8002540:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002542:	6838      	ldr	r0, [r7, #0]
 8002544:	f003 fc92 	bl	8005e6c <USB_CoreInit>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2202      	movs	r2, #2
 8002552:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e0d7      	b.n	800270a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f003 fd1c 	bl	8005f9e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
 800256a:	e04a      	b.n	8002602 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	333d      	adds	r3, #61	; 0x3d
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	333c      	adds	r3, #60	; 0x3c
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	b298      	uxth	r0, r3
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	3344      	adds	r3, #68	; 0x44
 80025a8:	4602      	mov	r2, r0
 80025aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025ac:	7bfa      	ldrb	r2, [r7, #15]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3340      	adds	r3, #64	; 0x40
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	3348      	adds	r3, #72	; 0x48
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	334c      	adds	r3, #76	; 0x4c
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	3354      	adds	r3, #84	; 0x54
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	3301      	adds	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	d3af      	bcc.n	800256c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]
 8002610:	e044      	b.n	800269c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	3301      	adds	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d3b5      	bcc.n	8002612 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	687e      	ldr	r6, [r7, #4]
 80026ae:	466d      	mov	r5, sp
 80026b0:	f106 0410 	add.w	r4, r6, #16
 80026b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80026c4:	1d33      	adds	r3, r6, #4
 80026c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026c8:	6838      	ldr	r0, [r7, #0]
 80026ca:	f003 fcb5 	bl	8006038 <USB_DevInit>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e014      	b.n	800270a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d102      	bne.n	80026fe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f80b 	bl	8002714 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f003 fe83 	bl	800640e <USB_DevDisconnect>

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002714 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_PCDEx_ActivateLPM+0x44>)
 8002744:	4313      	orrs	r3, r2
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	10000003 	.word	0x10000003

0800275c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a04      	ldr	r2, [pc, #16]	; (8002778 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40007000 	.word	0x40007000

0800277c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	4b23      	ldr	r3, [pc, #140]	; (8002814 <HAL_PWREx_EnableOverDrive+0x98>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a22      	ldr	r2, [pc, #136]	; (8002814 <HAL_PWREx_EnableOverDrive+0x98>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b20      	ldr	r3, [pc, #128]	; (8002814 <HAL_PWREx_EnableOverDrive+0x98>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027aa:	f7fe ff73 	bl	8001694 <HAL_GetTick>
 80027ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027b0:	e009      	b.n	80027c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027b2:	f7fe ff6f 	bl	8001694 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c0:	d901      	bls.n	80027c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e022      	b.n	800280c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d2:	d1ee      	bne.n	80027b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027d4:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0f      	ldr	r2, [pc, #60]	; (8002818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027e0:	f7fe ff58 	bl	8001694 <HAL_GetTick>
 80027e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027e6:	e009      	b.n	80027fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027e8:	f7fe ff54 	bl	8001694 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027f6:	d901      	bls.n	80027fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e007      	b.n	800280c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002808:	d1ee      	bne.n	80027e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	40007000 	.word	0x40007000

0800281c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002824:	2300      	movs	r3, #0
 8002826:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e291      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8087 	beq.w	800294e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002840:	4b96      	ldr	r3, [pc, #600]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b04      	cmp	r3, #4
 800284a:	d00c      	beq.n	8002866 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284c:	4b93      	ldr	r3, [pc, #588]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b08      	cmp	r3, #8
 8002856:	d112      	bne.n	800287e <HAL_RCC_OscConfig+0x62>
 8002858:	4b90      	ldr	r3, [pc, #576]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002864:	d10b      	bne.n	800287e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002866:	4b8d      	ldr	r3, [pc, #564]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d06c      	beq.n	800294c <HAL_RCC_OscConfig+0x130>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d168      	bne.n	800294c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e26b      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x7a>
 8002888:	4b84      	ldr	r3, [pc, #528]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a83      	ldr	r2, [pc, #524]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 800288e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	e02e      	b.n	80028f4 <HAL_RCC_OscConfig+0xd8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x9c>
 800289e:	4b7f      	ldr	r3, [pc, #508]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a7e      	ldr	r2, [pc, #504]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80028a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	4b7c      	ldr	r3, [pc, #496]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a7b      	ldr	r2, [pc, #492]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80028b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e01d      	b.n	80028f4 <HAL_RCC_OscConfig+0xd8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0xc0>
 80028c2:	4b76      	ldr	r3, [pc, #472]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a75      	ldr	r2, [pc, #468]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80028c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b73      	ldr	r3, [pc, #460]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a72      	ldr	r2, [pc, #456]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e00b      	b.n	80028f4 <HAL_RCC_OscConfig+0xd8>
 80028dc:	4b6f      	ldr	r3, [pc, #444]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a6e      	ldr	r2, [pc, #440]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80028e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b6c      	ldr	r3, [pc, #432]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a6b      	ldr	r2, [pc, #428]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80028ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe feca 	bl	8001694 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002904:	f7fe fec6 	bl	8001694 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e21f      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4b61      	ldr	r3, [pc, #388]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0xe8>
 8002922:	e014      	b.n	800294e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe feb6 	bl	8001694 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800292c:	f7fe feb2 	bl	8001694 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e20b      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293e:	4b57      	ldr	r3, [pc, #348]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x110>
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d069      	beq.n	8002a2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800295a:	4b50      	ldr	r3, [pc, #320]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002966:	4b4d      	ldr	r3, [pc, #308]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b08      	cmp	r3, #8
 8002970:	d11c      	bne.n	80029ac <HAL_RCC_OscConfig+0x190>
 8002972:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d116      	bne.n	80029ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_RCC_OscConfig+0x17a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e1df      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002996:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	493d      	ldr	r1, [pc, #244]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029aa:	e040      	b.n	8002a2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d023      	beq.n	80029fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b4:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a38      	ldr	r2, [pc, #224]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe fe68 	bl	8001694 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c8:	f7fe fe64 	bl	8001694 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e1bd      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029da:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e6:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4929      	ldr	r1, [pc, #164]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]
 80029fa:	e018      	b.n	8002a2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fc:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a26      	ldr	r2, [pc, #152]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fe44 	bl	8001694 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a10:	f7fe fe40 	bl	8001694 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e199      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a22:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d038      	beq.n	8002aac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d019      	beq.n	8002a76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a42:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 8002a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a46:	4a15      	ldr	r2, [pc, #84]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fe21 	bl	8001694 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a56:	f7fe fe1d 	bl	8001694 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e176      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 8002a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x23a>
 8002a74:	e01a      	b.n	8002aac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 8002a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7a:	4a08      	ldr	r2, [pc, #32]	; (8002a9c <HAL_RCC_OscConfig+0x280>)
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a82:	f7fe fe07 	bl	8001694 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8a:	f7fe fe03 	bl	8001694 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d903      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e15c      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>
 8002a9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	4b91      	ldr	r3, [pc, #580]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ee      	bne.n	8002a8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80a4 	beq.w	8002c02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aba:	4b8b      	ldr	r3, [pc, #556]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10d      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac6:	4b88      	ldr	r3, [pc, #544]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	4a87      	ldr	r2, [pc, #540]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad2:	4b85      	ldr	r3, [pc, #532]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae2:	4b82      	ldr	r3, [pc, #520]	; (8002cec <HAL_RCC_OscConfig+0x4d0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d118      	bne.n	8002b20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002aee:	4b7f      	ldr	r3, [pc, #508]	; (8002cec <HAL_RCC_OscConfig+0x4d0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a7e      	ldr	r2, [pc, #504]	; (8002cec <HAL_RCC_OscConfig+0x4d0>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afa:	f7fe fdcb 	bl	8001694 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b02:	f7fe fdc7 	bl	8001694 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b64      	cmp	r3, #100	; 0x64
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e120      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b14:	4b75      	ldr	r3, [pc, #468]	; (8002cec <HAL_RCC_OscConfig+0x4d0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d106      	bne.n	8002b36 <HAL_RCC_OscConfig+0x31a>
 8002b28:	4b6f      	ldr	r3, [pc, #444]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	4a6e      	ldr	r2, [pc, #440]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6713      	str	r3, [r2, #112]	; 0x70
 8002b34:	e02d      	b.n	8002b92 <HAL_RCC_OscConfig+0x376>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x33c>
 8002b3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	4a69      	ldr	r2, [pc, #420]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002b44:	f023 0301 	bic.w	r3, r3, #1
 8002b48:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4a:	4b67      	ldr	r3, [pc, #412]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	4a66      	ldr	r2, [pc, #408]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002b50:	f023 0304 	bic.w	r3, r3, #4
 8002b54:	6713      	str	r3, [r2, #112]	; 0x70
 8002b56:	e01c      	b.n	8002b92 <HAL_RCC_OscConfig+0x376>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b05      	cmp	r3, #5
 8002b5e:	d10c      	bne.n	8002b7a <HAL_RCC_OscConfig+0x35e>
 8002b60:	4b61      	ldr	r3, [pc, #388]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	4a60      	ldr	r2, [pc, #384]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002b66:	f043 0304 	orr.w	r3, r3, #4
 8002b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6c:	4b5e      	ldr	r3, [pc, #376]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	4a5d      	ldr	r2, [pc, #372]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6713      	str	r3, [r2, #112]	; 0x70
 8002b78:	e00b      	b.n	8002b92 <HAL_RCC_OscConfig+0x376>
 8002b7a:	4b5b      	ldr	r3, [pc, #364]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	4a5a      	ldr	r2, [pc, #360]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	6713      	str	r3, [r2, #112]	; 0x70
 8002b86:	4b58      	ldr	r3, [pc, #352]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a57      	ldr	r2, [pc, #348]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002b8c:	f023 0304 	bic.w	r3, r3, #4
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d015      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9a:	f7fe fd7b 	bl	8001694 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba0:	e00a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba2:	f7fe fd77 	bl	8001694 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e0ce      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb8:	4b4b      	ldr	r3, [pc, #300]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0ee      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x386>
 8002bc4:	e014      	b.n	8002bf0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fd65 	bl	8001694 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bcc:	e00a      	b.n	8002be4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bce:	f7fe fd61 	bl	8001694 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e0b8      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be4:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ee      	bne.n	8002bce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bf0:	7dfb      	ldrb	r3, [r7, #23]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d105      	bne.n	8002c02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf6:	4b3c      	ldr	r3, [pc, #240]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 80a4 	beq.w	8002d54 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c0c:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d06b      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d149      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c20:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a30      	ldr	r2, [pc, #192]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fd32 	bl	8001694 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe fd2e 	bl	8001694 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e087      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b28      	ldr	r3, [pc, #160]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	4313      	orrs	r3, r2
 8002c78:	4a1b      	ldr	r2, [pc, #108]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002c7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c7e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a18      	ldr	r2, [pc, #96]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fd02 	bl	8001694 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fe fcfe 	bl	8001694 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e057      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x478>
 8002cb2:	e04f      	b.n	8002d54 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fce8 	bl	8001694 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe fce4 	bl	8001694 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e03d      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	4b03      	ldr	r3, [pc, #12]	; (8002ce8 <HAL_RCC_OscConfig+0x4cc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4ac>
 8002ce6:	e035      	b.n	8002d54 <HAL_RCC_OscConfig+0x538>
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_RCC_OscConfig+0x544>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d028      	beq.n	8002d50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d121      	bne.n	8002d50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d11a      	bne.n	8002d50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d26:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d111      	bne.n	8002d50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800

08002d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0d0      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b6a      	ldr	r3, [pc, #424]	; (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d910      	bls.n	8002dac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 020f 	bic.w	r2, r3, #15
 8002d92:	4965      	ldr	r1, [pc, #404]	; (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b63      	ldr	r3, [pc, #396]	; (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0b8      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d020      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc4:	4b59      	ldr	r3, [pc, #356]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a58      	ldr	r2, [pc, #352]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002dca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ddc:	4b53      	ldr	r3, [pc, #332]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4a52      	ldr	r2, [pc, #328]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002de2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002de6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de8:	4b50      	ldr	r3, [pc, #320]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	494d      	ldr	r1, [pc, #308]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d040      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d115      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e07f      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e26:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e073      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	4b3d      	ldr	r3, [pc, #244]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e06b      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e46:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f023 0203 	bic.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4936      	ldr	r1, [pc, #216]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e58:	f7fe fc1c 	bl	8001694 <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e60:	f7fe fc18 	bl	8001694 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e053      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 020c 	and.w	r2, r3, #12
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1eb      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d210      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 020f 	bic.w	r2, r3, #15
 8002e9e:	4922      	ldr	r1, [pc, #136]	; (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e032      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec4:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4916      	ldr	r1, [pc, #88]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	490e      	ldr	r1, [pc, #56]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ef6:	f000 f821 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8002efa:	4602      	mov	r2, r0
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	490a      	ldr	r1, [pc, #40]	; (8002f30 <HAL_RCC_ClockConfig+0x1cc>)
 8002f08:	5ccb      	ldrb	r3, [r1, r3]
 8002f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0e:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <HAL_RCC_ClockConfig+0x1d0>)
 8002f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_RCC_ClockConfig+0x1d4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fb78 	bl	800160c <HAL_InitTick>

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40023c00 	.word	0x40023c00
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	0800765c 	.word	0x0800765c
 8002f34:	20000004 	.word	0x20000004
 8002f38:	20000008 	.word	0x20000008

08002f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f40:	b094      	sub	sp, #80	; 0x50
 8002f42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	647b      	str	r3, [r7, #68]	; 0x44
 8002f48:	2300      	movs	r3, #0
 8002f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f54:	4b79      	ldr	r3, [pc, #484]	; (800313c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 030c 	and.w	r3, r3, #12
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d00d      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x40>
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	f200 80e1 	bhi.w	8003128 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x34>
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d003      	beq.n	8002f76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f6e:	e0db      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f70:	4b73      	ldr	r3, [pc, #460]	; (8003140 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f74:	e0db      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f76:	4b73      	ldr	r3, [pc, #460]	; (8003144 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f7a:	e0d8      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f7c:	4b6f      	ldr	r3, [pc, #444]	; (800313c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f84:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f86:	4b6d      	ldr	r3, [pc, #436]	; (800313c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d063      	beq.n	800305a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f92:	4b6a      	ldr	r3, [pc, #424]	; (800313c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	099b      	lsrs	r3, r3, #6
 8002f98:	2200      	movs	r2, #0
 8002f9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8002faa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fae:	4622      	mov	r2, r4
 8002fb0:	462b      	mov	r3, r5
 8002fb2:	f04f 0000 	mov.w	r0, #0
 8002fb6:	f04f 0100 	mov.w	r1, #0
 8002fba:	0159      	lsls	r1, r3, #5
 8002fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc0:	0150      	lsls	r0, r2, #5
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	1a51      	subs	r1, r2, r1
 8002fca:	6139      	str	r1, [r7, #16]
 8002fcc:	4629      	mov	r1, r5
 8002fce:	eb63 0301 	sbc.w	r3, r3, r1
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fe0:	4659      	mov	r1, fp
 8002fe2:	018b      	lsls	r3, r1, #6
 8002fe4:	4651      	mov	r1, sl
 8002fe6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fea:	4651      	mov	r1, sl
 8002fec:	018a      	lsls	r2, r1, #6
 8002fee:	4651      	mov	r1, sl
 8002ff0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ff4:	4659      	mov	r1, fp
 8002ff6:	eb63 0901 	sbc.w	r9, r3, r1
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003006:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800300a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800300e:	4690      	mov	r8, r2
 8003010:	4699      	mov	r9, r3
 8003012:	4623      	mov	r3, r4
 8003014:	eb18 0303 	adds.w	r3, r8, r3
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	462b      	mov	r3, r5
 800301c:	eb49 0303 	adc.w	r3, r9, r3
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800302e:	4629      	mov	r1, r5
 8003030:	024b      	lsls	r3, r1, #9
 8003032:	4621      	mov	r1, r4
 8003034:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003038:	4621      	mov	r1, r4
 800303a:	024a      	lsls	r2, r1, #9
 800303c:	4610      	mov	r0, r2
 800303e:	4619      	mov	r1, r3
 8003040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003042:	2200      	movs	r2, #0
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
 8003046:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003048:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800304c:	f7fd f8f0 	bl	8000230 <__aeabi_uldivmod>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4613      	mov	r3, r2
 8003056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003058:	e058      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305a:	4b38      	ldr	r3, [pc, #224]	; (800313c <HAL_RCC_GetSysClockFreq+0x200>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	099b      	lsrs	r3, r3, #6
 8003060:	2200      	movs	r2, #0
 8003062:	4618      	mov	r0, r3
 8003064:	4611      	mov	r1, r2
 8003066:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800306a:	623b      	str	r3, [r7, #32]
 800306c:	2300      	movs	r3, #0
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
 8003070:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003074:	4642      	mov	r2, r8
 8003076:	464b      	mov	r3, r9
 8003078:	f04f 0000 	mov.w	r0, #0
 800307c:	f04f 0100 	mov.w	r1, #0
 8003080:	0159      	lsls	r1, r3, #5
 8003082:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003086:	0150      	lsls	r0, r2, #5
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4641      	mov	r1, r8
 800308e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003092:	4649      	mov	r1, r9
 8003094:	eb63 0b01 	sbc.w	fp, r3, r1
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030ac:	ebb2 040a 	subs.w	r4, r2, sl
 80030b0:	eb63 050b 	sbc.w	r5, r3, fp
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	00eb      	lsls	r3, r5, #3
 80030be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030c2:	00e2      	lsls	r2, r4, #3
 80030c4:	4614      	mov	r4, r2
 80030c6:	461d      	mov	r5, r3
 80030c8:	4643      	mov	r3, r8
 80030ca:	18e3      	adds	r3, r4, r3
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	464b      	mov	r3, r9
 80030d0:	eb45 0303 	adc.w	r3, r5, r3
 80030d4:	607b      	str	r3, [r7, #4]
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030e2:	4629      	mov	r1, r5
 80030e4:	028b      	lsls	r3, r1, #10
 80030e6:	4621      	mov	r1, r4
 80030e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030ec:	4621      	mov	r1, r4
 80030ee:	028a      	lsls	r2, r1, #10
 80030f0:	4610      	mov	r0, r2
 80030f2:	4619      	mov	r1, r3
 80030f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f6:	2200      	movs	r2, #0
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	61fa      	str	r2, [r7, #28]
 80030fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003100:	f7fd f896 	bl	8000230 <__aeabi_uldivmod>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4613      	mov	r3, r2
 800310a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_RCC_GetSysClockFreq+0x200>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	0c1b      	lsrs	r3, r3, #16
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	3301      	adds	r3, #1
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800311c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800311e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003120:	fbb2 f3f3 	udiv	r3, r2, r3
 8003124:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003126:	e002      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_RCC_GetSysClockFreq+0x204>)
 800312a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800312c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800312e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003130:	4618      	mov	r0, r3
 8003132:	3750      	adds	r7, #80	; 0x50
 8003134:	46bd      	mov	sp, r7
 8003136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800
 8003140:	00f42400 	.word	0x00f42400
 8003144:	007a1200 	.word	0x007a1200

08003148 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800314c:	4b03      	ldr	r3, [pc, #12]	; (800315c <HAL_RCC_GetHCLKFreq+0x14>)
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	20000004 	.word	0x20000004

08003160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003164:	f7ff fff0 	bl	8003148 <HAL_RCC_GetHCLKFreq>
 8003168:	4602      	mov	r2, r0
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	0a9b      	lsrs	r3, r3, #10
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	4903      	ldr	r1, [pc, #12]	; (8003184 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003176:	5ccb      	ldrb	r3, [r1, r3]
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800317c:	4618      	mov	r0, r3
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40023800 	.word	0x40023800
 8003184:	0800766c 	.word	0x0800766c

08003188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800318c:	f7ff ffdc 	bl	8003148 <HAL_RCC_GetHCLKFreq>
 8003190:	4602      	mov	r2, r0
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	0b5b      	lsrs	r3, r3, #13
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	4903      	ldr	r1, [pc, #12]	; (80031ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800319e:	5ccb      	ldrb	r3, [r1, r3]
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40023800 	.word	0x40023800
 80031ac:	0800766c 	.word	0x0800766c

080031b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d012      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031d4:	4b65      	ldr	r3, [pc, #404]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	4a64      	ldr	r2, [pc, #400]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031de:	6093      	str	r3, [r2, #8]
 80031e0:	4b62      	ldr	r3, [pc, #392]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	4960      	ldr	r1, [pc, #384]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80031f6:	2301      	movs	r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d017      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003206:	4b59      	ldr	r3, [pc, #356]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800320c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003214:	4955      	ldr	r1, [pc, #340]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003224:	d101      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8003226:	2301      	movs	r3, #1
 8003228:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8003232:	2301      	movs	r3, #1
 8003234:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d017      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003242:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003248:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	4946      	ldr	r1, [pc, #280]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003260:	d101      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800326e:	2301      	movs	r3, #1
 8003270:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 808b 	beq.w	8003396 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003280:	4b3a      	ldr	r3, [pc, #232]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	4a39      	ldr	r2, [pc, #228]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328a:	6413      	str	r3, [r2, #64]	; 0x40
 800328c:	4b37      	ldr	r3, [pc, #220]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003298:	4b35      	ldr	r3, [pc, #212]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a34      	ldr	r2, [pc, #208]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a4:	f7fe f9f6 	bl	8001694 <HAL_GetTick>
 80032a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ac:	f7fe f9f2 	bl	8001694 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e2bc      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032be:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032ca:	4b28      	ldr	r3, [pc, #160]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d035      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d02e      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032e8:	4b20      	ldr	r3, [pc, #128]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032f2:	4b1e      	ldr	r3, [pc, #120]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a1d      	ldr	r2, [pc, #116]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032fe:	4b1b      	ldr	r3, [pc, #108]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a1a      	ldr	r2, [pc, #104]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003308:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800330a:	4a18      	ldr	r2, [pc, #96]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003310:	4b16      	ldr	r3, [pc, #88]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d114      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe f9ba 	bl	8001694 <HAL_GetTick>
 8003320:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003322:	e00a      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003324:	f7fe f9b6 	bl	8001694 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e27e      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0ee      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003352:	d111      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003362:	400b      	ands	r3, r1
 8003364:	4901      	ldr	r1, [pc, #4]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003366:	4313      	orrs	r3, r2
 8003368:	608b      	str	r3, [r1, #8]
 800336a:	e00b      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800336c:	40023800 	.word	0x40023800
 8003370:	40007000 	.word	0x40007000
 8003374:	0ffffcff 	.word	0x0ffffcff
 8003378:	4ba4      	ldr	r3, [pc, #656]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4aa3      	ldr	r2, [pc, #652]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800337e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003382:	6093      	str	r3, [r2, #8]
 8003384:	4ba1      	ldr	r3, [pc, #644]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003386:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003390:	499e      	ldr	r1, [pc, #632]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003392:	4313      	orrs	r3, r2
 8003394:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d010      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033a2:	4b9a      	ldr	r3, [pc, #616]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a8:	4a98      	ldr	r2, [pc, #608]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033b2:	4b96      	ldr	r3, [pc, #600]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	4993      	ldr	r1, [pc, #588]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033d0:	4b8e      	ldr	r3, [pc, #568]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	498b      	ldr	r1, [pc, #556]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033f2:	4b86      	ldr	r3, [pc, #536]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003400:	4982      	ldr	r1, [pc, #520]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003414:	4b7d      	ldr	r3, [pc, #500]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003422:	497a      	ldr	r1, [pc, #488]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003436:	4b75      	ldr	r3, [pc, #468]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	f023 0203 	bic.w	r2, r3, #3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	4971      	ldr	r1, [pc, #452]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003458:	4b6c      	ldr	r3, [pc, #432]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	f023 020c 	bic.w	r2, r3, #12
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	4969      	ldr	r1, [pc, #420]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800347a:	4b64      	ldr	r3, [pc, #400]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	4960      	ldr	r1, [pc, #384]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800349c:	4b5b      	ldr	r3, [pc, #364]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034aa:	4958      	ldr	r1, [pc, #352]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034be:	4b53      	ldr	r3, [pc, #332]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034cc:	494f      	ldr	r1, [pc, #316]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034e0:	4b4a      	ldr	r3, [pc, #296]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ee:	4947      	ldr	r1, [pc, #284]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003502:	4b42      	ldr	r3, [pc, #264]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003508:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	493e      	ldr	r1, [pc, #248]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003524:	4b39      	ldr	r3, [pc, #228]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	4936      	ldr	r1, [pc, #216]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d011      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003546:	4b31      	ldr	r3, [pc, #196]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003554:	492d      	ldr	r1, [pc, #180]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003564:	d101      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003576:	4b25      	ldr	r3, [pc, #148]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003584:	4921      	ldr	r1, [pc, #132]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003598:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a6:	4919      	ldr	r1, [pc, #100]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80035ba:	4b14      	ldr	r3, [pc, #80]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c8:	4910      	ldr	r1, [pc, #64]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d006      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 809d 	beq.w	800371e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035e4:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a08      	ldr	r2, [pc, #32]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f0:	f7fe f850 	bl	8001694 <HAL_GetTick>
 80035f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035f6:	e00b      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035f8:	f7fe f84c 	bl	8001694 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d904      	bls.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e116      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003610:	4b8b      	ldr	r3, [pc, #556]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ed      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d017      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d113      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003630:	4b83      	ldr	r3, [pc, #524]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003636:	0e1b      	lsrs	r3, r3, #24
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	019a      	lsls	r2, r3, #6
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	061b      	lsls	r3, r3, #24
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	071b      	lsls	r3, r3, #28
 8003650:	497b      	ldr	r1, [pc, #492]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d004      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366c:	d00a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003676:	2b00      	cmp	r3, #0
 8003678:	d024      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003682:	d11f      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003684:	4b6e      	ldr	r3, [pc, #440]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800368a:	0f1b      	lsrs	r3, r3, #28
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	019a      	lsls	r2, r3, #6
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	431a      	orrs	r2, r3
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	071b      	lsls	r3, r3, #28
 80036a4:	4966      	ldr	r1, [pc, #408]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036ac:	4b64      	ldr	r3, [pc, #400]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b2:	f023 021f 	bic.w	r2, r3, #31
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	4960      	ldr	r1, [pc, #384]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00d      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	019a      	lsls	r2, r3, #6
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	061b      	lsls	r3, r3, #24
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	071b      	lsls	r3, r3, #28
 80036e4:	4956      	ldr	r1, [pc, #344]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036ec:	4b54      	ldr	r3, [pc, #336]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a53      	ldr	r2, [pc, #332]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f8:	f7fd ffcc 	bl	8001694 <HAL_GetTick>
 80036fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003700:	f7fd ffc8 	bl	8001694 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b64      	cmp	r3, #100	; 0x64
 800370c:	d901      	bls.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e092      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003712:	4b4b      	ldr	r3, [pc, #300]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b01      	cmp	r3, #1
 8003722:	f040 8088 	bne.w	8003836 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003726:	4b46      	ldr	r3, [pc, #280]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a45      	ldr	r2, [pc, #276]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800372c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003732:	f7fd ffaf 	bl	8001694 <HAL_GetTick>
 8003736:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003738:	e008      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800373a:	f7fd ffab 	bl	8001694 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b64      	cmp	r3, #100	; 0x64
 8003746:	d901      	bls.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e075      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800374c:	4b3c      	ldr	r3, [pc, #240]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003758:	d0ef      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003776:	2b00      	cmp	r3, #0
 8003778:	d024      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	2b00      	cmp	r3, #0
 8003780:	d120      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003782:	4b2f      	ldr	r3, [pc, #188]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	0c1b      	lsrs	r3, r3, #16
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	019a      	lsls	r2, r3, #6
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	041b      	lsls	r3, r3, #16
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	061b      	lsls	r3, r3, #24
 80037a2:	4927      	ldr	r1, [pc, #156]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037aa:	4b25      	ldr	r3, [pc, #148]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	4920      	ldr	r1, [pc, #128]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d018      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x652>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037d8:	d113      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037da:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	0e1b      	lsrs	r3, r3, #24
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	019a      	lsls	r2, r3, #6
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	041b      	lsls	r3, r3, #16
 80037f4:	431a      	orrs	r2, r3
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	061b      	lsls	r3, r3, #24
 80037fa:	4911      	ldr	r1, [pc, #68]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003802:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a0e      	ldr	r2, [pc, #56]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380e:	f7fd ff41 	bl	8001694 <HAL_GetTick>
 8003812:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003816:	f7fd ff3d 	bl	8001694 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b64      	cmp	r3, #100	; 0x64
 8003822:	d901      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e007      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003828:	4b05      	ldr	r3, [pc, #20]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003834:	d1ef      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800

08003844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e049      	b.n	80038ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fd fbd2 	bl	8001014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3304      	adds	r3, #4
 8003880:	4619      	mov	r1, r3
 8003882:	4610      	mov	r0, r2
 8003884:	f000 fb6e 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e049      	b.n	8003998 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f841 	bl	80039a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3304      	adds	r3, #4
 800392e:	4619      	mov	r1, r3
 8003930:	4610      	mov	r0, r2
 8003932:	f000 fb17 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d109      	bne.n	80039d8 <HAL_TIM_PWM_Start+0x24>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	e03c      	b.n	8003a52 <HAL_TIM_PWM_Start+0x9e>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d109      	bne.n	80039f2 <HAL_TIM_PWM_Start+0x3e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	bf14      	ite	ne
 80039ea:	2301      	movne	r3, #1
 80039ec:	2300      	moveq	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	e02f      	b.n	8003a52 <HAL_TIM_PWM_Start+0x9e>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d109      	bne.n	8003a0c <HAL_TIM_PWM_Start+0x58>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	bf14      	ite	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	2300      	moveq	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	e022      	b.n	8003a52 <HAL_TIM_PWM_Start+0x9e>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d109      	bne.n	8003a26 <HAL_TIM_PWM_Start+0x72>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	bf14      	ite	ne
 8003a1e:	2301      	movne	r3, #1
 8003a20:	2300      	moveq	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	e015      	b.n	8003a52 <HAL_TIM_PWM_Start+0x9e>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d109      	bne.n	8003a40 <HAL_TIM_PWM_Start+0x8c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	bf14      	ite	ne
 8003a38:	2301      	movne	r3, #1
 8003a3a:	2300      	moveq	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	e008      	b.n	8003a52 <HAL_TIM_PWM_Start+0x9e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	bf14      	ite	ne
 8003a4c:	2301      	movne	r3, #1
 8003a4e:	2300      	moveq	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e092      	b.n	8003b80 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d104      	bne.n	8003a6a <HAL_TIM_PWM_Start+0xb6>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a68:	e023      	b.n	8003ab2 <HAL_TIM_PWM_Start+0xfe>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d104      	bne.n	8003a7a <HAL_TIM_PWM_Start+0xc6>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a78:	e01b      	b.n	8003ab2 <HAL_TIM_PWM_Start+0xfe>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d104      	bne.n	8003a8a <HAL_TIM_PWM_Start+0xd6>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a88:	e013      	b.n	8003ab2 <HAL_TIM_PWM_Start+0xfe>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b0c      	cmp	r3, #12
 8003a8e:	d104      	bne.n	8003a9a <HAL_TIM_PWM_Start+0xe6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a98:	e00b      	b.n	8003ab2 <HAL_TIM_PWM_Start+0xfe>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d104      	bne.n	8003aaa <HAL_TIM_PWM_Start+0xf6>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa8:	e003      	b.n	8003ab2 <HAL_TIM_PWM_Start+0xfe>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	6839      	ldr	r1, [r7, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fdea 	bl	8004694 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a30      	ldr	r2, [pc, #192]	; (8003b88 <HAL_TIM_PWM_Start+0x1d4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d004      	beq.n	8003ad4 <HAL_TIM_PWM_Start+0x120>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2f      	ldr	r2, [pc, #188]	; (8003b8c <HAL_TIM_PWM_Start+0x1d8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d101      	bne.n	8003ad8 <HAL_TIM_PWM_Start+0x124>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <HAL_TIM_PWM_Start+0x126>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a25      	ldr	r2, [pc, #148]	; (8003b88 <HAL_TIM_PWM_Start+0x1d4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d022      	beq.n	8003b3e <HAL_TIM_PWM_Start+0x18a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b00:	d01d      	beq.n	8003b3e <HAL_TIM_PWM_Start+0x18a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <HAL_TIM_PWM_Start+0x1dc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d018      	beq.n	8003b3e <HAL_TIM_PWM_Start+0x18a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a20      	ldr	r2, [pc, #128]	; (8003b94 <HAL_TIM_PWM_Start+0x1e0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <HAL_TIM_PWM_Start+0x18a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <HAL_TIM_PWM_Start+0x1e4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00e      	beq.n	8003b3e <HAL_TIM_PWM_Start+0x18a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a19      	ldr	r2, [pc, #100]	; (8003b8c <HAL_TIM_PWM_Start+0x1d8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d009      	beq.n	8003b3e <HAL_TIM_PWM_Start+0x18a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1b      	ldr	r2, [pc, #108]	; (8003b9c <HAL_TIM_PWM_Start+0x1e8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d004      	beq.n	8003b3e <HAL_TIM_PWM_Start+0x18a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <HAL_TIM_PWM_Start+0x1ec>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d115      	bne.n	8003b6a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <HAL_TIM_PWM_Start+0x1f0>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b06      	cmp	r3, #6
 8003b4e:	d015      	beq.n	8003b7c <HAL_TIM_PWM_Start+0x1c8>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b56:	d011      	beq.n	8003b7c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b68:	e008      	b.n	8003b7c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0201 	orr.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e000      	b.n	8003b7e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40010400 	.word	0x40010400
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40000800 	.word	0x40000800
 8003b98:	40000c00 	.word	0x40000c00
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40001800 	.word	0x40001800
 8003ba4:	00010007 	.word	0x00010007

08003ba8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e0ff      	b.n	8003dc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b14      	cmp	r3, #20
 8003bd2:	f200 80f0 	bhi.w	8003db6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003bd6:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003c31 	.word	0x08003c31
 8003be0:	08003db7 	.word	0x08003db7
 8003be4:	08003db7 	.word	0x08003db7
 8003be8:	08003db7 	.word	0x08003db7
 8003bec:	08003c71 	.word	0x08003c71
 8003bf0:	08003db7 	.word	0x08003db7
 8003bf4:	08003db7 	.word	0x08003db7
 8003bf8:	08003db7 	.word	0x08003db7
 8003bfc:	08003cb3 	.word	0x08003cb3
 8003c00:	08003db7 	.word	0x08003db7
 8003c04:	08003db7 	.word	0x08003db7
 8003c08:	08003db7 	.word	0x08003db7
 8003c0c:	08003cf3 	.word	0x08003cf3
 8003c10:	08003db7 	.word	0x08003db7
 8003c14:	08003db7 	.word	0x08003db7
 8003c18:	08003db7 	.word	0x08003db7
 8003c1c:	08003d35 	.word	0x08003d35
 8003c20:	08003db7 	.word	0x08003db7
 8003c24:	08003db7 	.word	0x08003db7
 8003c28:	08003db7 	.word	0x08003db7
 8003c2c:	08003d75 	.word	0x08003d75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fa34 	bl	80040a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0208 	orr.w	r2, r2, #8
 8003c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0204 	bic.w	r2, r2, #4
 8003c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6999      	ldr	r1, [r3, #24]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	619a      	str	r2, [r3, #24]
      break;
 8003c6e:	e0a5      	b.n	8003dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fa86 	bl	8004188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6999      	ldr	r1, [r3, #24]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	021a      	lsls	r2, r3, #8
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	619a      	str	r2, [r3, #24]
      break;
 8003cb0:	e084      	b.n	8003dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fadd 	bl	8004278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0208 	orr.w	r2, r2, #8
 8003ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0204 	bic.w	r2, r2, #4
 8003cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69d9      	ldr	r1, [r3, #28]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	61da      	str	r2, [r3, #28]
      break;
 8003cf0:	e064      	b.n	8003dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fb33 	bl	8004364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69d9      	ldr	r1, [r3, #28]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	021a      	lsls	r2, r3, #8
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	61da      	str	r2, [r3, #28]
      break;
 8003d32:	e043      	b.n	8003dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fb6a 	bl	8004414 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0208 	orr.w	r2, r2, #8
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0204 	bic.w	r2, r2, #4
 8003d5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d72:	e023      	b.n	8003dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fb9c 	bl	80044b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	021a      	lsls	r2, r3, #8
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003db4:	e002      	b.n	8003dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop

08003dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_TIM_ConfigClockSource+0x1c>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e0b4      	b.n	8003f56 <HAL_TIM_ConfigClockSource+0x186>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	4b56      	ldr	r3, [pc, #344]	; (8003f60 <HAL_TIM_ConfigClockSource+0x190>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e24:	d03e      	beq.n	8003ea4 <HAL_TIM_ConfigClockSource+0xd4>
 8003e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e2a:	f200 8087 	bhi.w	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e32:	f000 8086 	beq.w	8003f42 <HAL_TIM_ConfigClockSource+0x172>
 8003e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3a:	d87f      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e3c:	2b70      	cmp	r3, #112	; 0x70
 8003e3e:	d01a      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0xa6>
 8003e40:	2b70      	cmp	r3, #112	; 0x70
 8003e42:	d87b      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e44:	2b60      	cmp	r3, #96	; 0x60
 8003e46:	d050      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0x11a>
 8003e48:	2b60      	cmp	r3, #96	; 0x60
 8003e4a:	d877      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e4c:	2b50      	cmp	r3, #80	; 0x50
 8003e4e:	d03c      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0xfa>
 8003e50:	2b50      	cmp	r3, #80	; 0x50
 8003e52:	d873      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e54:	2b40      	cmp	r3, #64	; 0x40
 8003e56:	d058      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x13a>
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d86f      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e5c:	2b30      	cmp	r3, #48	; 0x30
 8003e5e:	d064      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x15a>
 8003e60:	2b30      	cmp	r3, #48	; 0x30
 8003e62:	d86b      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d060      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x15a>
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d867      	bhi.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d05c      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x15a>
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d05a      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x15a>
 8003e74:	e062      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e86:	f000 fbe5 	bl	8004654 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	609a      	str	r2, [r3, #8]
      break;
 8003ea2:	e04f      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eb4:	f000 fbce 	bl	8004654 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ec6:	609a      	str	r2, [r3, #8]
      break;
 8003ec8:	e03c      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f000 fb42 	bl	8004560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2150      	movs	r1, #80	; 0x50
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fb9b 	bl	800461e <TIM_ITRx_SetConfig>
      break;
 8003ee8:	e02c      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f000 fb61 	bl	80045be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2160      	movs	r1, #96	; 0x60
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fb8b 	bl	800461e <TIM_ITRx_SetConfig>
      break;
 8003f08:	e01c      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f16:	461a      	mov	r2, r3
 8003f18:	f000 fb22 	bl	8004560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2140      	movs	r1, #64	; 0x40
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fb7b 	bl	800461e <TIM_ITRx_SetConfig>
      break;
 8003f28:	e00c      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4619      	mov	r1, r3
 8003f34:	4610      	mov	r0, r2
 8003f36:	f000 fb72 	bl	800461e <TIM_ITRx_SetConfig>
      break;
 8003f3a:	e003      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f40:	e000      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	fffeff88 	.word	0xfffeff88

08003f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a40      	ldr	r2, [pc, #256]	; (8004078 <TIM_Base_SetConfig+0x114>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d013      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f82:	d00f      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a3d      	ldr	r2, [pc, #244]	; (800407c <TIM_Base_SetConfig+0x118>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00b      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a3c      	ldr	r2, [pc, #240]	; (8004080 <TIM_Base_SetConfig+0x11c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d007      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a3b      	ldr	r2, [pc, #236]	; (8004084 <TIM_Base_SetConfig+0x120>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a3a      	ldr	r2, [pc, #232]	; (8004088 <TIM_Base_SetConfig+0x124>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d108      	bne.n	8003fb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a2f      	ldr	r2, [pc, #188]	; (8004078 <TIM_Base_SetConfig+0x114>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d02b      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc4:	d027      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a2c      	ldr	r2, [pc, #176]	; (800407c <TIM_Base_SetConfig+0x118>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d023      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a2b      	ldr	r2, [pc, #172]	; (8004080 <TIM_Base_SetConfig+0x11c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01f      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a2a      	ldr	r2, [pc, #168]	; (8004084 <TIM_Base_SetConfig+0x120>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01b      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a29      	ldr	r2, [pc, #164]	; (8004088 <TIM_Base_SetConfig+0x124>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d017      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a28      	ldr	r2, [pc, #160]	; (800408c <TIM_Base_SetConfig+0x128>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a27      	ldr	r2, [pc, #156]	; (8004090 <TIM_Base_SetConfig+0x12c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00f      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a26      	ldr	r2, [pc, #152]	; (8004094 <TIM_Base_SetConfig+0x130>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00b      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a25      	ldr	r2, [pc, #148]	; (8004098 <TIM_Base_SetConfig+0x134>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a24      	ldr	r2, [pc, #144]	; (800409c <TIM_Base_SetConfig+0x138>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d003      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a23      	ldr	r2, [pc, #140]	; (80040a0 <TIM_Base_SetConfig+0x13c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d108      	bne.n	8004028 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <TIM_Base_SetConfig+0x114>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_Base_SetConfig+0xf8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a0c      	ldr	r2, [pc, #48]	; (8004088 <TIM_Base_SetConfig+0x124>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d103      	bne.n	8004064 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	615a      	str	r2, [r3, #20]
}
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40010000 	.word	0x40010000
 800407c:	40000400 	.word	0x40000400
 8004080:	40000800 	.word	0x40000800
 8004084:	40000c00 	.word	0x40000c00
 8004088:	40010400 	.word	0x40010400
 800408c:	40014000 	.word	0x40014000
 8004090:	40014400 	.word	0x40014400
 8004094:	40014800 	.word	0x40014800
 8004098:	40001800 	.word	0x40001800
 800409c:	40001c00 	.word	0x40001c00
 80040a0:	40002000 	.word	0x40002000

080040a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f023 0201 	bic.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4b2b      	ldr	r3, [pc, #172]	; (800417c <TIM_OC1_SetConfig+0xd8>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f023 0302 	bic.w	r3, r3, #2
 80040ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a21      	ldr	r2, [pc, #132]	; (8004180 <TIM_OC1_SetConfig+0xdc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d003      	beq.n	8004108 <TIM_OC1_SetConfig+0x64>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a20      	ldr	r2, [pc, #128]	; (8004184 <TIM_OC1_SetConfig+0xe0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d10c      	bne.n	8004122 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f023 0308 	bic.w	r3, r3, #8
 800410e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a16      	ldr	r2, [pc, #88]	; (8004180 <TIM_OC1_SetConfig+0xdc>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d003      	beq.n	8004132 <TIM_OC1_SetConfig+0x8e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a15      	ldr	r2, [pc, #84]	; (8004184 <TIM_OC1_SetConfig+0xe0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d111      	bne.n	8004156 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	621a      	str	r2, [r3, #32]
}
 8004170:	bf00      	nop
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	fffeff8f 	.word	0xfffeff8f
 8004180:	40010000 	.word	0x40010000
 8004184:	40010400 	.word	0x40010400

08004188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f023 0210 	bic.w	r2, r3, #16
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4b2e      	ldr	r3, [pc, #184]	; (800426c <TIM_OC2_SetConfig+0xe4>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f023 0320 	bic.w	r3, r3, #32
 80041d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a23      	ldr	r2, [pc, #140]	; (8004270 <TIM_OC2_SetConfig+0xe8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d003      	beq.n	80041f0 <TIM_OC2_SetConfig+0x68>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a22      	ldr	r2, [pc, #136]	; (8004274 <TIM_OC2_SetConfig+0xec>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10d      	bne.n	800420c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800420a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a18      	ldr	r2, [pc, #96]	; (8004270 <TIM_OC2_SetConfig+0xe8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_OC2_SetConfig+0x94>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a17      	ldr	r2, [pc, #92]	; (8004274 <TIM_OC2_SetConfig+0xec>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d113      	bne.n	8004244 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004222:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800422a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	feff8fff 	.word	0xfeff8fff
 8004270:	40010000 	.word	0x40010000
 8004274:	40010400 	.word	0x40010400

08004278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4b2d      	ldr	r3, [pc, #180]	; (8004358 <TIM_OC3_SetConfig+0xe0>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0303 	bic.w	r3, r3, #3
 80042ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a22      	ldr	r2, [pc, #136]	; (800435c <TIM_OC3_SetConfig+0xe4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d003      	beq.n	80042de <TIM_OC3_SetConfig+0x66>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a21      	ldr	r2, [pc, #132]	; (8004360 <TIM_OC3_SetConfig+0xe8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10d      	bne.n	80042fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a17      	ldr	r2, [pc, #92]	; (800435c <TIM_OC3_SetConfig+0xe4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d003      	beq.n	800430a <TIM_OC3_SetConfig+0x92>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a16      	ldr	r2, [pc, #88]	; (8004360 <TIM_OC3_SetConfig+0xe8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d113      	bne.n	8004332 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	621a      	str	r2, [r3, #32]
}
 800434c:	bf00      	nop
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	fffeff8f 	.word	0xfffeff8f
 800435c:	40010000 	.word	0x40010000
 8004360:	40010400 	.word	0x40010400

08004364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4b1e      	ldr	r3, [pc, #120]	; (8004408 <TIM_OC4_SetConfig+0xa4>)
 8004390:	4013      	ands	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	031b      	lsls	r3, r3, #12
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a13      	ldr	r2, [pc, #76]	; (800440c <TIM_OC4_SetConfig+0xa8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_OC4_SetConfig+0x68>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a12      	ldr	r2, [pc, #72]	; (8004410 <TIM_OC4_SetConfig+0xac>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d109      	bne.n	80043e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	019b      	lsls	r3, r3, #6
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	feff8fff 	.word	0xfeff8fff
 800440c:	40010000 	.word	0x40010000
 8004410:	40010400 	.word	0x40010400

08004414 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <TIM_OC5_SetConfig+0x98>)
 8004440:	4013      	ands	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004454:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	041b      	lsls	r3, r3, #16
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <TIM_OC5_SetConfig+0x9c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d003      	beq.n	8004472 <TIM_OC5_SetConfig+0x5e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a11      	ldr	r2, [pc, #68]	; (80044b4 <TIM_OC5_SetConfig+0xa0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d109      	bne.n	8004486 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004478:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	621a      	str	r2, [r3, #32]
}
 80044a0:	bf00      	nop
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	fffeff8f 	.word	0xfffeff8f
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40010400 	.word	0x40010400

080044b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4b1c      	ldr	r3, [pc, #112]	; (8004554 <TIM_OC6_SetConfig+0x9c>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	051b      	lsls	r3, r3, #20
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a13      	ldr	r2, [pc, #76]	; (8004558 <TIM_OC6_SetConfig+0xa0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d003      	beq.n	8004518 <TIM_OC6_SetConfig+0x60>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a12      	ldr	r2, [pc, #72]	; (800455c <TIM_OC6_SetConfig+0xa4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d109      	bne.n	800452c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800451e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	029b      	lsls	r3, r3, #10
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	feff8fff 	.word	0xfeff8fff
 8004558:	40010000 	.word	0x40010000
 800455c:	40010400 	.word	0x40010400

08004560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f023 0201 	bic.w	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800458a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 030a 	bic.w	r3, r3, #10
 800459c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045be:	b480      	push	{r7}
 80045c0:	b087      	sub	sp, #28
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	f023 0210 	bic.w	r2, r3, #16
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	031b      	lsls	r3, r3, #12
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800461e:	b480      	push	{r7}
 8004620:	b085      	sub	sp, #20
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	f043 0307 	orr.w	r3, r3, #7
 8004640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	609a      	str	r2, [r3, #8]
}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800466e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	021a      	lsls	r2, r3, #8
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	431a      	orrs	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4313      	orrs	r3, r2
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	609a      	str	r2, [r3, #8]
}
 8004688:	bf00      	nop
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	2201      	movs	r2, #1
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1a      	ldr	r2, [r3, #32]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	43db      	mvns	r3, r3
 80046b6:	401a      	ands	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a1a      	ldr	r2, [r3, #32]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	fa01 f303 	lsl.w	r3, r1, r3
 80046cc:	431a      	orrs	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e06d      	b.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a30      	ldr	r2, [pc, #192]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a2f      	ldr	r2, [pc, #188]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d108      	bne.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004732:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004744:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a20      	ldr	r2, [pc, #128]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d022      	beq.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476a:	d01d      	beq.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1d      	ldr	r2, [pc, #116]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d018      	beq.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1c      	ldr	r2, [pc, #112]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d013      	beq.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1a      	ldr	r2, [pc, #104]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00e      	beq.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d009      	beq.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a16      	ldr	r2, [pc, #88]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d004      	beq.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a15      	ldr	r2, [pc, #84]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d10c      	bne.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40010400 	.word	0x40010400
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40000800 	.word	0x40000800
 80047f0:	40000c00 	.word	0x40000c00
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40001800 	.word	0x40001800

080047fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004814:	2302      	movs	r3, #2
 8004816:	e065      	b.n	80048e4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4313      	orrs	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	041b      	lsls	r3, r3, #16
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a16      	ldr	r2, [pc, #88]	; (80048f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d004      	beq.n	80048a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a14      	ldr	r2, [pc, #80]	; (80048f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d115      	bne.n	80048d2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	051b      	lsls	r3, r3, #20
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	40010000 	.word	0x40010000
 80048f4:	40010400 	.word	0x40010400

080048f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e040      	b.n	800498c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fc fbd2 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2224      	movs	r2, #36	; 0x24
 8004924:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0201 	bic.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fbde 	bl	80050f8 <UART_SetConfig>
 800493c:	4603      	mov	r3, r0
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e022      	b.n	800498c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fe36 	bl	80055c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004962:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004972:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 febd 	bl	8005704 <UART_CheckIdleState>
 800498a:	4603      	mov	r3, r0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	; 0x28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d165      	bne.n	8004a76 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <HAL_UART_Transmit_DMA+0x22>
 80049b0:	88fb      	ldrh	r3, [r7, #6]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e05e      	b.n	8004a78 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	88fa      	ldrh	r2, [r7, #6]
 80049c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	88fa      	ldrh	r2, [r7, #6]
 80049cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2221      	movs	r2, #33	; 0x21
 80049dc:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d027      	beq.n	8004a36 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	4a25      	ldr	r2, [pc, #148]	; (8004a80 <HAL_UART_Transmit_DMA+0xec>)
 80049ec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4a24      	ldr	r2, [pc, #144]	; (8004a84 <HAL_UART_Transmit_DMA+0xf0>)
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	4a23      	ldr	r2, [pc, #140]	; (8004a88 <HAL_UART_Transmit_DMA+0xf4>)
 80049fc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	2200      	movs	r2, #0
 8004a04:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0e:	4619      	mov	r1, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3328      	adds	r3, #40	; 0x28
 8004a16:	461a      	mov	r2, r3
 8004a18:	88fb      	ldrh	r3, [r7, #6]
 8004a1a:	f7fd f82b 	bl	8001a74 <HAL_DMA_Start_IT>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2210      	movs	r2, #16
 8004a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e020      	b.n	8004a78 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2240      	movs	r2, #64	; 0x40
 8004a3c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3308      	adds	r3, #8
 8004a44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5e:	623a      	str	r2, [r7, #32]
 8004a60:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	69f9      	ldr	r1, [r7, #28]
 8004a64:	6a3a      	ldr	r2, [r7, #32]
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e5      	bne.n	8004a3e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	e000      	b.n	8004a78 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004a76:	2302      	movs	r3, #2
  }
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3728      	adds	r7, #40	; 0x28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	08005b55 	.word	0x08005b55
 8004a84:	08005beb 	.word	0x08005beb
 8004a88:	08005d6d 	.word	0x08005d6d

08004a8c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08a      	sub	sp, #40	; 0x28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	4613      	mov	r3, r2
 8004a98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d132      	bne.n	8004b0a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <HAL_UART_Receive_DMA+0x24>
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e02b      	b.n	8004b0c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d018      	beq.n	8004afa <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	e853 3f00 	ldrex	r3, [r3]
 8004ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	623b      	str	r3, [r7, #32]
 8004ae8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aea:	69f9      	ldr	r1, [r7, #28]
 8004aec:	6a3a      	ldr	r2, [r7, #32]
 8004aee:	e841 2300 	strex	r3, r2, [r1]
 8004af2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1e6      	bne.n	8004ac8 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	461a      	mov	r2, r3
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 fefd 	bl	8005900 <UART_Start_Receive_DMA>
 8004b06:	4603      	mov	r3, r0
 8004b08:	e000      	b.n	8004b0c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3728      	adds	r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b0ba      	sub	sp, #232	; 0xe8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b42:	4013      	ands	r3, r2
 8004b44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d115      	bne.n	8004b7c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00f      	beq.n	8004b7c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b60:	f003 0320 	and.w	r3, r3, #32
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d009      	beq.n	8004b7c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8297 	beq.w	80050a0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	4798      	blx	r3
      }
      return;
 8004b7a:	e291      	b.n	80050a0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8117 	beq.w	8004db4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004b96:	4b85      	ldr	r3, [pc, #532]	; (8004dac <HAL_UART_IRQHandler+0x298>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 810a 	beq.w	8004db4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d011      	beq.n	8004bd0 <HAL_UART_IRQHandler+0xbc>
 8004bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00b      	beq.n	8004bd0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc6:	f043 0201 	orr.w	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d011      	beq.n	8004c00 <HAL_UART_IRQHandler+0xec>
 8004bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00b      	beq.n	8004c00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2202      	movs	r2, #2
 8004bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf6:	f043 0204 	orr.w	r2, r3, #4
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d011      	beq.n	8004c30 <HAL_UART_IRQHandler+0x11c>
 8004c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00b      	beq.n	8004c30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2204      	movs	r2, #4
 8004c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c26:	f043 0202 	orr.w	r2, r3, #2
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d017      	beq.n	8004c6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d105      	bne.n	8004c54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00b      	beq.n	8004c6c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2208      	movs	r2, #8
 8004c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c62:	f043 0208 	orr.w	r2, r3, #8
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d012      	beq.n	8004c9e <HAL_UART_IRQHandler+0x18a>
 8004c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00c      	beq.n	8004c9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c94:	f043 0220 	orr.w	r2, r3, #32
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 81fd 	beq.w	80050a4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00d      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d005      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d04f      	beq.n	8004d96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fec8 	bl	8005a8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d141      	bne.n	8004d8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d18:	e853 3f00 	ldrex	r3, [r3]
 8004d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3308      	adds	r3, #8
 8004d32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1d9      	bne.n	8004d0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d013      	beq.n	8004d86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d62:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <HAL_UART_IRQHandler+0x29c>)
 8004d64:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fc ff52 	bl	8001c14 <HAL_DMA_Abort_IT>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d017      	beq.n	8004da6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d80:	4610      	mov	r0, r2
 8004d82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d84:	e00f      	b.n	8004da6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f9a0 	bl	80050cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8c:	e00b      	b.n	8004da6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f99c 	bl	80050cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d94:	e007      	b.n	8004da6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f998 	bl	80050cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004da4:	e17e      	b.n	80050a4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da6:	bf00      	nop
    return;
 8004da8:	e17c      	b.n	80050a4 <HAL_UART_IRQHandler+0x590>
 8004daa:	bf00      	nop
 8004dac:	04000120 	.word	0x04000120
 8004db0:	08005deb 	.word	0x08005deb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	f040 814c 	bne.w	8005056 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 8145 	beq.w	8005056 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 813e 	beq.w	8005056 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2210      	movs	r2, #16
 8004de0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	f040 80b6 	bne.w	8004f5e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004dfe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8150 	beq.w	80050a8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e12:	429a      	cmp	r2, r3
 8004e14:	f080 8148 	bcs.w	80050a8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2c:	f000 8086 	beq.w	8004f3c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e5e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1da      	bne.n	8004e30 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3308      	adds	r3, #8
 8004e80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3308      	adds	r3, #8
 8004e9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ea2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ea6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e1      	bne.n	8004e7a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3308      	adds	r3, #8
 8004ebc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3308      	adds	r3, #8
 8004ed6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004eda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004edc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ee0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e3      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f0c:	f023 0310 	bic.w	r3, r3, #16
 8004f10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e4      	bne.n	8004efc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fc fdfc 	bl	8001b34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f8c2 	bl	80050e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f5c:	e0a4      	b.n	80050a8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8096 	beq.w	80050ac <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004f80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 8091 	beq.w	80050ac <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fac:	647b      	str	r3, [r7, #68]	; 0x44
 8004fae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e4      	bne.n	8004f8a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	e853 3f00 	ldrex	r3, [r3]
 8004fce:	623b      	str	r3, [r7, #32]
   return(result);
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	f023 0301 	bic.w	r3, r3, #1
 8004fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3308      	adds	r3, #8
 8004fe0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fe4:	633a      	str	r2, [r7, #48]	; 0x30
 8004fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e3      	bne.n	8004fc0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	60fb      	str	r3, [r7, #12]
   return(result);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f023 0310 	bic.w	r3, r3, #16
 8005020:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	461a      	mov	r2, r3
 800502a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800502e:	61fb      	str	r3, [r7, #28]
 8005030:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	69b9      	ldr	r1, [r7, #24]
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	617b      	str	r3, [r7, #20]
   return(result);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e4      	bne.n	800500c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2202      	movs	r2, #2
 8005046:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005048:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800504c:	4619      	mov	r1, r3
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f846 	bl	80050e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005054:	e02a      	b.n	80050ac <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00e      	beq.n	8005080 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b00      	cmp	r3, #0
 800506c:	d008      	beq.n	8005080 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01c      	beq.n	80050b0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	4798      	blx	r3
    }
    return;
 800507e:	e017      	b.n	80050b0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b00      	cmp	r3, #0
 800508a:	d012      	beq.n	80050b2 <HAL_UART_IRQHandler+0x59e>
 800508c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00c      	beq.n	80050b2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 febc 	bl	8005e16 <UART_EndTransmit_IT>
    return;
 800509e:	e008      	b.n	80050b2 <HAL_UART_IRQHandler+0x59e>
      return;
 80050a0:	bf00      	nop
 80050a2:	e006      	b.n	80050b2 <HAL_UART_IRQHandler+0x59e>
    return;
 80050a4:	bf00      	nop
 80050a6:	e004      	b.n	80050b2 <HAL_UART_IRQHandler+0x59e>
      return;
 80050a8:	bf00      	nop
 80050aa:	e002      	b.n	80050b2 <HAL_UART_IRQHandler+0x59e>
      return;
 80050ac:	bf00      	nop
 80050ae:	e000      	b.n	80050b2 <HAL_UART_IRQHandler+0x59e>
    return;
 80050b0:	bf00      	nop
  }

}
 80050b2:	37e8      	adds	r7, #232	; 0xe8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4ba6      	ldr	r3, [pc, #664]	; (80053bc <UART_SetConfig+0x2c4>)
 8005124:	4013      	ands	r3, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	6979      	ldr	r1, [r7, #20]
 800512c:	430b      	orrs	r3, r1
 800512e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	430a      	orrs	r2, r1
 8005168:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a94      	ldr	r2, [pc, #592]	; (80053c0 <UART_SetConfig+0x2c8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d120      	bne.n	80051b6 <UART_SetConfig+0xbe>
 8005174:	4b93      	ldr	r3, [pc, #588]	; (80053c4 <UART_SetConfig+0x2cc>)
 8005176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b03      	cmp	r3, #3
 8005180:	d816      	bhi.n	80051b0 <UART_SetConfig+0xb8>
 8005182:	a201      	add	r2, pc, #4	; (adr r2, 8005188 <UART_SetConfig+0x90>)
 8005184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005188:	08005199 	.word	0x08005199
 800518c:	080051a5 	.word	0x080051a5
 8005190:	0800519f 	.word	0x0800519f
 8005194:	080051ab 	.word	0x080051ab
 8005198:	2301      	movs	r3, #1
 800519a:	77fb      	strb	r3, [r7, #31]
 800519c:	e150      	b.n	8005440 <UART_SetConfig+0x348>
 800519e:	2302      	movs	r3, #2
 80051a0:	77fb      	strb	r3, [r7, #31]
 80051a2:	e14d      	b.n	8005440 <UART_SetConfig+0x348>
 80051a4:	2304      	movs	r3, #4
 80051a6:	77fb      	strb	r3, [r7, #31]
 80051a8:	e14a      	b.n	8005440 <UART_SetConfig+0x348>
 80051aa:	2308      	movs	r3, #8
 80051ac:	77fb      	strb	r3, [r7, #31]
 80051ae:	e147      	b.n	8005440 <UART_SetConfig+0x348>
 80051b0:	2310      	movs	r3, #16
 80051b2:	77fb      	strb	r3, [r7, #31]
 80051b4:	e144      	b.n	8005440 <UART_SetConfig+0x348>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a83      	ldr	r2, [pc, #524]	; (80053c8 <UART_SetConfig+0x2d0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d132      	bne.n	8005226 <UART_SetConfig+0x12e>
 80051c0:	4b80      	ldr	r3, [pc, #512]	; (80053c4 <UART_SetConfig+0x2cc>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	f003 030c 	and.w	r3, r3, #12
 80051ca:	2b0c      	cmp	r3, #12
 80051cc:	d828      	bhi.n	8005220 <UART_SetConfig+0x128>
 80051ce:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <UART_SetConfig+0xdc>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	08005209 	.word	0x08005209
 80051d8:	08005221 	.word	0x08005221
 80051dc:	08005221 	.word	0x08005221
 80051e0:	08005221 	.word	0x08005221
 80051e4:	08005215 	.word	0x08005215
 80051e8:	08005221 	.word	0x08005221
 80051ec:	08005221 	.word	0x08005221
 80051f0:	08005221 	.word	0x08005221
 80051f4:	0800520f 	.word	0x0800520f
 80051f8:	08005221 	.word	0x08005221
 80051fc:	08005221 	.word	0x08005221
 8005200:	08005221 	.word	0x08005221
 8005204:	0800521b 	.word	0x0800521b
 8005208:	2300      	movs	r3, #0
 800520a:	77fb      	strb	r3, [r7, #31]
 800520c:	e118      	b.n	8005440 <UART_SetConfig+0x348>
 800520e:	2302      	movs	r3, #2
 8005210:	77fb      	strb	r3, [r7, #31]
 8005212:	e115      	b.n	8005440 <UART_SetConfig+0x348>
 8005214:	2304      	movs	r3, #4
 8005216:	77fb      	strb	r3, [r7, #31]
 8005218:	e112      	b.n	8005440 <UART_SetConfig+0x348>
 800521a:	2308      	movs	r3, #8
 800521c:	77fb      	strb	r3, [r7, #31]
 800521e:	e10f      	b.n	8005440 <UART_SetConfig+0x348>
 8005220:	2310      	movs	r3, #16
 8005222:	77fb      	strb	r3, [r7, #31]
 8005224:	e10c      	b.n	8005440 <UART_SetConfig+0x348>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a68      	ldr	r2, [pc, #416]	; (80053cc <UART_SetConfig+0x2d4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d120      	bne.n	8005272 <UART_SetConfig+0x17a>
 8005230:	4b64      	ldr	r3, [pc, #400]	; (80053c4 <UART_SetConfig+0x2cc>)
 8005232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005236:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800523a:	2b30      	cmp	r3, #48	; 0x30
 800523c:	d013      	beq.n	8005266 <UART_SetConfig+0x16e>
 800523e:	2b30      	cmp	r3, #48	; 0x30
 8005240:	d814      	bhi.n	800526c <UART_SetConfig+0x174>
 8005242:	2b20      	cmp	r3, #32
 8005244:	d009      	beq.n	800525a <UART_SetConfig+0x162>
 8005246:	2b20      	cmp	r3, #32
 8005248:	d810      	bhi.n	800526c <UART_SetConfig+0x174>
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <UART_SetConfig+0x15c>
 800524e:	2b10      	cmp	r3, #16
 8005250:	d006      	beq.n	8005260 <UART_SetConfig+0x168>
 8005252:	e00b      	b.n	800526c <UART_SetConfig+0x174>
 8005254:	2300      	movs	r3, #0
 8005256:	77fb      	strb	r3, [r7, #31]
 8005258:	e0f2      	b.n	8005440 <UART_SetConfig+0x348>
 800525a:	2302      	movs	r3, #2
 800525c:	77fb      	strb	r3, [r7, #31]
 800525e:	e0ef      	b.n	8005440 <UART_SetConfig+0x348>
 8005260:	2304      	movs	r3, #4
 8005262:	77fb      	strb	r3, [r7, #31]
 8005264:	e0ec      	b.n	8005440 <UART_SetConfig+0x348>
 8005266:	2308      	movs	r3, #8
 8005268:	77fb      	strb	r3, [r7, #31]
 800526a:	e0e9      	b.n	8005440 <UART_SetConfig+0x348>
 800526c:	2310      	movs	r3, #16
 800526e:	77fb      	strb	r3, [r7, #31]
 8005270:	e0e6      	b.n	8005440 <UART_SetConfig+0x348>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a56      	ldr	r2, [pc, #344]	; (80053d0 <UART_SetConfig+0x2d8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d120      	bne.n	80052be <UART_SetConfig+0x1c6>
 800527c:	4b51      	ldr	r3, [pc, #324]	; (80053c4 <UART_SetConfig+0x2cc>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005282:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005286:	2bc0      	cmp	r3, #192	; 0xc0
 8005288:	d013      	beq.n	80052b2 <UART_SetConfig+0x1ba>
 800528a:	2bc0      	cmp	r3, #192	; 0xc0
 800528c:	d814      	bhi.n	80052b8 <UART_SetConfig+0x1c0>
 800528e:	2b80      	cmp	r3, #128	; 0x80
 8005290:	d009      	beq.n	80052a6 <UART_SetConfig+0x1ae>
 8005292:	2b80      	cmp	r3, #128	; 0x80
 8005294:	d810      	bhi.n	80052b8 <UART_SetConfig+0x1c0>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <UART_SetConfig+0x1a8>
 800529a:	2b40      	cmp	r3, #64	; 0x40
 800529c:	d006      	beq.n	80052ac <UART_SetConfig+0x1b4>
 800529e:	e00b      	b.n	80052b8 <UART_SetConfig+0x1c0>
 80052a0:	2300      	movs	r3, #0
 80052a2:	77fb      	strb	r3, [r7, #31]
 80052a4:	e0cc      	b.n	8005440 <UART_SetConfig+0x348>
 80052a6:	2302      	movs	r3, #2
 80052a8:	77fb      	strb	r3, [r7, #31]
 80052aa:	e0c9      	b.n	8005440 <UART_SetConfig+0x348>
 80052ac:	2304      	movs	r3, #4
 80052ae:	77fb      	strb	r3, [r7, #31]
 80052b0:	e0c6      	b.n	8005440 <UART_SetConfig+0x348>
 80052b2:	2308      	movs	r3, #8
 80052b4:	77fb      	strb	r3, [r7, #31]
 80052b6:	e0c3      	b.n	8005440 <UART_SetConfig+0x348>
 80052b8:	2310      	movs	r3, #16
 80052ba:	77fb      	strb	r3, [r7, #31]
 80052bc:	e0c0      	b.n	8005440 <UART_SetConfig+0x348>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a44      	ldr	r2, [pc, #272]	; (80053d4 <UART_SetConfig+0x2dc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d125      	bne.n	8005314 <UART_SetConfig+0x21c>
 80052c8:	4b3e      	ldr	r3, [pc, #248]	; (80053c4 <UART_SetConfig+0x2cc>)
 80052ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d6:	d017      	beq.n	8005308 <UART_SetConfig+0x210>
 80052d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052dc:	d817      	bhi.n	800530e <UART_SetConfig+0x216>
 80052de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e2:	d00b      	beq.n	80052fc <UART_SetConfig+0x204>
 80052e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e8:	d811      	bhi.n	800530e <UART_SetConfig+0x216>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <UART_SetConfig+0x1fe>
 80052ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f2:	d006      	beq.n	8005302 <UART_SetConfig+0x20a>
 80052f4:	e00b      	b.n	800530e <UART_SetConfig+0x216>
 80052f6:	2300      	movs	r3, #0
 80052f8:	77fb      	strb	r3, [r7, #31]
 80052fa:	e0a1      	b.n	8005440 <UART_SetConfig+0x348>
 80052fc:	2302      	movs	r3, #2
 80052fe:	77fb      	strb	r3, [r7, #31]
 8005300:	e09e      	b.n	8005440 <UART_SetConfig+0x348>
 8005302:	2304      	movs	r3, #4
 8005304:	77fb      	strb	r3, [r7, #31]
 8005306:	e09b      	b.n	8005440 <UART_SetConfig+0x348>
 8005308:	2308      	movs	r3, #8
 800530a:	77fb      	strb	r3, [r7, #31]
 800530c:	e098      	b.n	8005440 <UART_SetConfig+0x348>
 800530e:	2310      	movs	r3, #16
 8005310:	77fb      	strb	r3, [r7, #31]
 8005312:	e095      	b.n	8005440 <UART_SetConfig+0x348>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2f      	ldr	r2, [pc, #188]	; (80053d8 <UART_SetConfig+0x2e0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d125      	bne.n	800536a <UART_SetConfig+0x272>
 800531e:	4b29      	ldr	r3, [pc, #164]	; (80053c4 <UART_SetConfig+0x2cc>)
 8005320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005324:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005328:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800532c:	d017      	beq.n	800535e <UART_SetConfig+0x266>
 800532e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005332:	d817      	bhi.n	8005364 <UART_SetConfig+0x26c>
 8005334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005338:	d00b      	beq.n	8005352 <UART_SetConfig+0x25a>
 800533a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800533e:	d811      	bhi.n	8005364 <UART_SetConfig+0x26c>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <UART_SetConfig+0x254>
 8005344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005348:	d006      	beq.n	8005358 <UART_SetConfig+0x260>
 800534a:	e00b      	b.n	8005364 <UART_SetConfig+0x26c>
 800534c:	2301      	movs	r3, #1
 800534e:	77fb      	strb	r3, [r7, #31]
 8005350:	e076      	b.n	8005440 <UART_SetConfig+0x348>
 8005352:	2302      	movs	r3, #2
 8005354:	77fb      	strb	r3, [r7, #31]
 8005356:	e073      	b.n	8005440 <UART_SetConfig+0x348>
 8005358:	2304      	movs	r3, #4
 800535a:	77fb      	strb	r3, [r7, #31]
 800535c:	e070      	b.n	8005440 <UART_SetConfig+0x348>
 800535e:	2308      	movs	r3, #8
 8005360:	77fb      	strb	r3, [r7, #31]
 8005362:	e06d      	b.n	8005440 <UART_SetConfig+0x348>
 8005364:	2310      	movs	r3, #16
 8005366:	77fb      	strb	r3, [r7, #31]
 8005368:	e06a      	b.n	8005440 <UART_SetConfig+0x348>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1b      	ldr	r2, [pc, #108]	; (80053dc <UART_SetConfig+0x2e4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d138      	bne.n	80053e6 <UART_SetConfig+0x2ee>
 8005374:	4b13      	ldr	r3, [pc, #76]	; (80053c4 <UART_SetConfig+0x2cc>)
 8005376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800537e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005382:	d017      	beq.n	80053b4 <UART_SetConfig+0x2bc>
 8005384:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005388:	d82a      	bhi.n	80053e0 <UART_SetConfig+0x2e8>
 800538a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800538e:	d00b      	beq.n	80053a8 <UART_SetConfig+0x2b0>
 8005390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005394:	d824      	bhi.n	80053e0 <UART_SetConfig+0x2e8>
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <UART_SetConfig+0x2aa>
 800539a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539e:	d006      	beq.n	80053ae <UART_SetConfig+0x2b6>
 80053a0:	e01e      	b.n	80053e0 <UART_SetConfig+0x2e8>
 80053a2:	2300      	movs	r3, #0
 80053a4:	77fb      	strb	r3, [r7, #31]
 80053a6:	e04b      	b.n	8005440 <UART_SetConfig+0x348>
 80053a8:	2302      	movs	r3, #2
 80053aa:	77fb      	strb	r3, [r7, #31]
 80053ac:	e048      	b.n	8005440 <UART_SetConfig+0x348>
 80053ae:	2304      	movs	r3, #4
 80053b0:	77fb      	strb	r3, [r7, #31]
 80053b2:	e045      	b.n	8005440 <UART_SetConfig+0x348>
 80053b4:	2308      	movs	r3, #8
 80053b6:	77fb      	strb	r3, [r7, #31]
 80053b8:	e042      	b.n	8005440 <UART_SetConfig+0x348>
 80053ba:	bf00      	nop
 80053bc:	efff69f3 	.word	0xefff69f3
 80053c0:	40011000 	.word	0x40011000
 80053c4:	40023800 	.word	0x40023800
 80053c8:	40004400 	.word	0x40004400
 80053cc:	40004800 	.word	0x40004800
 80053d0:	40004c00 	.word	0x40004c00
 80053d4:	40005000 	.word	0x40005000
 80053d8:	40011400 	.word	0x40011400
 80053dc:	40007800 	.word	0x40007800
 80053e0:	2310      	movs	r3, #16
 80053e2:	77fb      	strb	r3, [r7, #31]
 80053e4:	e02c      	b.n	8005440 <UART_SetConfig+0x348>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a72      	ldr	r2, [pc, #456]	; (80055b4 <UART_SetConfig+0x4bc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d125      	bne.n	800543c <UART_SetConfig+0x344>
 80053f0:	4b71      	ldr	r3, [pc, #452]	; (80055b8 <UART_SetConfig+0x4c0>)
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053fe:	d017      	beq.n	8005430 <UART_SetConfig+0x338>
 8005400:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005404:	d817      	bhi.n	8005436 <UART_SetConfig+0x33e>
 8005406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540a:	d00b      	beq.n	8005424 <UART_SetConfig+0x32c>
 800540c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005410:	d811      	bhi.n	8005436 <UART_SetConfig+0x33e>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <UART_SetConfig+0x326>
 8005416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800541a:	d006      	beq.n	800542a <UART_SetConfig+0x332>
 800541c:	e00b      	b.n	8005436 <UART_SetConfig+0x33e>
 800541e:	2300      	movs	r3, #0
 8005420:	77fb      	strb	r3, [r7, #31]
 8005422:	e00d      	b.n	8005440 <UART_SetConfig+0x348>
 8005424:	2302      	movs	r3, #2
 8005426:	77fb      	strb	r3, [r7, #31]
 8005428:	e00a      	b.n	8005440 <UART_SetConfig+0x348>
 800542a:	2304      	movs	r3, #4
 800542c:	77fb      	strb	r3, [r7, #31]
 800542e:	e007      	b.n	8005440 <UART_SetConfig+0x348>
 8005430:	2308      	movs	r3, #8
 8005432:	77fb      	strb	r3, [r7, #31]
 8005434:	e004      	b.n	8005440 <UART_SetConfig+0x348>
 8005436:	2310      	movs	r3, #16
 8005438:	77fb      	strb	r3, [r7, #31]
 800543a:	e001      	b.n	8005440 <UART_SetConfig+0x348>
 800543c:	2310      	movs	r3, #16
 800543e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005448:	d15b      	bne.n	8005502 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800544a:	7ffb      	ldrb	r3, [r7, #31]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d828      	bhi.n	80054a2 <UART_SetConfig+0x3aa>
 8005450:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <UART_SetConfig+0x360>)
 8005452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005456:	bf00      	nop
 8005458:	0800547d 	.word	0x0800547d
 800545c:	08005485 	.word	0x08005485
 8005460:	0800548d 	.word	0x0800548d
 8005464:	080054a3 	.word	0x080054a3
 8005468:	08005493 	.word	0x08005493
 800546c:	080054a3 	.word	0x080054a3
 8005470:	080054a3 	.word	0x080054a3
 8005474:	080054a3 	.word	0x080054a3
 8005478:	0800549b 	.word	0x0800549b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800547c:	f7fd fe70 	bl	8003160 <HAL_RCC_GetPCLK1Freq>
 8005480:	61b8      	str	r0, [r7, #24]
        break;
 8005482:	e013      	b.n	80054ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005484:	f7fd fe80 	bl	8003188 <HAL_RCC_GetPCLK2Freq>
 8005488:	61b8      	str	r0, [r7, #24]
        break;
 800548a:	e00f      	b.n	80054ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800548c:	4b4b      	ldr	r3, [pc, #300]	; (80055bc <UART_SetConfig+0x4c4>)
 800548e:	61bb      	str	r3, [r7, #24]
        break;
 8005490:	e00c      	b.n	80054ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005492:	f7fd fd53 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8005496:	61b8      	str	r0, [r7, #24]
        break;
 8005498:	e008      	b.n	80054ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800549a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800549e:	61bb      	str	r3, [r7, #24]
        break;
 80054a0:	e004      	b.n	80054ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	77bb      	strb	r3, [r7, #30]
        break;
 80054aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d074      	beq.n	800559c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	005a      	lsls	r2, r3, #1
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	085b      	lsrs	r3, r3, #1
 80054bc:	441a      	add	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b0f      	cmp	r3, #15
 80054cc:	d916      	bls.n	80054fc <UART_SetConfig+0x404>
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d4:	d212      	bcs.n	80054fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	f023 030f 	bic.w	r3, r3, #15
 80054de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	085b      	lsrs	r3, r3, #1
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	89fb      	ldrh	r3, [r7, #14]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	89fa      	ldrh	r2, [r7, #14]
 80054f8:	60da      	str	r2, [r3, #12]
 80054fa:	e04f      	b.n	800559c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	77bb      	strb	r3, [r7, #30]
 8005500:	e04c      	b.n	800559c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005502:	7ffb      	ldrb	r3, [r7, #31]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d828      	bhi.n	800555a <UART_SetConfig+0x462>
 8005508:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <UART_SetConfig+0x418>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	08005535 	.word	0x08005535
 8005514:	0800553d 	.word	0x0800553d
 8005518:	08005545 	.word	0x08005545
 800551c:	0800555b 	.word	0x0800555b
 8005520:	0800554b 	.word	0x0800554b
 8005524:	0800555b 	.word	0x0800555b
 8005528:	0800555b 	.word	0x0800555b
 800552c:	0800555b 	.word	0x0800555b
 8005530:	08005553 	.word	0x08005553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005534:	f7fd fe14 	bl	8003160 <HAL_RCC_GetPCLK1Freq>
 8005538:	61b8      	str	r0, [r7, #24]
        break;
 800553a:	e013      	b.n	8005564 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800553c:	f7fd fe24 	bl	8003188 <HAL_RCC_GetPCLK2Freq>
 8005540:	61b8      	str	r0, [r7, #24]
        break;
 8005542:	e00f      	b.n	8005564 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005544:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <UART_SetConfig+0x4c4>)
 8005546:	61bb      	str	r3, [r7, #24]
        break;
 8005548:	e00c      	b.n	8005564 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800554a:	f7fd fcf7 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 800554e:	61b8      	str	r0, [r7, #24]
        break;
 8005550:	e008      	b.n	8005564 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005556:	61bb      	str	r3, [r7, #24]
        break;
 8005558:	e004      	b.n	8005564 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	77bb      	strb	r3, [r7, #30]
        break;
 8005562:	bf00      	nop
    }

    if (pclk != 0U)
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d018      	beq.n	800559c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	085a      	lsrs	r2, r3, #1
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	441a      	add	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	fbb2 f3f3 	udiv	r3, r2, r3
 800557c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b0f      	cmp	r3, #15
 8005582:	d909      	bls.n	8005598 <UART_SetConfig+0x4a0>
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558a:	d205      	bcs.n	8005598 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	b29a      	uxth	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60da      	str	r2, [r3, #12]
 8005596:	e001      	b.n	800559c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80055a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3720      	adds	r7, #32
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40007c00 	.word	0x40007c00
 80055b8:	40023800 	.word	0x40023800
 80055bc:	00f42400 	.word	0x00f42400

080055c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	f003 0310 	and.w	r3, r3, #16
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01a      	beq.n	80056d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056be:	d10a      	bne.n	80056d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	605a      	str	r2, [r3, #4]
  }
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af02      	add	r7, sp, #8
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005714:	f7fb ffbe 	bl	8001694 <HAL_GetTick>
 8005718:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b08      	cmp	r3, #8
 8005726:	d10e      	bne.n	8005746 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f81b 	bl	8005772 <UART_WaitOnFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e011      	b.n	800576a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b09c      	sub	sp, #112	; 0x70
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	603b      	str	r3, [r7, #0]
 800577e:	4613      	mov	r3, r2
 8005780:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005782:	e0a7      	b.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578a:	f000 80a3 	beq.w	80058d4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800578e:	f7fb ff81 	bl	8001694 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800579a:	429a      	cmp	r2, r3
 800579c:	d302      	bcc.n	80057a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800579e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d13f      	bne.n	8005824 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ac:	e853 3f00 	ldrex	r3, [r3]
 80057b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057b8:	667b      	str	r3, [r7, #100]	; 0x64
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057c4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e6      	bne.n	80057a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3308      	adds	r3, #8
 80057dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e8:	f023 0301 	bic.w	r3, r3, #1
 80057ec:	663b      	str	r3, [r7, #96]	; 0x60
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3308      	adds	r3, #8
 80057f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80057f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e5      	bne.n	80057d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e068      	b.n	80058f6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b00      	cmp	r3, #0
 8005830:	d050      	beq.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800583c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005840:	d148      	bne.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800584a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005860:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586a:	637b      	str	r3, [r7, #52]	; 0x34
 800586c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005872:	e841 2300 	strex	r3, r2, [r1]
 8005876:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e6      	bne.n	800584c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3308      	adds	r3, #8
 8005884:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	613b      	str	r3, [r7, #16]
   return(result);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f023 0301 	bic.w	r3, r3, #1
 8005894:	66bb      	str	r3, [r7, #104]	; 0x68
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3308      	adds	r3, #8
 800589c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800589e:	623a      	str	r2, [r7, #32]
 80058a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	69f9      	ldr	r1, [r7, #28]
 80058a4:	6a3a      	ldr	r2, [r7, #32]
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e5      	bne.n	800587e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e010      	b.n	80058f6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69da      	ldr	r2, [r3, #28]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	4013      	ands	r3, r2
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	bf0c      	ite	eq
 80058e4:	2301      	moveq	r3, #1
 80058e6:	2300      	movne	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	f43f af48 	beq.w	8005784 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3770      	adds	r7, #112	; 0x70
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b096      	sub	sp, #88	; 0x58
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	4613      	mov	r3, r2
 800590c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	88fa      	ldrh	r2, [r7, #6]
 8005918:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2222      	movs	r2, #34	; 0x22
 8005928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005930:	2b00      	cmp	r3, #0
 8005932:	d028      	beq.n	8005986 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005938:	4a3e      	ldr	r2, [pc, #248]	; (8005a34 <UART_Start_Receive_DMA+0x134>)
 800593a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005940:	4a3d      	ldr	r2, [pc, #244]	; (8005a38 <UART_Start_Receive_DMA+0x138>)
 8005942:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005948:	4a3c      	ldr	r2, [pc, #240]	; (8005a3c <UART_Start_Receive_DMA+0x13c>)
 800594a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005950:	2200      	movs	r2, #0
 8005952:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3324      	adds	r3, #36	; 0x24
 800595e:	4619      	mov	r1, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005964:	461a      	mov	r2, r3
 8005966:	88fb      	ldrh	r3, [r7, #6]
 8005968:	f7fc f884 	bl	8001a74 <HAL_DMA_Start_IT>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2210      	movs	r2, #16
 8005976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e051      	b.n	8005a2a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d018      	beq.n	80059c0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800599c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059a2:	657b      	str	r3, [r7, #84]	; 0x54
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80059ae:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e6      	bne.n	800598e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3308      	adds	r3, #8
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	f043 0301 	orr.w	r3, r3, #1
 80059d6:	653b      	str	r3, [r7, #80]	; 0x50
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3308      	adds	r3, #8
 80059de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059e0:	637a      	str	r2, [r7, #52]	; 0x34
 80059e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e5      	bne.n	80059c0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3308      	adds	r3, #8
 80059fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	e853 3f00 	ldrex	r3, [r3]
 8005a02:	613b      	str	r3, [r7, #16]
   return(result);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3308      	adds	r3, #8
 8005a12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a14:	623a      	str	r2, [r7, #32]
 8005a16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	69f9      	ldr	r1, [r7, #28]
 8005a1a:	6a3a      	ldr	r2, [r7, #32]
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e5      	bne.n	80059f4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3758      	adds	r7, #88	; 0x58
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	08005c07 	.word	0x08005c07
 8005a38:	08005d2f 	.word	0x08005d2f
 8005a3c:	08005d6d 	.word	0x08005d6d

08005a40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b089      	sub	sp, #36	; 0x24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a5c:	61fb      	str	r3, [r7, #28]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	61bb      	str	r3, [r7, #24]
 8005a68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6979      	ldr	r1, [r7, #20]
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	613b      	str	r3, [r7, #16]
   return(result);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e6      	bne.n	8005a48 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005a80:	bf00      	nop
 8005a82:	3724      	adds	r7, #36	; 0x24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b095      	sub	sp, #84	; 0x54
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ab4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e6      	bne.n	8005a94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3308      	adds	r3, #8
 8005acc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	f023 0301 	bic.w	r3, r3, #1
 8005adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ae8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e5      	bne.n	8005ac6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d118      	bne.n	8005b34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f023 0310 	bic.w	r3, r3, #16
 8005b16:	647b      	str	r3, [r7, #68]	; 0x44
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	6979      	ldr	r1, [r7, #20]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e6      	bne.n	8005b02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b48:	bf00      	nop
 8005b4a:	3754      	adds	r7, #84	; 0x54
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b090      	sub	sp, #64	; 0x40
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6a:	d037      	beq.n	8005bdc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8005b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3308      	adds	r3, #8
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	e853 3f00 	ldrex	r3, [r3]
 8005b82:	623b      	str	r3, [r7, #32]
   return(result);
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3308      	adds	r3, #8
 8005b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b94:	633a      	str	r2, [r7, #48]	; 0x30
 8005b96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b9c:	e841 2300 	strex	r3, r2, [r1]
 8005ba0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e5      	bne.n	8005b74 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc6:	61fb      	str	r3, [r7, #28]
 8005bc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	69b9      	ldr	r1, [r7, #24]
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e6      	bne.n	8005ba8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bda:	e002      	b.n	8005be2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8005bdc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005bde:	f7fa fd8d 	bl	80006fc <HAL_UART_TxCpltCallback>
}
 8005be2:	bf00      	nop
 8005be4:	3740      	adds	r7, #64	; 0x40
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f7ff fa5d 	bl	80050b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b09c      	sub	sp, #112	; 0x70
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c1c:	d071      	beq.n	8005d02 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8005c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c44:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e6      	bne.n	8005c26 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6a:	f023 0301 	bic.w	r3, r3, #1
 8005c6e:	667b      	str	r3, [r7, #100]	; 0x64
 8005c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3308      	adds	r3, #8
 8005c76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c78:	647a      	str	r2, [r7, #68]	; 0x44
 8005c7a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e5      	bne.n	8005c58 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3308      	adds	r3, #8
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3308      	adds	r3, #8
 8005caa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cac:	633a      	str	r2, [r7, #48]	; 0x30
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e5      	bne.n	8005c8c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d118      	bne.n	8005d02 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f023 0310 	bic.w	r3, r3, #16
 8005ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	69b9      	ldr	r1, [r7, #24]
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	617b      	str	r3, [r7, #20]
   return(result);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e6      	bne.n	8005cd0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d04:	2200      	movs	r2, #0
 8005d06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d107      	bne.n	8005d20 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d16:	4619      	mov	r1, r3
 8005d18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005d1a:	f7ff f9e1 	bl	80050e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d1e:	e002      	b.n	8005d26 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8005d20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005d22:	f7fa fcc3 	bl	80006ac <HAL_UART_RxCpltCallback>
}
 8005d26:	bf00      	nop
 8005d28:	3770      	adds	r7, #112	; 0x70
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d109      	bne.n	8005d5e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d50:	085b      	lsrs	r3, r3, #1
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	4619      	mov	r1, r3
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff f9c2 	bl	80050e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d5c:	e002      	b.n	8005d64 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f7fa fc9a 	bl	8000698 <HAL_UART_RxHalfCpltCallback>
}
 8005d64:	bf00      	nop
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d7e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d92:	2b80      	cmp	r3, #128	; 0x80
 8005d94:	d109      	bne.n	8005daa <UART_DMAError+0x3e>
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	2b21      	cmp	r3, #33	; 0x21
 8005d9a:	d106      	bne.n	8005daa <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005da4:	6978      	ldr	r0, [r7, #20]
 8005da6:	f7ff fe4b 	bl	8005a40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db4:	2b40      	cmp	r3, #64	; 0x40
 8005db6:	d109      	bne.n	8005dcc <UART_DMAError+0x60>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b22      	cmp	r3, #34	; 0x22
 8005dbc:	d106      	bne.n	8005dcc <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005dc6:	6978      	ldr	r0, [r7, #20]
 8005dc8:	f7ff fe60 	bl	8005a8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dd2:	f043 0210 	orr.w	r2, r3, #16
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ddc:	6978      	ldr	r0, [r7, #20]
 8005dde:	f7ff f975 	bl	80050cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de2:	bf00      	nop
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f7ff f95f 	bl	80050cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e0e:	bf00      	nop
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b088      	sub	sp, #32
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	e853 3f00 	ldrex	r3, [r3]
 8005e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	61bb      	str	r3, [r7, #24]
 8005e3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	6979      	ldr	r1, [r7, #20]
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	e841 2300 	strex	r3, r2, [r1]
 8005e48:	613b      	str	r3, [r7, #16]
   return(result);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1e6      	bne.n	8005e1e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2220      	movs	r2, #32
 8005e54:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7fa fc4d 	bl	80006fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e62:	bf00      	nop
 8005e64:	3720      	adds	r7, #32
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
	...

08005e6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	f107 001c 	add.w	r0, r7, #28
 8005e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d126      	bne.n	8005ed2 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	4b38      	ldr	r3, [pc, #224]	; (8005f78 <USB_CoreInit+0x10c>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f043 0210 	orr.w	r2, r3, #16
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d105      	bne.n	8005ec6 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fad0 	bl	800646c <USB_CoreReset>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	73fb      	strb	r3, [r7, #15]
 8005ed0:	e03a      	b.n	8005f48 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d126      	bne.n	8005f26 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	4b23      	ldr	r3, [pc, #140]	; (8005f78 <USB_CoreInit+0x10c>)
 8005eea:	4013      	ands	r3, r2
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f023 0210 	bic.w	r2, r3, #16
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8005f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d105      	bne.n	8005f1a <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 faa6 	bl	800646c <USB_CoreReset>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73fb      	strb	r3, [r7, #15]
 8005f24:	e010      	b.n	8005f48 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fa9a 	bl	800646c <USB_CoreReset>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d10b      	bne.n	8005f66 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f043 0206 	orr.w	r2, r3, #6
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f043 0220 	orr.w	r2, r3, #32
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f72:	b004      	add	sp, #16
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	ffbdffbf 	.word	0xffbdffbf

08005f7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f023 0201 	bic.w	r2, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d115      	bne.n	8005fec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fcc:	2001      	movs	r0, #1
 8005fce:	f7fb fb6d 	bl	80016ac <HAL_Delay>
      ms++;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fa39 	bl	8006450 <USB_GetMode>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d01e      	beq.n	8006022 <USB_SetCurrentMode+0x84>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2b31      	cmp	r3, #49	; 0x31
 8005fe8:	d9f0      	bls.n	8005fcc <USB_SetCurrentMode+0x2e>
 8005fea:	e01a      	b.n	8006022 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d115      	bne.n	800601e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ffe:	2001      	movs	r0, #1
 8006000:	f7fb fb54 	bl	80016ac <HAL_Delay>
      ms++;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	3301      	adds	r3, #1
 8006008:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fa20 	bl	8006450 <USB_GetMode>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <USB_SetCurrentMode+0x84>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b31      	cmp	r3, #49	; 0x31
 800601a:	d9f0      	bls.n	8005ffe <USB_SetCurrentMode+0x60>
 800601c:	e001      	b.n	8006022 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e005      	b.n	800602e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b32      	cmp	r3, #50	; 0x32
 8006026:	d101      	bne.n	800602c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006038:	b084      	sub	sp, #16
 800603a:	b580      	push	{r7, lr}
 800603c:	b086      	sub	sp, #24
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006052:	2300      	movs	r3, #0
 8006054:	613b      	str	r3, [r7, #16]
 8006056:	e009      	b.n	800606c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	3340      	adds	r3, #64	; 0x40
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	2200      	movs	r2, #0
 8006064:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	3301      	adds	r3, #1
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b0e      	cmp	r3, #14
 8006070:	d9f2      	bls.n	8006058 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d11c      	bne.n	80060b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006086:	f043 0302 	orr.w	r3, r3, #2
 800608a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	e005      	b.n	80060be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060c4:	461a      	mov	r2, r3
 80060c6:	2300      	movs	r3, #0
 80060c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d0:	4619      	mov	r1, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d8:	461a      	mov	r2, r3
 80060da:	680b      	ldr	r3, [r1, #0]
 80060dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d10c      	bne.n	80060fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d104      	bne.n	80060f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060ea:	2100      	movs	r1, #0
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f975 	bl	80063dc <USB_SetDevSpeed>
 80060f2:	e018      	b.n	8006126 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060f4:	2101      	movs	r1, #1
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f970 	bl	80063dc <USB_SetDevSpeed>
 80060fc:	e013      	b.n	8006126 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80060fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006100:	2b03      	cmp	r3, #3
 8006102:	d10c      	bne.n	800611e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d104      	bne.n	8006114 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800610a:	2100      	movs	r1, #0
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f965 	bl	80063dc <USB_SetDevSpeed>
 8006112:	e008      	b.n	8006126 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006114:	2101      	movs	r1, #1
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f960 	bl	80063dc <USB_SetDevSpeed>
 800611c:	e003      	b.n	8006126 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800611e:	2103      	movs	r1, #3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f95b 	bl	80063dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006126:	2110      	movs	r1, #16
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f8f3 	bl	8006314 <USB_FlushTxFifo>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f91f 	bl	800637c <USB_FlushRxFifo>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614e:	461a      	mov	r2, r3
 8006150:	2300      	movs	r3, #0
 8006152:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615a:	461a      	mov	r2, r3
 800615c:	2300      	movs	r3, #0
 800615e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006166:	461a      	mov	r2, r3
 8006168:	2300      	movs	r3, #0
 800616a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800616c:	2300      	movs	r3, #0
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	e043      	b.n	80061fa <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006188:	d118      	bne.n	80061bc <USB_DevInit+0x184>
    {
      if (i == 0U)
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619c:	461a      	mov	r2, r3
 800619e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	e013      	b.n	80061ce <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b2:	461a      	mov	r2, r3
 80061b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	e008      	b.n	80061ce <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c8:	461a      	mov	r2, r3
 80061ca:	2300      	movs	r3, #0
 80061cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061da:	461a      	mov	r2, r3
 80061dc:	2300      	movs	r3, #0
 80061de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ec:	461a      	mov	r2, r3
 80061ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	3301      	adds	r3, #1
 80061f8:	613b      	str	r3, [r7, #16]
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d3b7      	bcc.n	8006172 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006202:	2300      	movs	r3, #0
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	e043      	b.n	8006290 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800621a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800621e:	d118      	bne.n	8006252 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006232:	461a      	mov	r2, r3
 8006234:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	e013      	b.n	8006264 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006248:	461a      	mov	r2, r3
 800624a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	e008      	b.n	8006264 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625e:	461a      	mov	r2, r3
 8006260:	2300      	movs	r3, #0
 8006262:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006270:	461a      	mov	r2, r3
 8006272:	2300      	movs	r3, #0
 8006274:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006282:	461a      	mov	r2, r3
 8006284:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006288:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	3301      	adds	r3, #1
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	429a      	cmp	r2, r3
 8006296:	d3b7      	bcc.n	8006208 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80062b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d105      	bne.n	80062cc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f043 0210 	orr.w	r2, r3, #16
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	699a      	ldr	r2, [r3, #24]
 80062d0:	4b0e      	ldr	r3, [pc, #56]	; (800630c <USB_DevInit+0x2d4>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	f043 0208 	orr.w	r2, r3, #8
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d105      	bne.n	80062fc <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699a      	ldr	r2, [r3, #24]
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <USB_DevInit+0x2d8>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006308:	b004      	add	sp, #16
 800630a:	4770      	bx	lr
 800630c:	803c3800 	.word	0x803c3800
 8006310:	40000004 	.word	0x40000004

08006314 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3301      	adds	r3, #1
 8006326:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4a13      	ldr	r2, [pc, #76]	; (8006378 <USB_FlushTxFifo+0x64>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d901      	bls.n	8006334 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e01b      	b.n	800636c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	daf2      	bge.n	8006322 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	019b      	lsls	r3, r3, #6
 8006344:	f043 0220 	orr.w	r2, r3, #32
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3301      	adds	r3, #1
 8006350:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4a08      	ldr	r2, [pc, #32]	; (8006378 <USB_FlushTxFifo+0x64>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d901      	bls.n	800635e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e006      	b.n	800636c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b20      	cmp	r3, #32
 8006368:	d0f0      	beq.n	800634c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	00030d40 	.word	0x00030d40

0800637c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4a11      	ldr	r2, [pc, #68]	; (80063d8 <USB_FlushRxFifo+0x5c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d901      	bls.n	800639a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e018      	b.n	80063cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	daf2      	bge.n	8006388 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2210      	movs	r2, #16
 80063aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4a08      	ldr	r2, [pc, #32]	; (80063d8 <USB_FlushRxFifo+0x5c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d901      	bls.n	80063be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e006      	b.n	80063cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0310 	and.w	r3, r3, #16
 80063c6:	2b10      	cmp	r3, #16
 80063c8:	d0f0      	beq.n	80063ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	00030d40 	.word	0x00030d40

080063dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	68f9      	ldr	r1, [r7, #12]
 80063f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063fc:	4313      	orrs	r3, r2
 80063fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800640e:	b480      	push	{r7}
 8006410:	b085      	sub	sp, #20
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006428:	f023 0303 	bic.w	r3, r3, #3
 800642c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800643c:	f043 0302 	orr.w	r3, r3, #2
 8006440:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	f003 0301 	and.w	r3, r3, #1
}
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3301      	adds	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4a13      	ldr	r2, [pc, #76]	; (80064d0 <USB_CoreReset+0x64>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d901      	bls.n	800648a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e01b      	b.n	80064c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	daf2      	bge.n	8006478 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f043 0201 	orr.w	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3301      	adds	r3, #1
 80064a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4a09      	ldr	r2, [pc, #36]	; (80064d0 <USB_CoreReset+0x64>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d901      	bls.n	80064b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e006      	b.n	80064c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d0f0      	beq.n	80064a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	00030d40 	.word	0x00030d40

080064d4 <crc8_calc>:
    }
    sbufWriteU16(dst, crc);
}

uint8_t crc8_calc(uint8_t crc, unsigned char a, uint8_t poly)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	4603      	mov	r3, r0
 80064dc:	71fb      	strb	r3, [r7, #7]
 80064de:	460b      	mov	r3, r1
 80064e0:	71bb      	strb	r3, [r7, #6]
 80064e2:	4613      	mov	r3, r2
 80064e4:	717b      	strb	r3, [r7, #5]
    crc ^= a;
 80064e6:	79fa      	ldrb	r2, [r7, #7]
 80064e8:	79bb      	ldrb	r3, [r7, #6]
 80064ea:	4053      	eors	r3, r2
 80064ec:	71fb      	strb	r3, [r7, #7]
    for (int ii = 0; ii < 8; ++ii) {
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	e012      	b.n	800651a <crc8_calc+0x46>
        if (crc & 0x80) {
 80064f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	da08      	bge.n	800650e <crc8_calc+0x3a>
            crc = (crc << 1) ^ poly;
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	b25a      	sxtb	r2, r3
 8006502:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006506:	4053      	eors	r3, r2
 8006508:	b25b      	sxtb	r3, r3
 800650a:	71fb      	strb	r3, [r7, #7]
 800650c:	e002      	b.n	8006514 <crc8_calc+0x40>
        } else {
            crc = crc << 1;
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	71fb      	strb	r3, [r7, #7]
    for (int ii = 0; ii < 8; ++ii) {
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3301      	adds	r3, #1
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b07      	cmp	r3, #7
 800651e:	dde9      	ble.n	80064f4 <crc8_calc+0x20>
        }
    }
    return crc;
 8006520:	79fb      	ldrb	r3, [r7, #7]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <crc8_sbuf_append>:
    }
    return crc;
}

void crc8_sbuf_append(sbuf_t *dst, uint8_t *start, uint8_t poly)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b088      	sub	sp, #32
 8006532:	af00      	add	r7, sp, #0
 8006534:	60f8      	str	r0, [r7, #12]
 8006536:	60b9      	str	r1, [r7, #8]
 8006538:	4613      	mov	r3, r2
 800653a:	71fb      	strb	r3, [r7, #7]
    uint8_t crc = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	77fb      	strb	r3, [r7, #31]
    const uint8_t * const end = dst->ptr;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	617b      	str	r3, [r7, #20]
    for (const uint8_t *ptr = start; ptr < end; ++ptr) {
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	e00b      	b.n	8006564 <crc8_sbuf_append+0x36>
        crc = crc8_calc(crc, *ptr, poly);
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	7819      	ldrb	r1, [r3, #0]
 8006550:	79fa      	ldrb	r2, [r7, #7]
 8006552:	7ffb      	ldrb	r3, [r7, #31]
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff ffbd 	bl	80064d4 <crc8_calc>
 800655a:	4603      	mov	r3, r0
 800655c:	77fb      	strb	r3, [r7, #31]
    for (const uint8_t *ptr = start; ptr < end; ++ptr) {
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	3301      	adds	r3, #1
 8006562:	61bb      	str	r3, [r7, #24]
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	429a      	cmp	r2, r3
 800656a:	d3ef      	bcc.n	800654c <crc8_sbuf_append+0x1e>
    }
    sbufWriteU8(dst, crc);
 800656c:	7ffb      	ldrb	r3, [r7, #31]
 800656e:	4619      	mov	r1, r3
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f804 	bl	800657e <sbufWriteU8>
}
 8006576:	bf00      	nop
 8006578:	3720      	adds	r7, #32
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <sbufWriteU8>:
    sbuf->end = end;
    return sbuf;
}

void sbufWriteU8(sbuf_t *dst, uint8_t val)
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	460b      	mov	r3, r1
 8006588:	70fb      	strb	r3, [r7, #3]
    *dst->ptr++ = val;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	1c59      	adds	r1, r3, #1
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6011      	str	r1, [r2, #0]
 8006594:	78fa      	ldrb	r2, [r7, #3]
 8006596:	701a      	strb	r2, [r3, #0]
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <sbufWriteU16BigEndian>:
    sbufWriteU8(dst, val >> 16);
    sbufWriteU8(dst, val >> 24);
}

void sbufWriteU16BigEndian(sbuf_t *dst, uint16_t val)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	807b      	strh	r3, [r7, #2]
    sbufWriteU8(dst, val >> 8);
 80065b0:	887b      	ldrh	r3, [r7, #2]
 80065b2:	0a1b      	lsrs	r3, r3, #8
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff ffdf 	bl	800657e <sbufWriteU8>
    sbufWriteU8(dst, (uint8_t)val);
 80065c0:	887b      	ldrh	r3, [r7, #2]
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff ffd9 	bl	800657e <sbufWriteU8>
}
 80065cc:	bf00      	nop
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <sbufWriteU32BigEndian>:

void sbufWriteU32BigEndian(sbuf_t *dst, uint32_t val)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
    sbufWriteU8(dst, val >> 24);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	0e1b      	lsrs	r3, r3, #24
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff ffc9 	bl	800657e <sbufWriteU8>
    sbufWriteU8(dst, val >> 16);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	0c1b      	lsrs	r3, r3, #16
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff ffc2 	bl	800657e <sbufWriteU8>
    sbufWriteU8(dst, val >> 8);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	0a1b      	lsrs	r3, r3, #8
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff ffbb 	bl	800657e <sbufWriteU8>
    sbufWriteU8(dst, (uint8_t)val);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	4619      	mov	r1, r3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7ff ffb5 	bl	800657e <sbufWriteU8>
}
 8006614:	bf00      	nop
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <sbufWriteData>:
    memset(dst->ptr, data, len);
    dst->ptr += len;
}

void sbufWriteData(sbuf_t *dst, const void *data, int len)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
    memcpy(dst->ptr, data, len);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	68b9      	ldr	r1, [r7, #8]
 8006630:	4618      	mov	r0, r3
 8006632:	f000 fff5 	bl	8007620 <memcpy>
    dst->ptr += len;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	441a      	add	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	601a      	str	r2, [r3, #0]
}
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <sbufWriteString>:

void sbufWriteString(sbuf_t *dst, const char *string)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]
    sbufWriteData(dst, string, strlen(string));
 8006654:	6838      	ldr	r0, [r7, #0]
 8006656:	f7f9 fde3 	bl	8000220 <strlen>
 800665a:	4603      	mov	r3, r0
 800665c:	461a      	mov	r2, r3
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff ffdb 	bl	800661c <sbufWriteData>
}
 8006666:	bf00      	nop
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <sbufWriteStringWithZeroTerminator>:

void sbufWriteStringWithZeroTerminator(sbuf_t *dst, const char *string)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b082      	sub	sp, #8
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	6039      	str	r1, [r7, #0]
    sbufWriteData(dst, string, strlen(string) + 1);
 8006678:	6838      	ldr	r0, [r7, #0]
 800667a:	f7f9 fdd1 	bl	8000220 <strlen>
 800667e:	4603      	mov	r3, r0
 8006680:	3301      	adds	r3, #1
 8006682:	461a      	mov	r2, r3
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff ffc8 	bl	800661c <sbufWriteData>
}
 800668c:	bf00      	nop
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <sbufBytesRemaining>:
}

// reader - return bytes remaining in buffer
// writer - return available space
int sbufBytesRemaining(sbuf_t *buf)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
    return buf->end - buf->ptr;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	1ad3      	subs	r3, r2, r3
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <sbufPtr>:

uint8_t* sbufPtr(sbuf_t *buf)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
    return buf->ptr;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <sbufSwitchToReader>:
    buf->ptr += size;
}

// modifies streambuf so that written data are prepared for reading
void sbufSwitchToReader(sbuf_t *buf, uint8_t *base)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
    buf->end = buf->ptr;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	605a      	str	r2, [r3, #4]
    buf->ptr = base;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	601a      	str	r2, [r3, #0]
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <cmpTimeUs>:
#endif

#define TIMEZONE_OFFSET_MINUTES_MIN -780  // -13 hours
#define TIMEZONE_OFFSET_MINUTES_MAX 780   // +13 hours

static inline timeDelta_t cmpTimeUs(timeUs_t a, timeUs_t b) { return (timeDelta_t)(a - b); }
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6039      	str	r1, [r7, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	4618      	mov	r0, r3
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
	...

0800670c <handleCrsfLinkStatisticsFrame>:
static crsfLinkStatistics_t crsfLinkStats;
static crsfLinkStatisticsTx_t crsfLinkStatsTx;
//static crsfLinkStatisticsRx_t crsfLinkStatsRx;

static void handleCrsfLinkStatisticsFrame(const crsfLinkStatistics_t* statsPtr, timeUs_t currentTimeUs)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
    const crsfLinkStatistics_t stats = *statsPtr;
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	f107 030c 	add.w	r3, r7, #12
 800671c:	6810      	ldr	r0, [r2, #0]
 800671e:	6851      	ldr	r1, [r2, #4]
 8006720:	c303      	stmia	r3!, {r0, r1}
 8006722:	8912      	ldrh	r2, [r2, #8]
 8006724:	801a      	strh	r2, [r3, #0]
    lastLinkStatisticsFrameUs = currentTimeUs;
 8006726:	4a07      	ldr	r2, [pc, #28]	; (8006744 <handleCrsfLinkStatisticsFrame+0x38>)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	6013      	str	r3, [r2, #0]
    memcpy(&crsfLinkStats, &stats, sizeof(crsfLinkStatistics_t));
 800672c:	4b06      	ldr	r3, [pc, #24]	; (8006748 <handleCrsfLinkStatisticsFrame+0x3c>)
 800672e:	f107 020c 	add.w	r2, r7, #12
 8006732:	ca07      	ldmia	r2, {r0, r1, r2}
 8006734:	c303      	stmia	r3!, {r0, r1}
 8006736:	801a      	strh	r2, [r3, #0]
}
 8006738:	bf00      	nop
 800673a:	371c      	adds	r7, #28
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	20000978 	.word	0x20000978
 8006748:	2000097c 	.word	0x2000097c

0800674c <handleCrsfLinkStatisticsTxFrame>:

static void handleCrsfLinkStatisticsTxFrame(const crsfLinkStatisticsTx_t* statsPtr, timeUs_t currentTimeUs)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
    const crsfLinkStatisticsTx_t stats = *statsPtr;
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	f107 0308 	add.w	r3, r7, #8
 800675c:	6810      	ldr	r0, [r2, #0]
 800675e:	6018      	str	r0, [r3, #0]
 8006760:	8892      	ldrh	r2, [r2, #4]
 8006762:	809a      	strh	r2, [r3, #4]
    lastLinkStatisticsFrameUs = currentTimeUs;
 8006764:	4a08      	ldr	r2, [pc, #32]	; (8006788 <handleCrsfLinkStatisticsTxFrame+0x3c>)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6013      	str	r3, [r2, #0]
    memcpy(&crsfLinkStatsTx, &stats, sizeof(crsfLinkStatisticsTx_t));
 800676a:	4b08      	ldr	r3, [pc, #32]	; (800678c <handleCrsfLinkStatisticsTxFrame+0x40>)
 800676c:	f107 0208 	add.w	r2, r7, #8
 8006770:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006774:	6018      	str	r0, [r3, #0]
 8006776:	3304      	adds	r3, #4
 8006778:	8019      	strh	r1, [r3, #0]
}
 800677a:	bf00      	nop
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	20000978 	.word	0x20000978
 800678c:	20000988 	.word	0x20000988

08006790 <crsfCheckRssi>:

#endif

#if defined(USE_CRSF_LINK_STATISTICS)
static void crsfCheckRssi(uint32_t currentTimeUs)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
//        if (linkQualitySource == LQ_SOURCE_RX_PROTOCOL_CRSF) {
////            setLinkQualityDirect(0);
//        }
//#endif
//    }
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <crsfFrameCRC>:
#endif

static uint8_t crsfFrameCRC(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
    // CRC includes type and payload
    uint8_t crc = crc8_dvb_s2(0, crsfFrame.frame.type);
 80067aa:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <crsfFrameCRC+0x54>)
 80067ac:	789b      	ldrb	r3, [r3, #2]
 80067ae:	22d5      	movs	r2, #213	; 0xd5
 80067b0:	4619      	mov	r1, r3
 80067b2:	2000      	movs	r0, #0
 80067b4:	f7ff fe8e 	bl	80064d4 <crc8_calc>
 80067b8:	4603      	mov	r3, r0
 80067ba:	71fb      	strb	r3, [r7, #7]
    for (int ii = 0; ii < crsfFrame.frame.frameLength - CRSF_FRAME_LENGTH_TYPE_CRC; ++ii) {
 80067bc:	2300      	movs	r3, #0
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	e00e      	b.n	80067e0 <crsfFrameCRC+0x3c>
        crc = crc8_dvb_s2(crc, crsfFrame.frame.payload[ii]);
 80067c2:	4a0d      	ldr	r2, [pc, #52]	; (80067f8 <crsfFrameCRC+0x54>)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	4413      	add	r3, r2
 80067c8:	3303      	adds	r3, #3
 80067ca:	7819      	ldrb	r1, [r3, #0]
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	22d5      	movs	r2, #213	; 0xd5
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff fe7f 	bl	80064d4 <crc8_calc>
 80067d6:	4603      	mov	r3, r0
 80067d8:	71fb      	strb	r3, [r7, #7]
    for (int ii = 0; ii < crsfFrame.frame.frameLength - CRSF_FRAME_LENGTH_TYPE_CRC; ++ii) {
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	3301      	adds	r3, #1
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	4b05      	ldr	r3, [pc, #20]	; (80067f8 <crsfFrameCRC+0x54>)
 80067e2:	785b      	ldrb	r3, [r3, #1]
 80067e4:	3b02      	subs	r3, #2
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	dbea      	blt.n	80067c2 <crsfFrameCRC+0x1e>
    }
    return crc;
 80067ec:	79fb      	ldrb	r3, [r7, #7]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000864 	.word	0x20000864

080067fc <crsfFrameCmdCRC>:

#if defined(USE_CRSF_V3) || defined(UNIT_TEST)
static uint8_t crsfFrameCmdCRC(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
    // CRC includes type and payload
    uint8_t crc = crc8_poly_0xba(0, crsfFrame.frame.type);
 8006802:	4b13      	ldr	r3, [pc, #76]	; (8006850 <crsfFrameCmdCRC+0x54>)
 8006804:	789b      	ldrb	r3, [r3, #2]
 8006806:	22ba      	movs	r2, #186	; 0xba
 8006808:	4619      	mov	r1, r3
 800680a:	2000      	movs	r0, #0
 800680c:	f7ff fe62 	bl	80064d4 <crc8_calc>
 8006810:	4603      	mov	r3, r0
 8006812:	71fb      	strb	r3, [r7, #7]
    for (int ii = 0; ii < crsfFrame.frame.frameLength - CRSF_FRAME_LENGTH_TYPE_CRC - 1; ++ii) {
 8006814:	2300      	movs	r3, #0
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	e00e      	b.n	8006838 <crsfFrameCmdCRC+0x3c>
        crc = crc8_poly_0xba(crc, crsfFrame.frame.payload[ii]);
 800681a:	4a0d      	ldr	r2, [pc, #52]	; (8006850 <crsfFrameCmdCRC+0x54>)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	4413      	add	r3, r2
 8006820:	3303      	adds	r3, #3
 8006822:	7819      	ldrb	r1, [r3, #0]
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	22ba      	movs	r2, #186	; 0xba
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff fe53 	bl	80064d4 <crc8_calc>
 800682e:	4603      	mov	r3, r0
 8006830:	71fb      	strb	r3, [r7, #7]
    for (int ii = 0; ii < crsfFrame.frame.frameLength - CRSF_FRAME_LENGTH_TYPE_CRC - 1; ++ii) {
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	3301      	adds	r3, #1
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	4b05      	ldr	r3, [pc, #20]	; (8006850 <crsfFrameCmdCRC+0x54>)
 800683a:	785b      	ldrb	r3, [r3, #1]
 800683c:	3b03      	subs	r3, #3
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	429a      	cmp	r2, r3
 8006842:	dbea      	blt.n	800681a <crsfFrameCmdCRC+0x1e>
    }
    return crc;
 8006844:	79fb      	ldrb	r3, [r7, #7]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20000864 	.word	0x20000864

08006854 <crsfDataReceive>:
#endif

// Receive ISR callback, called back from serial port
 void crsfDataReceive(uint8_t c)
{
 8006854:	b5b0      	push	{r4, r5, r7, lr}
 8006856:	b08a      	sub	sp, #40	; 0x28
 8006858:	af00      	add	r7, sp, #0
 800685a:	4603      	mov	r3, r0
 800685c:	71fb      	strb	r3, [r7, #7]
    static uint8_t crsfFramePosition = 0;
#if defined(USE_CRSF_V3)
    static uint8_t crsfFrameErrorCnt = 0;
#endif
    const timeUs_t currentTimeUs = microsISR();
 800685e:	f7f9 fe89 	bl	8000574 <microsISR>
 8006862:	6278      	str	r0, [r7, #36]	; 0x24

#ifdef DEBUG_CRSF_PACKETS
    debug[2] = currentTimeUs - crsfFrameStartAtUs;
#endif

    if (cmpTimeUs(currentTimeUs, crsfFrameStartAtUs) > CRSF_TIME_NEEDED_PER_FRAME_US) {
 8006864:	4b85      	ldr	r3, [pc, #532]	; (8006a7c <crsfDataReceive+0x228>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4619      	mov	r1, r3
 800686a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800686c:	f7ff ff3f 	bl	80066ee <cmpTimeUs>
 8006870:	4603      	mov	r3, r0
 8006872:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8006876:	4293      	cmp	r3, r2
 8006878:	dd0c      	ble.n	8006894 <crsfDataReceive+0x40>
        // We've received a character after max time needed to complete a frame,
        // so this must be the start of a new frame.
#if defined(USE_CRSF_V3)
        if (crsfFramePosition > 0) {
 800687a:	4b81      	ldr	r3, [pc, #516]	; (8006a80 <crsfDataReceive+0x22c>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d005      	beq.n	800688e <crsfDataReceive+0x3a>
            // count an error if full valid frame not received within the allowed time.
            crsfFrameErrorCnt++;
 8006882:	4b80      	ldr	r3, [pc, #512]	; (8006a84 <crsfDataReceive+0x230>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	3301      	adds	r3, #1
 8006888:	b2da      	uxtb	r2, r3
 800688a:	4b7e      	ldr	r3, [pc, #504]	; (8006a84 <crsfDataReceive+0x230>)
 800688c:	701a      	strb	r2, [r3, #0]
        }
#endif
        crsfFramePosition = 0;
 800688e:	4b7c      	ldr	r3, [pc, #496]	; (8006a80 <crsfDataReceive+0x22c>)
 8006890:	2200      	movs	r2, #0
 8006892:	701a      	strb	r2, [r3, #0]
    }

    if (crsfFramePosition == 0) {
 8006894:	4b7a      	ldr	r3, [pc, #488]	; (8006a80 <crsfDataReceive+0x22c>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <crsfDataReceive+0x4e>
        crsfFrameStartAtUs = currentTimeUs;
 800689c:	4a77      	ldr	r2, [pc, #476]	; (8006a7c <crsfDataReceive+0x228>)
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	6013      	str	r3, [r2, #0]
    }
    // assume frame is 5 bytes long until we have received the frame length
    // full frame length includes the length of the address and framelength fields
    // sometimes we can receive some garbage data. So, we need to check max size for preventing buffer overrun.
    const int fullFrameLength = crsfFramePosition < 3 ? 5 : MIN(crsfFrame.frame.frameLength + CRSF_FRAME_LENGTH_ADDRESS + CRSF_FRAME_LENGTH_FRAMELENGTH, CRSF_FRAME_SIZE_MAX);
 80068a2:	4b77      	ldr	r3, [pc, #476]	; (8006a80 <crsfDataReceive+0x22c>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d90b      	bls.n	80068c2 <crsfDataReceive+0x6e>
 80068aa:	4b77      	ldr	r3, [pc, #476]	; (8006a88 <crsfDataReceive+0x234>)
 80068ac:	785b      	ldrb	r3, [r3, #1]
 80068ae:	3302      	adds	r3, #2
 80068b0:	623b      	str	r3, [r7, #32]
 80068b2:	2340      	movs	r3, #64	; 0x40
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	4293      	cmp	r3, r2
 80068bc:	bfa8      	it	ge
 80068be:	4613      	movge	r3, r2
 80068c0:	e000      	b.n	80068c4 <crsfDataReceive+0x70>
 80068c2:	2305      	movs	r3, #5
 80068c4:	61bb      	str	r3, [r7, #24]

    if (crsfFramePosition < fullFrameLength) {
 80068c6:	4b6e      	ldr	r3, [pc, #440]	; (8006a80 <crsfDataReceive+0x22c>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	4293      	cmp	r3, r2
 80068d0:	f340 80cf 	ble.w	8006a72 <crsfDataReceive+0x21e>
        crsfFrame.bytes[crsfFramePosition++] = (uint8_t)c;
 80068d4:	4b6a      	ldr	r3, [pc, #424]	; (8006a80 <crsfDataReceive+0x22c>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	b2d1      	uxtb	r1, r2
 80068dc:	4a68      	ldr	r2, [pc, #416]	; (8006a80 <crsfDataReceive+0x22c>)
 80068de:	7011      	strb	r1, [r2, #0]
 80068e0:	4619      	mov	r1, r3
 80068e2:	4a69      	ldr	r2, [pc, #420]	; (8006a88 <crsfDataReceive+0x234>)
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	5453      	strb	r3, [r2, r1]
        if (crsfFramePosition >= fullFrameLength) {
 80068e8:	4b65      	ldr	r3, [pc, #404]	; (8006a80 <crsfDataReceive+0x22c>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	461a      	mov	r2, r3
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	4293      	cmp	r3, r2
 80068f2:	f300 80be 	bgt.w	8006a72 <crsfDataReceive+0x21e>
            crsfFramePosition = 0;
 80068f6:	4b62      	ldr	r3, [pc, #392]	; (8006a80 <crsfDataReceive+0x22c>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	701a      	strb	r2, [r3, #0]
            const uint8_t crc = crsfFrameCRC();
 80068fc:	f7ff ff52 	bl	80067a4 <crsfFrameCRC>
 8006900:	4603      	mov	r3, r0
 8006902:	75fb      	strb	r3, [r7, #23]
            if (crc == crsfFrame.bytes[fullFrameLength - 1]) {
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	3b01      	subs	r3, #1
 8006908:	4a5f      	ldr	r2, [pc, #380]	; (8006a88 <crsfDataReceive+0x234>)
 800690a:	5cd3      	ldrb	r3, [r2, r3]
 800690c:	7dfa      	ldrb	r2, [r7, #23]
 800690e:	429a      	cmp	r2, r3
 8006910:	f040 809b 	bne.w	8006a4a <crsfDataReceive+0x1f6>
#if defined(USE_CRSF_V3)
                crsfFrameErrorCnt = 0;
 8006914:	4b5b      	ldr	r3, [pc, #364]	; (8006a84 <crsfDataReceive+0x230>)
 8006916:	2200      	movs	r2, #0
 8006918:	701a      	strb	r2, [r3, #0]
#endif
                switch (crsfFrame.frame.type) {
 800691a:	4b5b      	ldr	r3, [pc, #364]	; (8006a88 <crsfDataReceive+0x234>)
 800691c:	789b      	ldrb	r3, [r3, #2]
 800691e:	3b14      	subs	r3, #20
 8006920:	2b1e      	cmp	r3, #30
 8006922:	f200 809d 	bhi.w	8006a60 <crsfDataReceive+0x20c>
 8006926:	a201      	add	r2, pc, #4	; (adr r2, 800692c <crsfDataReceive+0xd8>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	080069db 	.word	0x080069db
 8006930:	08006a61 	.word	0x08006a61
 8006934:	080069a9 	.word	0x080069a9
 8006938:	080069a9 	.word	0x080069a9
 800693c:	08006a61 	.word	0x08006a61
 8006940:	08006a61 	.word	0x08006a61
 8006944:	08006a61 	.word	0x08006a61
 8006948:	08006a61 	.word	0x08006a61
 800694c:	08006a61 	.word	0x08006a61
 8006950:	08006a01 	.word	0x08006a01
 8006954:	08006a61 	.word	0x08006a61
 8006958:	08006a61 	.word	0x08006a61
 800695c:	08006a61 	.word	0x08006a61
 8006960:	08006a61 	.word	0x08006a61
 8006964:	08006a61 	.word	0x08006a61
 8006968:	08006a61 	.word	0x08006a61
 800696c:	08006a61 	.word	0x08006a61
 8006970:	08006a61 	.word	0x08006a61
 8006974:	08006a61 	.word	0x08006a61
 8006978:	08006a61 	.word	0x08006a61
 800697c:	08006a61 	.word	0x08006a61
 8006980:	08006a61 	.word	0x08006a61
 8006984:	08006a61 	.word	0x08006a61
 8006988:	08006a61 	.word	0x08006a61
 800698c:	08006a61 	.word	0x08006a61
 8006990:	08006a61 	.word	0x08006a61
 8006994:	08006a61 	.word	0x08006a61
 8006998:	08006a61 	.word	0x08006a61
 800699c:	08006a61 	.word	0x08006a61
 80069a0:	08006a61 	.word	0x08006a61
 80069a4:	08006a27 	.word	0x08006a27
                case CRSF_FRAMETYPE_RC_CHANNELS_PACKED:
                case CRSF_FRAMETYPE_SUBSET_RC_CHANNELS_PACKED:
                    if (crsfFrame.frame.deviceAddress == CRSF_ADDRESS_FLIGHT_CONTROLLER) {
 80069a8:	4b37      	ldr	r3, [pc, #220]	; (8006a88 <crsfDataReceive+0x234>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2bc8      	cmp	r3, #200	; 0xc8
 80069ae:	d159      	bne.n	8006a64 <crsfDataReceive+0x210>
                        lastRcFrameTimeUs = currentTimeUs;
 80069b0:	4a36      	ldr	r2, [pc, #216]	; (8006a8c <crsfDataReceive+0x238>)
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	6013      	str	r3, [r2, #0]
                        crsfFrameDone = true;
 80069b6:	4b36      	ldr	r3, [pc, #216]	; (8006a90 <crsfDataReceive+0x23c>)
 80069b8:	2201      	movs	r2, #1
 80069ba:	701a      	strb	r2, [r3, #0]
                        memcpy(&crsfChannelDataFrame, &crsfFrame, sizeof(crsfFrame));
 80069bc:	4a35      	ldr	r2, [pc, #212]	; (8006a94 <crsfDataReceive+0x240>)
 80069be:	4b32      	ldr	r3, [pc, #200]	; (8006a88 <crsfDataReceive+0x234>)
 80069c0:	4614      	mov	r4, r2
 80069c2:	461d      	mov	r5, r3
 80069c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80069d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    }
                    break;
 80069d8:	e044      	b.n	8006a64 <crsfDataReceive+0x210>
#if defined(USE_CRSF_LINK_STATISTICS)

                case CRSF_FRAMETYPE_LINK_STATISTICS: {
                    // if to FC and 10 bytes + CRSF_FRAME_ORIGIN_DEST_SIZE
                    if ((rssiSource == RSSI_SOURCE_RX_PROTOCOL_CRSF) &&
 80069da:	4b2f      	ldr	r3, [pc, #188]	; (8006a98 <crsfDataReceive+0x244>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b06      	cmp	r3, #6
 80069e0:	d142      	bne.n	8006a68 <crsfDataReceive+0x214>
                        (crsfFrame.frame.deviceAddress == CRSF_ADDRESS_FLIGHT_CONTROLLER) &&
 80069e2:	4b29      	ldr	r3, [pc, #164]	; (8006a88 <crsfDataReceive+0x234>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
                    if ((rssiSource == RSSI_SOURCE_RX_PROTOCOL_CRSF) &&
 80069e6:	2bc8      	cmp	r3, #200	; 0xc8
 80069e8:	d13e      	bne.n	8006a68 <crsfDataReceive+0x214>
                        (crsfFrame.frame.frameLength == CRSF_FRAME_ORIGIN_DEST_SIZE + CRSF_FRAME_LINK_STATISTICS_PAYLOAD_SIZE)) {
 80069ea:	4b27      	ldr	r3, [pc, #156]	; (8006a88 <crsfDataReceive+0x234>)
 80069ec:	785b      	ldrb	r3, [r3, #1]
                        (crsfFrame.frame.deviceAddress == CRSF_ADDRESS_FLIGHT_CONTROLLER) &&
 80069ee:	2b0c      	cmp	r3, #12
 80069f0:	d13a      	bne.n	8006a68 <crsfDataReceive+0x214>
                        const crsfLinkStatistics_t* statsFrame = (const crsfLinkStatistics_t*)&crsfFrame.frame.payload;
 80069f2:	4b2a      	ldr	r3, [pc, #168]	; (8006a9c <crsfDataReceive+0x248>)
 80069f4:	60fb      	str	r3, [r7, #12]
                        handleCrsfLinkStatisticsFrame(statsFrame, currentTimeUs);
 80069f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7ff fe87 	bl	800670c <handleCrsfLinkStatisticsFrame>
                    }
                    break;
 80069fe:	e033      	b.n	8006a68 <crsfDataReceive+0x214>
#if defined(USE_CRSF_V3)
                case CRSF_FRAMETYPE_LINK_STATISTICS_RX: {
                    break;
                }
                case CRSF_FRAMETYPE_LINK_STATISTICS_TX: {
                    if ((rssiSource == RSSI_SOURCE_RX_PROTOCOL_CRSF) &&
 8006a00:	4b25      	ldr	r3, [pc, #148]	; (8006a98 <crsfDataReceive+0x244>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	2b06      	cmp	r3, #6
 8006a06:	d131      	bne.n	8006a6c <crsfDataReceive+0x218>
                        (crsfFrame.frame.deviceAddress == CRSF_ADDRESS_FLIGHT_CONTROLLER) &&
 8006a08:	4b1f      	ldr	r3, [pc, #124]	; (8006a88 <crsfDataReceive+0x234>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
                    if ((rssiSource == RSSI_SOURCE_RX_PROTOCOL_CRSF) &&
 8006a0c:	2bc8      	cmp	r3, #200	; 0xc8
 8006a0e:	d12d      	bne.n	8006a6c <crsfDataReceive+0x218>
                        (crsfFrame.frame.frameLength == CRSF_FRAME_ORIGIN_DEST_SIZE + CRSF_FRAME_LINK_STATISTICS_TX_PAYLOAD_SIZE)) {
 8006a10:	4b1d      	ldr	r3, [pc, #116]	; (8006a88 <crsfDataReceive+0x234>)
 8006a12:	785b      	ldrb	r3, [r3, #1]
                        (crsfFrame.frame.deviceAddress == CRSF_ADDRESS_FLIGHT_CONTROLLER) &&
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d129      	bne.n	8006a6c <crsfDataReceive+0x218>
                        const crsfLinkStatisticsTx_t* statsFrame = (const crsfLinkStatisticsTx_t*)&crsfFrame.frame.payload;
 8006a18:	4b20      	ldr	r3, [pc, #128]	; (8006a9c <crsfDataReceive+0x248>)
 8006a1a:	613b      	str	r3, [r7, #16]
                        handleCrsfLinkStatisticsTxFrame(statsFrame, currentTimeUs);
 8006a1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a1e:	6938      	ldr	r0, [r7, #16]
 8006a20:	f7ff fe94 	bl	800674c <handleCrsfLinkStatisticsTxFrame>
                    }
                    break;
 8006a24:	e022      	b.n	8006a6c <crsfDataReceive+0x218>
                }
#endif
#endif
#if defined(USE_CRSF_V3)
                case CRSF_FRAMETYPE_COMMAND:
                    if ((crsfFrame.bytes[fullFrameLength - 2] == crsfFrameCmdCRC()) &&
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	3b02      	subs	r3, #2
 8006a2a:	4a17      	ldr	r2, [pc, #92]	; (8006a88 <crsfDataReceive+0x234>)
 8006a2c:	5cd4      	ldrb	r4, [r2, r3]
 8006a2e:	f7ff fee5 	bl	80067fc <crsfFrameCmdCRC>
 8006a32:	4603      	mov	r3, r0
 8006a34:	429c      	cmp	r4, r3
 8006a36:	d11b      	bne.n	8006a70 <crsfDataReceive+0x21c>
                        (crsfFrame.bytes[3] == CRSF_ADDRESS_FLIGHT_CONTROLLER)) {
 8006a38:	4b13      	ldr	r3, [pc, #76]	; (8006a88 <crsfDataReceive+0x234>)
 8006a3a:	78db      	ldrb	r3, [r3, #3]
                    if ((crsfFrame.bytes[fullFrameLength - 2] == crsfFrameCmdCRC()) &&
 8006a3c:	2bc8      	cmp	r3, #200	; 0xc8
 8006a3e:	d117      	bne.n	8006a70 <crsfDataReceive+0x21c>
                        crsfProcessCommand(crsfFrame.frame.payload + CRSF_FRAME_ORIGIN_DEST_SIZE);
 8006a40:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <crsfDataReceive+0x24c>)
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fd5a 	bl	80074fc <crsfProcessCommand>
                    }
                    break;
 8006a48:	e012      	b.n	8006a70 <crsfDataReceive+0x21c>
                default:
                    break;
                }
            } else {
#if defined(USE_CRSF_V3)
                if (crsfFrameErrorCnt < CRSF_FRAME_ERROR_COUNT_THRESHOLD)
 8006a4a:	4b0e      	ldr	r3, [pc, #56]	; (8006a84 <crsfDataReceive+0x230>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d80f      	bhi.n	8006a72 <crsfDataReceive+0x21e>
                    crsfFrameErrorCnt++;
 8006a52:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <crsfDataReceive+0x230>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	3301      	adds	r3, #1
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <crsfDataReceive+0x230>)
 8006a5c:	701a      	strb	r2, [r3, #0]
//            setCrsfDefaultSpeed();
//            crsfFrameErrorCnt = 0;
//        }
#endif
    }
}
 8006a5e:	e008      	b.n	8006a72 <crsfDataReceive+0x21e>
                    break;
 8006a60:	bf00      	nop
 8006a62:	e006      	b.n	8006a72 <crsfDataReceive+0x21e>
                    break;
 8006a64:	bf00      	nop
 8006a66:	e004      	b.n	8006a72 <crsfDataReceive+0x21e>
                    break;
 8006a68:	bf00      	nop
 8006a6a:	e002      	b.n	8006a72 <crsfDataReceive+0x21e>
                    break;
 8006a6c:	bf00      	nop
 8006a6e:	e000      	b.n	8006a72 <crsfDataReceive+0x21e>
                    break;
 8006a70:	bf00      	nop
}
 8006a72:	bf00      	nop
 8006a74:	3728      	adds	r7, #40	; 0x28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bdb0      	pop	{r4, r5, r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20000924 	.word	0x20000924
 8006a80:	2000098e 	.word	0x2000098e
 8006a84:	2000098f 	.word	0x2000098f
 8006a88:	20000864 	.word	0x20000864
 8006a8c:	20000970 	.word	0x20000970
 8006a90:	20000860 	.word	0x20000860
 8006a94:	200008a4 	.word	0x200008a4
 8006a98:	20000974 	.word	0x20000974
 8006a9c:	20000867 	.word	0x20000867
 8006aa0:	20000869 	.word	0x20000869

08006aa4 <crsfFrameStatus>:

uint8_t crsfFrameStatus(/*rxRuntimeState_t *rxRuntimeState*/)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
//    UNUSED(rxRuntimeState);

#if defined(USE_CRSF_LINK_STATISTICS)
    crsfCheckRssi(micros());
 8006aaa:	f7f9 fdab 	bl	8000604 <micros>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7ff fe6d 	bl	8006790 <crsfCheckRssi>
#endif
    if (crsfFrameDone) {
 8006ab6:	4ba2      	ldr	r3, [pc, #648]	; (8006d40 <crsfFrameStatus+0x29c>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 817d 	beq.w	8006dba <crsfFrameStatus+0x316>
        crsfFrameDone = false;
 8006ac0:	4b9f      	ldr	r3, [pc, #636]	; (8006d40 <crsfFrameStatus+0x29c>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	701a      	strb	r2, [r3, #0]

        // unpack the RC channels
        if (crsfChannelDataFrame.frame.type == CRSF_FRAMETYPE_RC_CHANNELS_PACKED) {
 8006ac6:	4b9f      	ldr	r3, [pc, #636]	; (8006d44 <crsfFrameStatus+0x2a0>)
 8006ac8:	789b      	ldrb	r3, [r3, #2]
 8006aca:	2b16      	cmp	r3, #22
 8006acc:	f040 80da 	bne.w	8006c84 <crsfFrameStatus+0x1e0>
            // use ordinary RC frame structure (0x16)
            const crsfPayloadRcChannelsPacked_t* const rcChannels = (crsfPayloadRcChannelsPacked_t*)&crsfChannelDataFrame.frame.payload;
 8006ad0:	4b9d      	ldr	r3, [pc, #628]	; (8006d48 <crsfFrameStatus+0x2a4>)
 8006ad2:	603b      	str	r3, [r7, #0]
            channelScale = CRSF_RC_CHANNEL_SCALE_LEGACY;
 8006ad4:	4b9d      	ldr	r3, [pc, #628]	; (8006d4c <crsfFrameStatus+0x2a8>)
 8006ad6:	4a9e      	ldr	r2, [pc, #632]	; (8006d50 <crsfFrameStatus+0x2ac>)
 8006ad8:	601a      	str	r2, [r3, #0]
            crsfChannelData[0] = rcChannels->chan0;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781a      	ldrb	r2, [r3, #0]
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	4b99      	ldr	r3, [pc, #612]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006aee:	601a      	str	r2, [r3, #0]
            crsfChannelData[1] = rcChannels->chan1;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	785a      	ldrb	r2, [r3, #1]
 8006af4:	08d2      	lsrs	r2, r2, #3
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	789b      	ldrb	r3, [r3, #2]
 8006afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006afe:	015b      	lsls	r3, r3, #5
 8006b00:	4313      	orrs	r3, r2
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	4b93      	ldr	r3, [pc, #588]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006b08:	605a      	str	r2, [r3, #4]
            crsfChannelData[2] = rcChannels->chan2;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	789a      	ldrb	r2, [r3, #2]
 8006b0e:	0992      	lsrs	r2, r2, #6
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	78d9      	ldrb	r1, [r3, #3]
 8006b14:	0089      	lsls	r1, r1, #2
 8006b16:	430a      	orrs	r2, r1
 8006b18:	791b      	ldrb	r3, [r3, #4]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	029b      	lsls	r3, r3, #10
 8006b20:	4313      	orrs	r3, r2
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	4b8b      	ldr	r3, [pc, #556]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006b28:	609a      	str	r2, [r3, #8]
            crsfChannelData[3] = rcChannels->chan3;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	791a      	ldrb	r2, [r3, #4]
 8006b2e:	0852      	lsrs	r2, r2, #1
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	795b      	ldrb	r3, [r3, #5]
 8006b34:	f003 030f 	and.w	r3, r3, #15
 8006b38:	01db      	lsls	r3, r3, #7
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	461a      	mov	r2, r3
 8006b40:	4b84      	ldr	r3, [pc, #528]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006b42:	60da      	str	r2, [r3, #12]
            crsfChannelData[4] = rcChannels->chan4;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	795a      	ldrb	r2, [r3, #5]
 8006b48:	0912      	lsrs	r2, r2, #4
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	799b      	ldrb	r3, [r3, #6]
 8006b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b52:	011b      	lsls	r3, r3, #4
 8006b54:	4313      	orrs	r3, r2
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	4b7e      	ldr	r3, [pc, #504]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006b5c:	611a      	str	r2, [r3, #16]
            crsfChannelData[5] = rcChannels->chan5;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	799a      	ldrb	r2, [r3, #6]
 8006b62:	09d2      	lsrs	r2, r2, #7
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	79d9      	ldrb	r1, [r3, #7]
 8006b68:	0049      	lsls	r1, r1, #1
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	7a1b      	ldrb	r3, [r3, #8]
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	025b      	lsls	r3, r3, #9
 8006b74:	4313      	orrs	r3, r2
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	4b76      	ldr	r3, [pc, #472]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006b7c:	615a      	str	r2, [r3, #20]
            crsfChannelData[6] = rcChannels->chan6;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	7a1a      	ldrb	r2, [r3, #8]
 8006b82:	0892      	lsrs	r2, r2, #2
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	7a5b      	ldrb	r3, [r3, #9]
 8006b88:	f003 031f 	and.w	r3, r3, #31
 8006b8c:	019b      	lsls	r3, r3, #6
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	461a      	mov	r2, r3
 8006b94:	4b6f      	ldr	r3, [pc, #444]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006b96:	619a      	str	r2, [r3, #24]
            crsfChannelData[7] = rcChannels->chan7;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	7a5a      	ldrb	r2, [r3, #9]
 8006b9c:	0952      	lsrs	r2, r2, #5
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	7a9b      	ldrb	r3, [r3, #10]
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4b6a      	ldr	r3, [pc, #424]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006bac:	61da      	str	r2, [r3, #28]
            crsfChannelData[8] = rcChannels->chan8;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	7ada      	ldrb	r2, [r3, #11]
 8006bb2:	7b1b      	ldrb	r3, [r3, #12]
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	021b      	lsls	r3, r3, #8
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	4b64      	ldr	r3, [pc, #400]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006bc2:	621a      	str	r2, [r3, #32]
            crsfChannelData[9] = rcChannels->chan9;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	7b1a      	ldrb	r2, [r3, #12]
 8006bc8:	08d2      	lsrs	r2, r2, #3
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	7b5b      	ldrb	r3, [r3, #13]
 8006bce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bd2:	015b      	lsls	r3, r3, #5
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4b5e      	ldr	r3, [pc, #376]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006bdc:	625a      	str	r2, [r3, #36]	; 0x24
            crsfChannelData[10] = rcChannels->chan10;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	7b5a      	ldrb	r2, [r3, #13]
 8006be2:	0992      	lsrs	r2, r2, #6
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	7b99      	ldrb	r1, [r3, #14]
 8006be8:	0089      	lsls	r1, r1, #2
 8006bea:	430a      	orrs	r2, r1
 8006bec:	7bdb      	ldrb	r3, [r3, #15]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	029b      	lsls	r3, r3, #10
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4b56      	ldr	r3, [pc, #344]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006bfc:	629a      	str	r2, [r3, #40]	; 0x28
            crsfChannelData[11] = rcChannels->chan11;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	7bda      	ldrb	r2, [r3, #15]
 8006c02:	0852      	lsrs	r2, r2, #1
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	7c1b      	ldrb	r3, [r3, #16]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	01db      	lsls	r3, r3, #7
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	461a      	mov	r2, r3
 8006c14:	4b4f      	ldr	r3, [pc, #316]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006c16:	62da      	str	r2, [r3, #44]	; 0x2c
            crsfChannelData[12] = rcChannels->chan12;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	7c1a      	ldrb	r2, [r3, #16]
 8006c1c:	0912      	lsrs	r2, r2, #4
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	7c5b      	ldrb	r3, [r3, #17]
 8006c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c26:	011b      	lsls	r3, r3, #4
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4b49      	ldr	r3, [pc, #292]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006c30:	631a      	str	r2, [r3, #48]	; 0x30
            crsfChannelData[13] = rcChannels->chan13;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	7c5a      	ldrb	r2, [r3, #17]
 8006c36:	09d2      	lsrs	r2, r2, #7
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	7c99      	ldrb	r1, [r3, #18]
 8006c3c:	0049      	lsls	r1, r1, #1
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	7cdb      	ldrb	r3, [r3, #19]
 8006c42:	f003 0303 	and.w	r3, r3, #3
 8006c46:	025b      	lsls	r3, r3, #9
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	4b41      	ldr	r3, [pc, #260]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006c50:	635a      	str	r2, [r3, #52]	; 0x34
            crsfChannelData[14] = rcChannels->chan14;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	7cda      	ldrb	r2, [r3, #19]
 8006c56:	0892      	lsrs	r2, r2, #2
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	7d1b      	ldrb	r3, [r3, #20]
 8006c5c:	f003 031f 	and.w	r3, r3, #31
 8006c60:	019b      	lsls	r3, r3, #6
 8006c62:	4313      	orrs	r3, r2
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	4b3a      	ldr	r3, [pc, #232]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006c6a:	639a      	str	r2, [r3, #56]	; 0x38
            crsfChannelData[15] = rcChannels->chan15;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	7d1a      	ldrb	r2, [r3, #20]
 8006c70:	0952      	lsrs	r2, r2, #5
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	7d5b      	ldrb	r3, [r3, #21]
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4b35      	ldr	r3, [pc, #212]	; (8006d54 <crsfFrameStatus+0x2b0>)
 8006c80:	63da      	str	r2, [r3, #60]	; 0x3c
 8006c82:	e098      	b.n	8006db6 <crsfFrameStatus+0x312>
        } else {
            // use subset RC frame structure (0x17)
            uint8_t readByteIndex = 0;
 8006c84:	2300      	movs	r3, #0
 8006c86:	77fb      	strb	r3, [r7, #31]
            const uint8_t *payload = crsfChannelDataFrame.frame.payload;
 8006c88:	4b2f      	ldr	r3, [pc, #188]	; (8006d48 <crsfFrameStatus+0x2a4>)
 8006c8a:	60fb      	str	r3, [r7, #12]

            // get the configuration byte
            uint8_t configByte = payload[readByteIndex++];
 8006c8c:	7ffb      	ldrb	r3, [r7, #31]
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	77fa      	strb	r2, [r7, #31]
 8006c92:	461a      	mov	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4413      	add	r3, r2
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	72fb      	strb	r3, [r7, #11]

            // get the channel number of start channel
            uint8_t startChannel = configByte & CRSF_SUBSET_RC_STARTING_CHANNEL_MASK;
 8006c9c:	7afb      	ldrb	r3, [r7, #11]
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	72bb      	strb	r3, [r7, #10]
            configByte >>= CRSF_SUBSET_RC_STARTING_CHANNEL_BITS;
 8006ca4:	7afb      	ldrb	r3, [r7, #11]
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	72fb      	strb	r3, [r7, #11]

            // get the channel resolution settings
            uint8_t channelBits;
            uint16_t channelMask;
            uint8_t channelRes = configByte & CRSF_SUBSET_RC_RES_CONFIGURATION_MASK;
 8006caa:	7afb      	ldrb	r3, [r7, #11]
 8006cac:	f003 0303 	and.w	r3, r3, #3
 8006cb0:	727b      	strb	r3, [r7, #9]
            configByte >>= CRSF_SUBSET_RC_RES_CONFIGURATION_BITS;
 8006cb2:	7afb      	ldrb	r3, [r7, #11]
 8006cb4:	089b      	lsrs	r3, r3, #2
 8006cb6:	72fb      	strb	r3, [r7, #11]
            switch (channelRes) {
 8006cb8:	7a7b      	ldrb	r3, [r7, #9]
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d024      	beq.n	8006d08 <crsfFrameStatus+0x264>
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	dc0e      	bgt.n	8006ce0 <crsfFrameStatus+0x23c>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <crsfFrameStatus+0x228>
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d014      	beq.n	8006cf4 <crsfFrameStatus+0x250>
 8006cca:	e009      	b.n	8006ce0 <crsfFrameStatus+0x23c>
            case CRSF_SUBSET_RC_RES_CONF_10B:
                channelBits = CRSF_SUBSET_RC_RES_BITS_10B;
 8006ccc:	230a      	movs	r3, #10
 8006cce:	77bb      	strb	r3, [r7, #30]
                channelMask = CRSF_SUBSET_RC_RES_MASK_10B;
 8006cd0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006cd4:	83bb      	strh	r3, [r7, #28]
                channelScale = CRSF_SUBSET_RC_CHANNEL_SCALE_10B;
 8006cd6:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <crsfFrameStatus+0x2a8>)
 8006cd8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006cdc:	601a      	str	r2, [r3, #0]
                break;
 8006cde:	e01d      	b.n	8006d1c <crsfFrameStatus+0x278>
            default:
            case CRSF_SUBSET_RC_RES_CONF_11B:
                channelBits = CRSF_SUBSET_RC_RES_BITS_11B;
 8006ce0:	230b      	movs	r3, #11
 8006ce2:	77bb      	strb	r3, [r7, #30]
                channelMask = CRSF_SUBSET_RC_RES_MASK_11B;
 8006ce4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006ce8:	83bb      	strh	r3, [r7, #28]
                channelScale = CRSF_SUBSET_RC_CHANNEL_SCALE_11B;
 8006cea:	4b18      	ldr	r3, [pc, #96]	; (8006d4c <crsfFrameStatus+0x2a8>)
 8006cec:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006cf0:	601a      	str	r2, [r3, #0]
                break;
 8006cf2:	e013      	b.n	8006d1c <crsfFrameStatus+0x278>
            case CRSF_SUBSET_RC_RES_CONF_12B:
                channelBits = CRSF_SUBSET_RC_RES_BITS_12B;
 8006cf4:	230c      	movs	r3, #12
 8006cf6:	77bb      	strb	r3, [r7, #30]
                channelMask = CRSF_SUBSET_RC_RES_MASK_12B;
 8006cf8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8006cfc:	83bb      	strh	r3, [r7, #28]
                channelScale = CRSF_SUBSET_RC_CHANNEL_SCALE_12B;
 8006cfe:	4b13      	ldr	r3, [pc, #76]	; (8006d4c <crsfFrameStatus+0x2a8>)
 8006d00:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8006d04:	601a      	str	r2, [r3, #0]
                break;
 8006d06:	e009      	b.n	8006d1c <crsfFrameStatus+0x278>
            case CRSF_SUBSET_RC_RES_CONF_13B:
                channelBits = CRSF_SUBSET_RC_RES_BITS_13B;
 8006d08:	230d      	movs	r3, #13
 8006d0a:	77bb      	strb	r3, [r7, #30]
                channelMask = CRSF_SUBSET_RC_RES_MASK_13B;
 8006d0c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006d10:	83bb      	strh	r3, [r7, #28]
                channelScale = CRSF_SUBSET_RC_CHANNEL_SCALE_13B;
 8006d12:	4b0e      	ldr	r3, [pc, #56]	; (8006d4c <crsfFrameStatus+0x2a8>)
 8006d14:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8006d18:	601a      	str	r2, [r3, #0]
                break;
 8006d1a:	bf00      	nop
            }

            // do nothing for the reserved configuration bit
            configByte >>= CRSF_SUBSET_RC_RESERVED_CONFIGURATION_BITS;
 8006d1c:	7afb      	ldrb	r3, [r7, #11]
 8006d1e:	085b      	lsrs	r3, r3, #1
 8006d20:	72fb      	strb	r3, [r7, #11]

            // calculate the number of channels packed
            uint8_t numOfChannels = ((crsfChannelDataFrame.frame.frameLength - CRSF_FRAME_LENGTH_TYPE_CRC - 1) * 8) / channelBits;
 8006d22:	4b08      	ldr	r3, [pc, #32]	; (8006d44 <crsfFrameStatus+0x2a0>)
 8006d24:	785b      	ldrb	r3, [r3, #1]
 8006d26:	3b03      	subs	r3, #3
 8006d28:	00da      	lsls	r2, r3, #3
 8006d2a:	7fbb      	ldrb	r3, [r7, #30]
 8006d2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006d30:	723b      	strb	r3, [r7, #8]

            // unpack the channel data
            uint8_t bitsMerged = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	76fb      	strb	r3, [r7, #27]
            uint32_t readValue = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	617b      	str	r3, [r7, #20]
            for (uint8_t n = 0; n < numOfChannels; n++) {
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	74fb      	strb	r3, [r7, #19]
 8006d3e:	e036      	b.n	8006dae <crsfFrameStatus+0x30a>
 8006d40:	20000860 	.word	0x20000860
 8006d44:	200008a4 	.word	0x200008a4
 8006d48:	200008a7 	.word	0x200008a7
 8006d4c:	20000010 	.word	0x20000010
 8006d50:	3f1ff101 	.word	0x3f1ff101
 8006d54:	200008e4 	.word	0x200008e4
                while (bitsMerged < channelBits) {
                    uint8_t readByte = payload[readByteIndex++];
 8006d58:	7ffb      	ldrb	r3, [r7, #31]
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	77fa      	strb	r2, [r7, #31]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4413      	add	r3, r2
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	71fb      	strb	r3, [r7, #7]
                    readValue |= ((uint32_t) readByte) << bitsMerged;
 8006d68:	79fa      	ldrb	r2, [r7, #7]
 8006d6a:	7efb      	ldrb	r3, [r7, #27]
 8006d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]
                    bitsMerged += 8;
 8006d76:	7efb      	ldrb	r3, [r7, #27]
 8006d78:	3308      	adds	r3, #8
 8006d7a:	76fb      	strb	r3, [r7, #27]
                while (bitsMerged < channelBits) {
 8006d7c:	7efa      	ldrb	r2, [r7, #27]
 8006d7e:	7fbb      	ldrb	r3, [r7, #30]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d3e9      	bcc.n	8006d58 <crsfFrameStatus+0x2b4>
                }
                crsfChannelData[startChannel + n] = readValue & channelMask;
 8006d84:	8bb9      	ldrh	r1, [r7, #28]
 8006d86:	7aba      	ldrb	r2, [r7, #10]
 8006d88:	7cfb      	ldrb	r3, [r7, #19]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	400a      	ands	r2, r1
 8006d90:	490c      	ldr	r1, [pc, #48]	; (8006dc4 <crsfFrameStatus+0x320>)
 8006d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                readValue >>= channelBits;
 8006d96:	7fbb      	ldrb	r3, [r7, #30]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9e:	617b      	str	r3, [r7, #20]
                bitsMerged -= channelBits;
 8006da0:	7efa      	ldrb	r2, [r7, #27]
 8006da2:	7fbb      	ldrb	r3, [r7, #30]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	76fb      	strb	r3, [r7, #27]
            for (uint8_t n = 0; n < numOfChannels; n++) {
 8006da8:	7cfb      	ldrb	r3, [r7, #19]
 8006daa:	3301      	adds	r3, #1
 8006dac:	74fb      	strb	r3, [r7, #19]
 8006dae:	7cfa      	ldrb	r2, [r7, #19]
 8006db0:	7a3b      	ldrb	r3, [r7, #8]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d3e2      	bcc.n	8006d7c <crsfFrameStatus+0x2d8>
            }
        }
        return RX_FRAME_COMPLETE;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e000      	b.n	8006dbc <crsfFrameStatus+0x318>
    }
    return RX_FRAME_PENDING;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3720      	adds	r7, #32
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	200008e4 	.word	0x200008e4

08006dc8 <crsfReadRawRC>:

float crsfReadRawRC(uint8_t chan)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	71fb      	strb	r3, [r7, #7]
//    UNUSED(rxRuntimeState);
    if (channelScale == CRSF_RC_CHANNEL_SCALE_LEGACY) {
 8006dd2:	4b1a      	ldr	r3, [pc, #104]	; (8006e3c <crsfReadRawRC+0x74>)
 8006dd4:	edd3 7a00 	vldr	s15, [r3]
 8006dd8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006e40 <crsfReadRawRC+0x78>
 8006ddc:	eef4 7a47 	vcmp.f32	s15, s14
 8006de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de4:	d111      	bne.n	8006e0a <crsfReadRawRC+0x42>
        * mid  992 -> 1500us
        * max 1811 -> 2012us
        * scale factor = (2012-988) / (1811-172) = 0.62477120195241
        * offset = 988 - 172 * 0.62477120195241 = 880.53935326418548
        */
        return (channelScale * (float)crsfChannelData[chan]) + 881;
 8006de6:	79fb      	ldrb	r3, [r7, #7]
 8006de8:	4a16      	ldr	r2, [pc, #88]	; (8006e44 <crsfReadRawRC+0x7c>)
 8006dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006df6:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <crsfReadRawRC+0x74>)
 8006df8:	edd3 7a00 	vldr	s15, [r3]
 8006dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e00:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006e48 <crsfReadRawRC+0x80>
 8006e04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e08:	e010      	b.n	8006e2c <crsfReadRawRC+0x64>
    } else {
        /* conversion from RC value to PWM
        * for 0x17 Subset RC frame
        */
        return (channelScale * (float)crsfChannelData[chan]) + 988;
 8006e0a:	79fb      	ldrb	r3, [r7, #7]
 8006e0c:	4a0d      	ldr	r2, [pc, #52]	; (8006e44 <crsfReadRawRC+0x7c>)
 8006e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e1a:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <crsfReadRawRC+0x74>)
 8006e1c:	edd3 7a00 	vldr	s15, [r3]
 8006e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e24:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8006e4c <crsfReadRawRC+0x84>
 8006e28:	ee77 7a87 	vadd.f32	s15, s15, s14
    }
}
 8006e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	20000010 	.word	0x20000010
 8006e40:	3f1ff101 	.word	0x3f1ff101
 8006e44:	200008e4 	.word	0x200008e4
 8006e48:	445c4000 	.word	0x445c4000
 8006e4c:	44770000 	.word	0x44770000

08006e50 <crsfRxWriteTelemetryData>:

void crsfRxWriteTelemetryData(const void *data, int len)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
    len = MIN(len, (int)sizeof(telemetryBuf));
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	2340      	movs	r3, #64	; 0x40
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4293      	cmp	r3, r2
 8006e68:	bfa8      	it	ge
 8006e6a:	4613      	movge	r3, r2
 8006e6c:	603b      	str	r3, [r7, #0]
    memcpy(telemetryBuf, data, len);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	6879      	ldr	r1, [r7, #4]
 8006e74:	4805      	ldr	r0, [pc, #20]	; (8006e8c <crsfRxWriteTelemetryData+0x3c>)
 8006e76:	f000 fbd3 	bl	8007620 <memcpy>
    telemetryBufLen = len;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	4b04      	ldr	r3, [pc, #16]	; (8006e90 <crsfRxWriteTelemetryData+0x40>)
 8006e80:	701a      	strb	r2, [r3, #0]
}
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000928 	.word	0x20000928
 8006e90:	20000968 	.word	0x20000968

08006e94 <crsfRxSendTelemetryData>:

void crsfRxSendTelemetryData(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0
    // if there is telemetry data to write
    if (telemetryBufLen > 0) {
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <crsfRxSendTelemetryData+0x30>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00f      	beq.n	8006ec0 <crsfRxSendTelemetryData+0x2c>
    	if (huart != NULL) {
 8006ea0:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <crsfRxSendTelemetryData+0x34>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d008      	beq.n	8006eba <crsfRxSendTelemetryData+0x26>
        	HAL_UART_Transmit_DMA(huart, telemetryBuf, telemetryBufLen);
 8006ea8:	4b07      	ldr	r3, [pc, #28]	; (8006ec8 <crsfRxSendTelemetryData+0x34>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a05      	ldr	r2, [pc, #20]	; (8006ec4 <crsfRxSendTelemetryData+0x30>)
 8006eae:	7812      	ldrb	r2, [r2, #0]
 8006eb0:	b292      	uxth	r2, r2
 8006eb2:	4906      	ldr	r1, [pc, #24]	; (8006ecc <crsfRxSendTelemetryData+0x38>)
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fd fd6d 	bl	8004994 <HAL_UART_Transmit_DMA>
        }
        telemetryBufLen = 0; // reset telemetry buffer
 8006eba:	4b02      	ldr	r3, [pc, #8]	; (8006ec4 <crsfRxSendTelemetryData+0x30>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
    }
}
 8006ec0:	bf00      	nop
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20000968 	.word	0x20000968
 8006ec8:	2000096c 	.word	0x2000096c
 8006ecc:	20000928 	.word	0x20000928

08006ed0 <crsfRxIsTelemetryBufEmpty>:

bool crsfRxIsTelemetryBufEmpty(void)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	af00      	add	r7, sp, #0
    return telemetryBufLen == 0;
 8006ed4:	4b05      	ldr	r3, [pc, #20]	; (8006eec <crsfRxIsTelemetryBufEmpty+0x1c>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	bf0c      	ite	eq
 8006edc:	2301      	moveq	r3, #1
 8006ede:	2300      	movne	r3, #0
 8006ee0:	b2db      	uxtb	r3, r3
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	20000968 	.word	0x20000968

08006ef0 <crsfRxInit>:

bool crsfRxInit(UART_HandleTypeDef *hUart)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
	huart = hUart;
 8006ef8:	4a0b      	ldr	r2, [pc, #44]	; (8006f28 <crsfRxInit+0x38>)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6013      	str	r3, [r2, #0]

    if (rssiSource == RSSI_SOURCE_NONE) {
 8006efe:	4b0b      	ldr	r3, [pc, #44]	; (8006f2c <crsfRxInit+0x3c>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d102      	bne.n	8006f0c <crsfRxInit+0x1c>
        rssiSource = RSSI_SOURCE_RX_PROTOCOL_CRSF;
 8006f06:	4b09      	ldr	r3, [pc, #36]	; (8006f2c <crsfRxInit+0x3c>)
 8006f08:	2206      	movs	r2, #6
 8006f0a:	701a      	strb	r2, [r3, #0]
    }
#ifdef USE_RX_LINK_QUALITY_INFO
    if (linkQualitySource == LQ_SOURCE_NONE) {
 8006f0c:	4b08      	ldr	r3, [pc, #32]	; (8006f30 <crsfRxInit+0x40>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d102      	bne.n	8006f1a <crsfRxInit+0x2a>
        linkQualitySource = LQ_SOURCE_RX_PROTOCOL_CRSF;
 8006f14:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <crsfRxInit+0x40>)
 8006f16:	2201      	movs	r2, #1
 8006f18:	701a      	strb	r2, [r3, #0]
    }
#endif

    return 1; // serialPort != NULL;
 8006f1a:	2301      	movs	r3, #1
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	2000096c 	.word	0x2000096c
 8006f2c:	20000974 	.word	0x20000974
 8006f30:	20000975 	.word	0x20000975

08006f34 <crsfRxIsActive>:
	return false;
}
#endif

bool crsfRxIsActive(void)
{
 8006f34:	b480      	push	{r7}
 8006f36:	af00      	add	r7, sp, #0
//    return serialPort != NULL;
    return huart != NULL;
 8006f38:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <crsfRxIsActive+0x1c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	bf14      	ite	ne
 8006f40:	2301      	movne	r3, #1
 8006f42:	2300      	moveq	r3, #0
 8006f44:	b2db      	uxtb	r3, r3
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	2000096c 	.word	0x2000096c

08006f54 <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static inline int constrain(int amt, int low, int high)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	da01      	bge.n	8006f6c <constrain+0x18>
        return low;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	e006      	b.n	8006f7a <constrain+0x26>
    else if (amt > high)
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	dd01      	ble.n	8006f78 <constrain+0x24>
        return high;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	e000      	b.n	8006f7a <constrain+0x26>
    else
        return amt;
 8006f78:	68fb      	ldr	r3, [r7, #12]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <crsfInitializeFrame>:

gpsSolutionData_t gpsSol;


static void crsfInitializeFrame(sbuf_t *dst)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
    dst->ptr = crsfFrame;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a06      	ldr	r2, [pc, #24]	; (8006fac <crsfInitializeFrame+0x24>)
 8006f94:	601a      	str	r2, [r3, #0]
    dst->end = ARRAYEND(crsfFrame);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a05      	ldr	r2, [pc, #20]	; (8006fb0 <crsfInitializeFrame+0x28>)
 8006f9a:	605a      	str	r2, [r3, #4]

    sbufWriteU8(dst, CRSF_SYNC_BYTE);
 8006f9c:	21c8      	movs	r1, #200	; 0xc8
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff faed 	bl	800657e <sbufWriteU8>
}
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20000994 	.word	0x20000994
 8006fb0:	200009d4 	.word	0x200009d4

08006fb4 <crsfFinalize>:

static void crsfFinalize(sbuf_t *dst)
{
 8006fb4:	b590      	push	{r4, r7, lr}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
    crc8_dvb_s2_sbuf_append(dst, &crsfFrame[2]); // start at byte 2, since CRC does not include device address and frame length
 8006fbc:	22d5      	movs	r2, #213	; 0xd5
 8006fbe:	490c      	ldr	r1, [pc, #48]	; (8006ff0 <crsfFinalize+0x3c>)
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff fab4 	bl	800652e <crc8_sbuf_append>
    sbufSwitchToReader(dst, crsfFrame);
 8006fc6:	490b      	ldr	r1, [pc, #44]	; (8006ff4 <crsfFinalize+0x40>)
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff fb7e 	bl	80066ca <sbufSwitchToReader>
    // write the telemetry frame to the receiver.
    crsfRxWriteTelemetryData(sbufPtr(dst), sbufBytesRemaining(dst));
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7ff fb6f 	bl	80066b2 <sbufPtr>
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff fb5c 	bl	8006694 <sbufBytesRemaining>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f7ff ff35 	bl	8006e50 <crsfRxWriteTelemetryData>
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd90      	pop	{r4, r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20000996 	.word	0x20000996
 8006ff4:	20000994 	.word	0x20000994

08006ff8 <crsfFrameGps>:
uint16_t    GPS heading ( degree / 100 )
uint16      Altitude ( meter ­1000m offset )
uint8_t     Satellites in use ( counter )
*/
void crsfFrameGps(sbuf_t *dst)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
    // use sbufWrite since CRC does not include frame length
    sbufWriteU8(dst, CRSF_FRAME_GPS_PAYLOAD_SIZE + CRSF_FRAME_LENGTH_TYPE_CRC);
 8007000:	2111      	movs	r1, #17
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7ff fabb 	bl	800657e <sbufWriteU8>
    sbufWriteU8(dst, CRSF_FRAMETYPE_GPS);
 8007008:	2102      	movs	r1, #2
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff fab7 	bl	800657e <sbufWriteU8>
    sbufWriteU32BigEndian(dst, gpsSol.llh.lat); // CRSF and betaflight use same units for degrees
 8007010:	4b26      	ldr	r3, [pc, #152]	; (80070ac <crsfFrameGps+0xb4>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7ff fadc 	bl	80065d4 <sbufWriteU32BigEndian>
    sbufWriteU32BigEndian(dst, gpsSol.llh.lon);
 800701c:	4b23      	ldr	r3, [pc, #140]	; (80070ac <crsfFrameGps+0xb4>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff fad6 	bl	80065d4 <sbufWriteU32BigEndian>
    sbufWriteU16BigEndian(dst, (gpsSol.groundSpeed * 36 + 50) / 100); // gpsSol.groundSpeed is in cm/s
 8007028:	4b20      	ldr	r3, [pc, #128]	; (80070ac <crsfFrameGps+0xb4>)
 800702a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800702c:	461a      	mov	r2, r3
 800702e:	4613      	mov	r3, r2
 8007030:	00db      	lsls	r3, r3, #3
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	3332      	adds	r3, #50	; 0x32
 8007038:	4a1d      	ldr	r2, [pc, #116]	; (80070b0 <crsfFrameGps+0xb8>)
 800703a:	fb82 1203 	smull	r1, r2, r2, r3
 800703e:	1152      	asrs	r2, r2, #5
 8007040:	17db      	asrs	r3, r3, #31
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	b29b      	uxth	r3, r3
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7ff faab 	bl	80065a4 <sbufWriteU16BigEndian>
    sbufWriteU16BigEndian(dst, gpsSol.groundCourse * 10); // gpsSol.groundCourse is degrees * 10
 800704e:	4b17      	ldr	r3, [pc, #92]	; (80070ac <crsfFrameGps+0xb4>)
 8007050:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007052:	461a      	mov	r2, r3
 8007054:	0092      	lsls	r2, r2, #2
 8007056:	4413      	add	r3, r2
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	b29b      	uxth	r3, r3
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff faa0 	bl	80065a4 <sbufWriteU16BigEndian>
    const uint16_t altitude = (constrain(getEstimatedAltitudeCm(), 0 * 100, 5000 * 100) / 100) + 1000; // constrain altitude from 0 to 5,000m
 8007064:	f7f9 ff68 	bl	8000f38 <getEstimatedAltitudeCm>
 8007068:	4603      	mov	r3, r0
 800706a:	4a12      	ldr	r2, [pc, #72]	; (80070b4 <crsfFrameGps+0xbc>)
 800706c:	2100      	movs	r1, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff ff70 	bl	8006f54 <constrain>
 8007074:	4603      	mov	r3, r0
 8007076:	4a0e      	ldr	r2, [pc, #56]	; (80070b0 <crsfFrameGps+0xb8>)
 8007078:	fb82 1203 	smull	r1, r2, r2, r3
 800707c:	1152      	asrs	r2, r2, #5
 800707e:	17db      	asrs	r3, r3, #31
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	b29b      	uxth	r3, r3
 8007084:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8007088:	81fb      	strh	r3, [r7, #14]
    sbufWriteU16BigEndian(dst, altitude);
 800708a:	89fb      	ldrh	r3, [r7, #14]
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff fa88 	bl	80065a4 <sbufWriteU16BigEndian>
    sbufWriteU8(dst, gpsSol.numSat);
 8007094:	4b05      	ldr	r3, [pc, #20]	; (80070ac <crsfFrameGps+0xb4>)
 8007096:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff fa6e 	bl	800657e <sbufWriteU8>
}
 80070a2:	bf00      	nop
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	200009d4 	.word	0x200009d4
 80070b0:	51eb851f 	.word	0x51eb851f
 80070b4:	0007a120 	.word	0x0007a120

080070b8 <crsfFrameBatterySensor>:
uint16_t    Current ( mA * 100 )
uint24_t    Fuel ( drawn mAh )
uint8_t     Battery remaining ( percent )
*/
void crsfFrameBatterySensor(sbuf_t *dst)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
    // use sbufWrite since CRC does not include frame length
    sbufWriteU8(dst, CRSF_FRAME_BATTERY_SENSOR_PAYLOAD_SIZE + CRSF_FRAME_LENGTH_TYPE_CRC);
 80070c0:	210a      	movs	r1, #10
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff fa5b 	bl	800657e <sbufWriteU8>
    sbufWriteU8(dst, CRSF_FRAMETYPE_BATTERY_SENSOR);
 80070c8:	2108      	movs	r1, #8
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7ff fa57 	bl	800657e <sbufWriteU8>
//    if (telemetryConfig()->report_cell_voltage) {
//        sbufWriteU16BigEndian(dst, (getBatteryAverageCellVoltage() + 5) / 10); // vbat is in units of 0.01V
//    } else {
        sbufWriteU16BigEndian(dst, getLegacyBatteryVoltage());
 80070d0:	f7f9 ff40 	bl	8000f54 <getLegacyBatteryVoltage>
 80070d4:	4603      	mov	r3, r0
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff fa63 	bl	80065a4 <sbufWriteU16BigEndian>
//    }
    sbufWriteU16BigEndian(dst, getAmperage() / 10);
 80070de:	f7f9 ff49 	bl	8000f74 <getAmperage>
 80070e2:	4603      	mov	r3, r0
 80070e4:	4a17      	ldr	r2, [pc, #92]	; (8007144 <crsfFrameBatterySensor+0x8c>)
 80070e6:	fb82 1203 	smull	r1, r2, r2, r3
 80070ea:	1092      	asrs	r2, r2, #2
 80070ec:	17db      	asrs	r3, r3, #31
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff fa55 	bl	80065a4 <sbufWriteU16BigEndian>
    const uint32_t mAhDrawn = getMAhDrawn();
 80070fa:	f7f9 ff49 	bl	8000f90 <getMAhDrawn>
 80070fe:	4603      	mov	r3, r0
 8007100:	60fb      	str	r3, [r7, #12]
    const uint8_t batteryRemainingPercentage = calculateBatteryPercentageRemaining();
 8007102:	f7f9 ff53 	bl	8000fac <calculateBatteryPercentageRemaining>
 8007106:	4603      	mov	r3, r0
 8007108:	72fb      	strb	r3, [r7, #11]
    sbufWriteU8(dst, (mAhDrawn >> 16));
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	0c1b      	lsrs	r3, r3, #16
 800710e:	b2db      	uxtb	r3, r3
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7ff fa33 	bl	800657e <sbufWriteU8>
    sbufWriteU8(dst, (mAhDrawn >> 8));
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	b2db      	uxtb	r3, r3
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff fa2c 	bl	800657e <sbufWriteU8>
    sbufWriteU8(dst, (uint8_t)mAhDrawn);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	b2db      	uxtb	r3, r3
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff fa26 	bl	800657e <sbufWriteU8>
    sbufWriteU8(dst, batteryRemainingPercentage);
 8007132:	7afb      	ldrb	r3, [r7, #11]
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff fa21 	bl	800657e <sbufWriteU8>
}
 800713c:	bf00      	nop
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	66666667 	.word	0x66666667

08007148 <crsfFrameHeartbeat>:
0x0B Heartbeat
Payload:
int16_t    origin_add ( Origin Device address )
*/
void crsfFrameHeartbeat(sbuf_t *dst)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
    sbufWriteU8(dst, CRSF_FRAME_HEARTBEAT_PAYLOAD_SIZE + CRSF_FRAME_LENGTH_TYPE_CRC);
 8007150:	2104      	movs	r1, #4
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff fa13 	bl	800657e <sbufWriteU8>
    sbufWriteU8(dst, CRSF_FRAMETYPE_HEARTBEAT);
 8007158:	210b      	movs	r1, #11
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7ff fa0f 	bl	800657e <sbufWriteU8>
    sbufWriteU16BigEndian(dst, CRSF_ADDRESS_FLIGHT_CONTROLLER);
 8007160:	21c8      	movs	r1, #200	; 0xc8
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7ff fa1e 	bl	80065a4 <sbufWriteU16BigEndian>
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <decidegrees2Radians10000>:
int16_t     Yaw angle ( rad / 10000 )
*/

// convert andgle in decidegree to radians/10000 with reducing angle to +/-180 degree range
static int16_t decidegrees2Radians10000(int16_t angle_decidegree)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	4603      	mov	r3, r0
 8007178:	80fb      	strh	r3, [r7, #6]
    while (angle_decidegree > 1800) {
 800717a:	e004      	b.n	8007186 <decidegrees2Radians10000+0x16>
        angle_decidegree -= 3600;
 800717c:	88fb      	ldrh	r3, [r7, #6]
 800717e:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8007182:	b29b      	uxth	r3, r3
 8007184:	80fb      	strh	r3, [r7, #6]
    while (angle_decidegree > 1800) {
 8007186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800718a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800718e:	dcf5      	bgt.n	800717c <decidegrees2Radians10000+0xc>
    }
    while (angle_decidegree < -1800) {
 8007190:	e004      	b.n	800719c <decidegrees2Radians10000+0x2c>
        angle_decidegree += 3600;
 8007192:	88fb      	ldrh	r3, [r7, #6]
 8007194:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8007198:	b29b      	uxth	r3, r3
 800719a:	80fb      	strh	r3, [r7, #6]
    while (angle_decidegree < -1800) {
 800719c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071a0:	f513 6fe1 	cmn.w	r3, #1800	; 0x708
 80071a4:	dbf5      	blt.n	8007192 <decidegrees2Radians10000+0x22>
    }
    return (int16_t)(RAD * 1000.0f * angle_decidegree);
 80071a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071b2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80071d0 <decidegrees2Radians10000+0x60>
 80071b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071be:	ee17 3a90 	vmov	r3, s15
 80071c2:	b21b      	sxth	r3, r3
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	418ba058 	.word	0x418ba058

080071d4 <crsfFrameAttitude>:

// fill dst buffer with crsf-attitude telemetry frame
void crsfFrameAttitude(sbuf_t *dst)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	sbufWriteU8(dst, CRSF_FRAME_ATTITUDE_PAYLOAD_SIZE + CRSF_FRAME_LENGTH_TYPE_CRC);
 80071dc:	2108      	movs	r1, #8
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff f9cd 	bl	800657e <sbufWriteU8>
	sbufWriteU8(dst, CRSF_FRAMETYPE_ATTITUDE);
 80071e4:	211e      	movs	r1, #30
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff f9c9 	bl	800657e <sbufWriteU8>
//     sbufWriteU16BigEndian(dst, decidegrees2Radians10000(attitude.values.pitch));
//     sbufWriteU16BigEndian(dst, decidegrees2Radians10000(attitude.values.roll));
//     sbufWriteU16BigEndian(dst, decidegrees2Radians10000(attitude.values.yaw));

	static int16_t r = 100; r = r+2;
 80071ec:	4b21      	ldr	r3, [pc, #132]	; (8007274 <crsfFrameAttitude+0xa0>)
 80071ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3302      	adds	r3, #2
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	b21a      	sxth	r2, r3
 80071fa:	4b1e      	ldr	r3, [pc, #120]	; (8007274 <crsfFrameAttitude+0xa0>)
 80071fc:	801a      	strh	r2, [r3, #0]
	static int16_t p = 100; p = p+2;
 80071fe:	4b1e      	ldr	r3, [pc, #120]	; (8007278 <crsfFrameAttitude+0xa4>)
 8007200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007204:	b29b      	uxth	r3, r3
 8007206:	3302      	adds	r3, #2
 8007208:	b29b      	uxth	r3, r3
 800720a:	b21a      	sxth	r2, r3
 800720c:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <crsfFrameAttitude+0xa4>)
 800720e:	801a      	strh	r2, [r3, #0]
	static int16_t y = 100; y = y+2;
 8007210:	4b1a      	ldr	r3, [pc, #104]	; (800727c <crsfFrameAttitude+0xa8>)
 8007212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007216:	b29b      	uxth	r3, r3
 8007218:	3302      	adds	r3, #2
 800721a:	b29b      	uxth	r3, r3
 800721c:	b21a      	sxth	r2, r3
 800721e:	4b17      	ldr	r3, [pc, #92]	; (800727c <crsfFrameAttitude+0xa8>)
 8007220:	801a      	strh	r2, [r3, #0]
	sbufWriteU16BigEndian(dst, decidegrees2Radians10000(r));
 8007222:	4b14      	ldr	r3, [pc, #80]	; (8007274 <crsfFrameAttitude+0xa0>)
 8007224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff ffa1 	bl	8007170 <decidegrees2Radians10000>
 800722e:	4603      	mov	r3, r0
 8007230:	b29b      	uxth	r3, r3
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff f9b5 	bl	80065a4 <sbufWriteU16BigEndian>
	sbufWriteU16BigEndian(dst, decidegrees2Radians10000(p));
 800723a:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <crsfFrameAttitude+0xa4>)
 800723c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007240:	4618      	mov	r0, r3
 8007242:	f7ff ff95 	bl	8007170 <decidegrees2Radians10000>
 8007246:	4603      	mov	r3, r0
 8007248:	b29b      	uxth	r3, r3
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff f9a9 	bl	80065a4 <sbufWriteU16BigEndian>
	sbufWriteU16BigEndian(dst, decidegrees2Radians10000(y));
 8007252:	4b0a      	ldr	r3, [pc, #40]	; (800727c <crsfFrameAttitude+0xa8>)
 8007254:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007258:	4618      	mov	r0, r3
 800725a:	f7ff ff89 	bl	8007170 <decidegrees2Radians10000>
 800725e:	4603      	mov	r3, r0
 8007260:	b29b      	uxth	r3, r3
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7ff f99d 	bl	80065a4 <sbufWriteU16BigEndian>
}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20000014 	.word	0x20000014
 8007278:	20000016 	.word	0x20000016
 800727c:	20000018 	.word	0x20000018

08007280 <crsfFrameFlightMode>:
0x21 Flight mode text based
Payload:
char[]      Flight mode ( Null terminated string )
*/
void crsfFrameFlightMode(sbuf_t *dst)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
    // write zero for frame length, since we don't know it yet
    uint8_t *lengthPtr = sbufPtr(dst);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff fa12 	bl	80066b2 <sbufPtr>
 800728e:	60f8      	str	r0, [r7, #12]
    sbufWriteU8(dst, 0);
 8007290:	2100      	movs	r1, #0
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff f973 	bl	800657e <sbufWriteU8>
    sbufWriteU8(dst, CRSF_FRAMETYPE_FLIGHT_MODE);
 8007298:	2121      	movs	r1, #33	; 0x21
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7ff f96f 	bl	800657e <sbufWriteU8>

    // Acro is the default mode
    const char *flightMode = "ACRO";
 80072a0:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <crsfFrameFlightMode+0x58>)
 80072a2:	60bb      	str	r3, [r7, #8]
//        flightMode = "HOR";
//    } else if (airmodeIsEnabled()) {
//        flightMode = "AIR";
//    }

    sbufWriteString(dst, flightMode);
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff f9cf 	bl	800664a <sbufWriteString>
//    if (!ARMING_FLAG(ARMED)) {
        sbufWriteU8(dst, '*');
 80072ac:	212a      	movs	r1, #42	; 0x2a
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7ff f965 	bl	800657e <sbufWriteU8>
//    }
    sbufWriteU8(dst, '\0');     // zero-terminate string
 80072b4:	2100      	movs	r1, #0
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff f961 	bl	800657e <sbufWriteU8>
    // write in the frame length
    *lengthPtr = sbufPtr(dst) - lengthPtr;
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff f9f8 	bl	80066b2 <sbufPtr>
 80072c2:	4602      	mov	r2, r0
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	701a      	strb	r2, [r3, #0]
}
 80072ce:	bf00      	nop
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	08007654 	.word	0x08007654

080072dc <crsfFrameDeviceInfo>:
uint32_t    Null Bytes
uint8_t     255 (Max MSP Parameter)
uint8_t     0x01 (Parameter version 1)
*/
void crsfFrameDeviceInfo(sbuf_t *dst)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08c      	sub	sp, #48	; 0x30
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
    char buff[30];
//    tfp_sprintf(buff, "%s %s: %s", FC_FIRMWARE_NAME, FC_VERSION_STRING, systemConfig()->boardIdentifier);

    uint8_t *lengthPtr = sbufPtr(dst);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7ff f9e4 	bl	80066b2 <sbufPtr>
 80072ea:	62b8      	str	r0, [r7, #40]	; 0x28
    sbufWriteU8(dst, 0);
 80072ec:	2100      	movs	r1, #0
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff f945 	bl	800657e <sbufWriteU8>
    sbufWriteU8(dst, CRSF_FRAMETYPE_DEVICE_INFO);
 80072f4:	2129      	movs	r1, #41	; 0x29
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff f941 	bl	800657e <sbufWriteU8>
    sbufWriteU8(dst, CRSF_ADDRESS_RADIO_TRANSMITTER);
 80072fc:	21ea      	movs	r1, #234	; 0xea
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff f93d 	bl	800657e <sbufWriteU8>
    sbufWriteU8(dst, CRSF_ADDRESS_FLIGHT_CONTROLLER);
 8007304:	21c8      	movs	r1, #200	; 0xc8
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7ff f939 	bl	800657e <sbufWriteU8>
    sbufWriteStringWithZeroTerminator(dst, buff);
 800730c:	f107 0308 	add.w	r3, r7, #8
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff f9ab 	bl	800666e <sbufWriteStringWithZeroTerminator>
    for (unsigned int ii = 0; ii < 12; ii++) {
 8007318:	2300      	movs	r3, #0
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800731c:	e006      	b.n	800732c <crsfFrameDeviceInfo+0x50>
        sbufWriteU8(dst, 0x00);
 800731e:	2100      	movs	r1, #0
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff f92c 	bl	800657e <sbufWriteU8>
    for (unsigned int ii = 0; ii < 12; ii++) {
 8007326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007328:	3301      	adds	r3, #1
 800732a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	2b0b      	cmp	r3, #11
 8007330:	d9f5      	bls.n	800731e <crsfFrameDeviceInfo+0x42>
    }
    sbufWriteU8(dst, CRSF_DEVICEINFO_PARAMETER_COUNT);
 8007332:	2100      	movs	r1, #0
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff f922 	bl	800657e <sbufWriteU8>
    sbufWriteU8(dst, CRSF_DEVICEINFO_VERSION);
 800733a:	2101      	movs	r1, #1
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff f91e 	bl	800657e <sbufWriteU8>
    *lengthPtr = sbufPtr(dst) - lengthPtr;
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff f9b5 	bl	80066b2 <sbufPtr>
 8007348:	4602      	mov	r2, r0
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	b2da      	uxtb	r2, r3
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	701a      	strb	r2, [r3, #0]
}
 8007354:	bf00      	nop
 8007356:	3730      	adds	r7, #48	; 0x30
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <crsfProcessSpeedNegotiationCmd>:
    crc8_poly_0xba_sbuf_append(dst, &lengthPtr[1]);
    *lengthPtr = sbufPtr(dst) - lengthPtr;
}

static void crsfProcessSpeedNegotiationCmd(uint8_t *frameStart)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
//            break;
//        }
//    }
//    crsfSpeed.portID = frameStart[1];
//    crsfSpeed.index = ii;
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <crsfScheduleSpeedNegotiationResponse>:

void crsfScheduleSpeedNegotiationResponse(void)
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
//    crsfSpeed.hasPendingReply = true;
//    crsfSpeed.isNewSpeedValid = false;
}
 8007374:	bf00      	nop
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
	...

08007380 <processCrsf>:
static uint8_t crsfScheduleCount;
static uint8_t crsfSchedule[CRSF_SCHEDULE_COUNT_MAX];


static void processCrsf(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
    if (!crsfRxIsTelemetryBufEmpty()) {
 8007386:	f7ff fda3 	bl	8006ed0 <crsfRxIsTelemetryBufEmpty>
 800738a:	4603      	mov	r3, r0
 800738c:	f083 0301 	eor.w	r3, r3, #1
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d15b      	bne.n	800744e <processCrsf+0xce>
        return; // do nothing if telemetry ouptut buffer is not empty yet.
    }

    static uint8_t crsfScheduleIndex = 0;

    const uint8_t currentSchedule = crsfSchedule[crsfScheduleIndex];
 8007396:	4b30      	ldr	r3, [pc, #192]	; (8007458 <processCrsf+0xd8>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	4b2f      	ldr	r3, [pc, #188]	; (800745c <processCrsf+0xdc>)
 800739e:	5c9b      	ldrb	r3, [r3, r2]
 80073a0:	73fb      	strb	r3, [r7, #15]

    sbuf_t crsfPayloadBuf;
    sbuf_t *dst = &crsfPayloadBuf;
 80073a2:	463b      	mov	r3, r7
 80073a4:	60bb      	str	r3, [r7, #8]

    if (currentSchedule & BIT(CRSF_FRAME_ATTITUDE_INDEX)) {
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d008      	beq.n	80073c2 <processCrsf+0x42>
        crsfInitializeFrame(dst);
 80073b0:	68b8      	ldr	r0, [r7, #8]
 80073b2:	f7ff fde9 	bl	8006f88 <crsfInitializeFrame>
        crsfFrameAttitude(dst);
 80073b6:	68b8      	ldr	r0, [r7, #8]
 80073b8:	f7ff ff0c 	bl	80071d4 <crsfFrameAttitude>
        crsfFinalize(dst);
 80073bc:	68b8      	ldr	r0, [r7, #8]
 80073be:	f7ff fdf9 	bl	8006fb4 <crsfFinalize>
    }
    if (currentSchedule & BIT(CRSF_FRAME_BATTERY_SENSOR_INDEX)) {
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d008      	beq.n	80073de <processCrsf+0x5e>
        crsfInitializeFrame(dst);
 80073cc:	68b8      	ldr	r0, [r7, #8]
 80073ce:	f7ff fddb 	bl	8006f88 <crsfInitializeFrame>
        crsfFrameBatterySensor(dst);
 80073d2:	68b8      	ldr	r0, [r7, #8]
 80073d4:	f7ff fe70 	bl	80070b8 <crsfFrameBatterySensor>
        crsfFinalize(dst);
 80073d8:	68b8      	ldr	r0, [r7, #8]
 80073da:	f7ff fdeb 	bl	8006fb4 <crsfFinalize>
    }

    if (currentSchedule & BIT(CRSF_FRAME_FLIGHT_MODE_INDEX)) {
 80073de:	7bfb      	ldrb	r3, [r7, #15]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d008      	beq.n	80073fa <processCrsf+0x7a>
        crsfInitializeFrame(dst);
 80073e8:	68b8      	ldr	r0, [r7, #8]
 80073ea:	f7ff fdcd 	bl	8006f88 <crsfInitializeFrame>
        crsfFrameFlightMode(dst);
 80073ee:	68b8      	ldr	r0, [r7, #8]
 80073f0:	f7ff ff46 	bl	8007280 <crsfFrameFlightMode>
        crsfFinalize(dst);
 80073f4:	68b8      	ldr	r0, [r7, #8]
 80073f6:	f7ff fddd 	bl	8006fb4 <crsfFinalize>
    }
#ifdef USE_GPS
    if (currentSchedule & BIT(CRSF_FRAME_GPS_INDEX)) {
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d008      	beq.n	8007416 <processCrsf+0x96>
        crsfInitializeFrame(dst);
 8007404:	68b8      	ldr	r0, [r7, #8]
 8007406:	f7ff fdbf 	bl	8006f88 <crsfInitializeFrame>
        crsfFrameGps(dst);
 800740a:	68b8      	ldr	r0, [r7, #8]
 800740c:	f7ff fdf4 	bl	8006ff8 <crsfFrameGps>
        crsfFinalize(dst);
 8007410:	68b8      	ldr	r0, [r7, #8]
 8007412:	f7ff fdcf 	bl	8006fb4 <crsfFinalize>
    }
#endif

#if defined(USE_CRSF_V3)
    if (currentSchedule & BIT(CRSF_FRAME_HEARTBEAT_INDEX)) {
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	f003 0310 	and.w	r3, r3, #16
 800741c:	2b00      	cmp	r3, #0
 800741e:	d008      	beq.n	8007432 <processCrsf+0xb2>
        crsfInitializeFrame(dst);
 8007420:	68b8      	ldr	r0, [r7, #8]
 8007422:	f7ff fdb1 	bl	8006f88 <crsfInitializeFrame>
        crsfFrameHeartbeat(dst);
 8007426:	68b8      	ldr	r0, [r7, #8]
 8007428:	f7ff fe8e 	bl	8007148 <crsfFrameHeartbeat>
        crsfFinalize(dst);
 800742c:	68b8      	ldr	r0, [r7, #8]
 800742e:	f7ff fdc1 	bl	8006fb4 <crsfFinalize>
    }
#endif

    crsfScheduleIndex = (crsfScheduleIndex + 1) % crsfScheduleCount;
 8007432:	4b09      	ldr	r3, [pc, #36]	; (8007458 <processCrsf+0xd8>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	3301      	adds	r3, #1
 8007438:	4a09      	ldr	r2, [pc, #36]	; (8007460 <processCrsf+0xe0>)
 800743a:	7812      	ldrb	r2, [r2, #0]
 800743c:	fb93 f1f2 	sdiv	r1, r3, r2
 8007440:	fb01 f202 	mul.w	r2, r1, r2
 8007444:	1a9b      	subs	r3, r3, r2
 8007446:	b2da      	uxtb	r2, r3
 8007448:	4b03      	ldr	r3, [pc, #12]	; (8007458 <processCrsf+0xd8>)
 800744a:	701a      	strb	r2, [r3, #0]
 800744c:	e000      	b.n	8007450 <processCrsf+0xd0>
        return; // do nothing if telemetry ouptut buffer is not empty yet.
 800744e:	bf00      	nop
}
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20000a0d 	.word	0x20000a0d
 800745c:	20000a08 	.word	0x20000a08
 8007460:	20000a04 	.word	0x20000a04

08007464 <initCrsfTelemetry>:
{
    deviceInfoReplyPending = true;
}

void initCrsfTelemetry(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
    // check if there is a serial port open for CRSF telemetry (ie opened by the CRSF RX)
    // and feature is enabled, if so, set CRSF telemetry enabled
    crsfTelemetryEnabled = crsfRxIsActive();
 800746a:	f7ff fd63 	bl	8006f34 <crsfRxIsActive>
 800746e:	4603      	mov	r3, r0
 8007470:	461a      	mov	r2, r3
 8007472:	4b1e      	ldr	r3, [pc, #120]	; (80074ec <initCrsfTelemetry+0x88>)
 8007474:	701a      	strb	r2, [r3, #0]

    if (!crsfTelemetryEnabled) {
 8007476:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <initCrsfTelemetry+0x88>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	f083 0301 	eor.w	r3, r3, #1
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d12e      	bne.n	80074e2 <initCrsfTelemetry+0x7e>
        return;
    }

    deviceInfoReplyPending = false;
 8007484:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <initCrsfTelemetry+0x8c>)
 8007486:	2200      	movs	r2, #0
 8007488:	701a      	strb	r2, [r3, #0]

    int index = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	607b      	str	r3, [r7, #4]
//    if (sensors(SENSOR_ACC) && telemetryIsSensorEnabled(SENSOR_PITCH | SENSOR_ROLL | SENSOR_HEADING)) {
        crsfSchedule[index++] = BIT(CRSF_FRAME_ATTITUDE_INDEX);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	4a17      	ldr	r2, [pc, #92]	; (80074f4 <initCrsfTelemetry+0x90>)
 8007496:	2101      	movs	r1, #1
 8007498:	54d1      	strb	r1, [r2, r3]
//    }
//    if ((isBatteryVoltageConfigured() && telemetryIsSensorEnabled(SENSOR_VOLTAGE))
//        || (isAmperageConfigured() && telemetryIsSensorEnabled(SENSOR_CURRENT | SENSOR_FUEL))) {
        crsfSchedule[index++] = BIT(CRSF_FRAME_BATTERY_SENSOR_INDEX);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	4a14      	ldr	r2, [pc, #80]	; (80074f4 <initCrsfTelemetry+0x90>)
 80074a2:	2102      	movs	r1, #2
 80074a4:	54d1      	strb	r1, [r2, r3]
//    }
//    if (telemetryIsSensorEnabled(SENSOR_MODE)) {
        crsfSchedule[index++] = BIT(CRSF_FRAME_FLIGHT_MODE_INDEX);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	4a11      	ldr	r2, [pc, #68]	; (80074f4 <initCrsfTelemetry+0x90>)
 80074ae:	2104      	movs	r1, #4
 80074b0:	54d1      	strb	r1, [r2, r3]
//    }
#ifdef USE_GPS
//    if (featureIsEnabled(FEATURE_GPS)
//       && telemetryIsSensorEnabled(SENSOR_ALTITUDE | SENSOR_LAT_LONG | SENSOR_GROUND_SPEED | SENSOR_HEADING)) {
        crsfSchedule[index++] = BIT(CRSF_FRAME_GPS_INDEX);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	607a      	str	r2, [r7, #4]
 80074b8:	4a0e      	ldr	r2, [pc, #56]	; (80074f4 <initCrsfTelemetry+0x90>)
 80074ba:	2108      	movs	r1, #8
 80074bc:	54d1      	strb	r1, [r2, r3]
//    }
#endif

#if defined(USE_CRSF_V3)
    while (index < (CRSF_CYCLETIME_US / CRSF_TELEMETRY_FRAME_INTERVAL_MAX_US) && index < CRSF_SCHEDULE_COUNT_MAX) {
 80074be:	e005      	b.n	80074cc <initCrsfTelemetry+0x68>
        // schedule heartbeat to ensure that telemetry/heartbeat frames are sent at minimum 50Hz
        crsfSchedule[index++] = BIT(CRSF_FRAME_HEARTBEAT_INDEX);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	607a      	str	r2, [r7, #4]
 80074c6:	4a0b      	ldr	r2, [pc, #44]	; (80074f4 <initCrsfTelemetry+0x90>)
 80074c8:	2110      	movs	r1, #16
 80074ca:	54d1      	strb	r1, [r2, r3]
    while (index < (CRSF_CYCLETIME_US / CRSF_TELEMETRY_FRAME_INTERVAL_MAX_US) && index < CRSF_SCHEDULE_COUNT_MAX) {
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	dc02      	bgt.n	80074d8 <initCrsfTelemetry+0x74>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	ddf3      	ble.n	80074c0 <initCrsfTelemetry+0x5c>
    }
#endif

    crsfScheduleCount = (uint8_t)index;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <initCrsfTelemetry+0x94>)
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	e000      	b.n	80074e4 <initCrsfTelemetry+0x80>
        return;
 80074e2:	bf00      	nop
}
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000990 	.word	0x20000990
 80074f0:	20000991 	.word	0x20000991
 80074f4:	20000a08 	.word	0x20000a08
 80074f8:	20000a04 	.word	0x20000a04

080074fc <crsfProcessCommand>:
    return crsfTelemetryEnabled;
}

#if defined(USE_CRSF_V3)
void crsfProcessCommand(uint8_t *frameStart)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
    uint8_t cmd = *frameStart;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	73fb      	strb	r3, [r7, #15]
    uint8_t subCmd = frameStart[1];
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	785b      	ldrb	r3, [r3, #1]
 800750e:	73bb      	strb	r3, [r7, #14]
    switch (cmd) {
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	2b0a      	cmp	r3, #10
 8007514:	d10c      	bne.n	8007530 <crsfProcessCommand+0x34>
    case CRSF_COMMAND_SUBCMD_GENERAL:
        switch (subCmd) {
 8007516:	7bbb      	ldrb	r3, [r7, #14]
 8007518:	2b70      	cmp	r3, #112	; 0x70
 800751a:	d107      	bne.n	800752c <crsfProcessCommand+0x30>
        case CRSF_COMMAND_SUBCMD_GENERAL_CRSF_SPEED_PROPOSAL:
            crsfProcessSpeedNegotiationCmd(&frameStart[1]);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3301      	adds	r3, #1
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff ff1b 	bl	800735c <crsfProcessSpeedNegotiationCmd>
            crsfScheduleSpeedNegotiationResponse();
 8007526:	f7ff ff23 	bl	8007370 <crsfScheduleSpeedNegotiationResponse>
            break;
 800752a:	e000      	b.n	800752e <crsfProcessCommand+0x32>
        default:
            break;
 800752c:	bf00      	nop
        }
        break;
 800752e:	e000      	b.n	8007532 <crsfProcessCommand+0x36>
    default:
        break;
 8007530:	bf00      	nop
    }
}
 8007532:	bf00      	nop
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <handleCrsfTelemetry>:

/*
 * Called periodically by the scheduler
 */
void handleCrsfTelemetry(timeUs_t currentTimeUs)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
    static uint32_t crsfLastCycleTime;

    if (!crsfTelemetryEnabled) {
 8007544:	4b1b      	ldr	r3, [pc, #108]	; (80075b4 <handleCrsfTelemetry+0x78>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f083 0301 	eor.w	r3, r3, #1
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d12b      	bne.n	80075aa <handleCrsfTelemetry+0x6e>
#endif

    // Give the receiver a chance to send any outstanding telemetry data.
    // This needs to be done at high frequency, to enable the RX to send the telemetry frame
    // in between the RX frames.
    crsfRxSendTelemetryData();
 8007552:	f7ff fc9f 	bl	8006e94 <crsfRxSendTelemetryData>

    if (deviceInfoReplyPending) {
 8007556:	4b18      	ldr	r3, [pc, #96]	; (80075b8 <handleCrsfTelemetry+0x7c>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d012      	beq.n	8007584 <handleCrsfTelemetry+0x48>
        sbuf_t crsfPayloadBuf;
        sbuf_t *dst = &crsfPayloadBuf;
 800755e:	f107 030c 	add.w	r3, r7, #12
 8007562:	617b      	str	r3, [r7, #20]
        crsfInitializeFrame(dst);
 8007564:	6978      	ldr	r0, [r7, #20]
 8007566:	f7ff fd0f 	bl	8006f88 <crsfInitializeFrame>
        crsfFrameDeviceInfo(dst);
 800756a:	6978      	ldr	r0, [r7, #20]
 800756c:	f7ff feb6 	bl	80072dc <crsfFrameDeviceInfo>
        crsfFinalize(dst);
 8007570:	6978      	ldr	r0, [r7, #20]
 8007572:	f7ff fd1f 	bl	8006fb4 <crsfFinalize>
        deviceInfoReplyPending = false;
 8007576:	4b10      	ldr	r3, [pc, #64]	; (80075b8 <handleCrsfTelemetry+0x7c>)
 8007578:	2200      	movs	r2, #0
 800757a:	701a      	strb	r2, [r3, #0]
        crsfLastCycleTime = currentTimeUs; // reset telemetry timing due to ad-hoc request
 800757c:	4a0f      	ldr	r2, [pc, #60]	; (80075bc <handleCrsfTelemetry+0x80>)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	e013      	b.n	80075ac <handleCrsfTelemetry+0x70>
        return;
    }

    // Actual telemetry data only needs to be sent at a low frequency, ie 10Hz
    // Spread out scheduled frames evenly so each frame is sent at the same frequency.
    if (currentTimeUs >= crsfLastCycleTime + (CRSF_CYCLETIME_US / crsfScheduleCount)) {
 8007584:	4b0e      	ldr	r3, [pc, #56]	; (80075c0 <handleCrsfTelemetry+0x84>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	461a      	mov	r2, r3
 800758a:	4b0e      	ldr	r3, [pc, #56]	; (80075c4 <handleCrsfTelemetry+0x88>)
 800758c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007590:	461a      	mov	r2, r3
 8007592:	4b0a      	ldr	r3, [pc, #40]	; (80075bc <handleCrsfTelemetry+0x80>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4413      	add	r3, r2
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	429a      	cmp	r2, r3
 800759c:	d306      	bcc.n	80075ac <handleCrsfTelemetry+0x70>
        crsfLastCycleTime = currentTimeUs;
 800759e:	4a07      	ldr	r2, [pc, #28]	; (80075bc <handleCrsfTelemetry+0x80>)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6013      	str	r3, [r2, #0]
        processCrsf();
 80075a4:	f7ff feec 	bl	8007380 <processCrsf>
 80075a8:	e000      	b.n	80075ac <handleCrsfTelemetry+0x70>
        return;
 80075aa:	bf00      	nop
    }
}
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000990 	.word	0x20000990
 80075b8:	20000991 	.word	0x20000991
 80075bc:	20000a10 	.word	0x20000a10
 80075c0:	20000a04 	.word	0x20000a04
 80075c4:	000186a0 	.word	0x000186a0

080075c8 <memset>:
 80075c8:	4402      	add	r2, r0
 80075ca:	4603      	mov	r3, r0
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d100      	bne.n	80075d2 <memset+0xa>
 80075d0:	4770      	bx	lr
 80075d2:	f803 1b01 	strb.w	r1, [r3], #1
 80075d6:	e7f9      	b.n	80075cc <memset+0x4>

080075d8 <__libc_init_array>:
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	4d0d      	ldr	r5, [pc, #52]	; (8007610 <__libc_init_array+0x38>)
 80075dc:	4c0d      	ldr	r4, [pc, #52]	; (8007614 <__libc_init_array+0x3c>)
 80075de:	1b64      	subs	r4, r4, r5
 80075e0:	10a4      	asrs	r4, r4, #2
 80075e2:	2600      	movs	r6, #0
 80075e4:	42a6      	cmp	r6, r4
 80075e6:	d109      	bne.n	80075fc <__libc_init_array+0x24>
 80075e8:	4d0b      	ldr	r5, [pc, #44]	; (8007618 <__libc_init_array+0x40>)
 80075ea:	4c0c      	ldr	r4, [pc, #48]	; (800761c <__libc_init_array+0x44>)
 80075ec:	f000 f826 	bl	800763c <_init>
 80075f0:	1b64      	subs	r4, r4, r5
 80075f2:	10a4      	asrs	r4, r4, #2
 80075f4:	2600      	movs	r6, #0
 80075f6:	42a6      	cmp	r6, r4
 80075f8:	d105      	bne.n	8007606 <__libc_init_array+0x2e>
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
 80075fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007600:	4798      	blx	r3
 8007602:	3601      	adds	r6, #1
 8007604:	e7ee      	b.n	80075e4 <__libc_init_array+0xc>
 8007606:	f855 3b04 	ldr.w	r3, [r5], #4
 800760a:	4798      	blx	r3
 800760c:	3601      	adds	r6, #1
 800760e:	e7f2      	b.n	80075f6 <__libc_init_array+0x1e>
 8007610:	08007684 	.word	0x08007684
 8007614:	08007684 	.word	0x08007684
 8007618:	08007684 	.word	0x08007684
 800761c:	08007688 	.word	0x08007688

08007620 <memcpy>:
 8007620:	440a      	add	r2, r1
 8007622:	4291      	cmp	r1, r2
 8007624:	f100 33ff 	add.w	r3, r0, #4294967295
 8007628:	d100      	bne.n	800762c <memcpy+0xc>
 800762a:	4770      	bx	lr
 800762c:	b510      	push	{r4, lr}
 800762e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007632:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007636:	4291      	cmp	r1, r2
 8007638:	d1f9      	bne.n	800762e <memcpy+0xe>
 800763a:	bd10      	pop	{r4, pc}

0800763c <_init>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	bf00      	nop
 8007640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007642:	bc08      	pop	{r3}
 8007644:	469e      	mov	lr, r3
 8007646:	4770      	bx	lr

08007648 <_fini>:
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	bf00      	nop
 800764c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764e:	bc08      	pop	{r3}
 8007650:	469e      	mov	lr, r3
 8007652:	4770      	bx	lr
